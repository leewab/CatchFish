<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MUEditor</name>
    </assembly>
    <members>
        <member name="T:EFilterAssetType">
            <summary>
            过滤器资源类型枚举。
            用于调用 MUEditorUtility.FindAssets 查找资源时指定资源类型。
            </summary>
        </member>
        <member name="T:MUEditor.MUAssetListCtrl">
            <summary>
            资源对象列表控件
            </summary>
        </member>
        <member name="T:MUEditor.MUEditorListCtrl`1">
            <summary>
            供编辑器使用的列表控件
            是对 ReorderableList 类的二次封装类
            </summary>
            <typeparam name="T">列表中数据的类型</typeparam>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.Title">
            <summary>
            列表标题文本，如为空则不显示标题栏
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.ShowTitle">
            <summary>
            是否显示标题栏
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.DataList">
            <summary>
            实际的数据列表
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.ListProp">
            <summary>
            内部的实际ReorderableList对象
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.Count">
            <summary>
            列表中数据项的数量
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.Item(System.Int32)">
            <summary>
            重载[]的get运算
            </summary>
            <param name="index">索引</param>
            <returns>列表中的对应项，越界时打印错误并返回类型的默认值</returns>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.Index">
            <summary>
            列表的选中项索引
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.SelectedItem">
            <summary>
            当前选中的项
            </summary>
        </member>
        <member name="F:MUEditor.MUEditorListCtrl`1.SelectedEvent">
            <summary>
            列表中的某一项被选中的事件
            </summary>
        </member>
        <member name="F:MUEditor.MUEditorListCtrl`1.UnselectedEvent">
            <summary>
            列表取消选中事件
            </summary>
        </member>
        <member name="T:MUEditor.MUEditorListCtrl`1.DrawElementDelegate">
            <summary>
            绘制单行元素的代理
            </summary>
            <param name="rect">绘制区域</param>
            <param name="element">要绘制的元素</param>
            <param name="isActive">是否被激活</param>
            <param name="isFocused">是否有焦点</param>
        </member>
        <member name="F:MUEditor.MUEditorListCtrl`1.DrawElementEvent">
            <summary>
            绘制单元素事件
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.ListViewHeight">
            <summary>
            列表控件的实际高度
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.ScrollViewPosition">
            <summary>
            滚动视图的位置
            </summary>
        </member>
        <member name="F:MUEditor.MUEditorListCtrl`1.LINE_HEIGHT">
            <summary>
            单行高度
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.TitleHeight">
            <summary>
            标题高度
            </summary>
        </member>
        <member name="P:MUEditor.MUEditorListCtrl`1.IsUnityObjType">
            <summary>
            列表的数据类型是否是UnityEngine.Object的子类
            </summary>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.GetDataList">
            <summary>
            获取数据列表
            </summary>
            <returns>数据列表</returns>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.SetDataList(System.Collections.Generic.List{`0})">
            <summary>
            更新数据列表
            </summary>
            <param name="newDataList">新的数据列表</param>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.Clear">
            <summary>
            清空列表
            </summary>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.ForceSelect(System.Int32)">
            <summary>
            选中指定项，并强制触发选中事件
            </summary>
            <param name="index">选中项索引</param>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.DoLayoutList(UnityEngine.GUILayoutOption[])">
            <summary>
            绘制列表界面
            </summary>
            <param name="options">绘制参数</param>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.OnAdaptScrollViewPosition(System.Int32)">
            <summary>
            调整滚动视图的位置，可由子类覆写
            </summary>
            <param name="index">当前选中的索引</param>
            <returns>滚动视图的位置</returns>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.OnDrawElement(UnityEngine.Rect,`0,System.Boolean,System.Boolean)">
            <summary>
            响应绘制列表中的一行，可由子类覆写
            </summary>
            <param name="rect">绘制区域</param>
            <param name="element">要绘制的元素</param>
            <param name="isActive">是否被激活</param>
            <param name="isFocused">是否有焦点</param>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.GetElementDisplayName(`0)">
            <summary>
            获取元素的显示名称
            </summary>
            <param name="element">元素</param>
            <returns>元素的显示名称</returns>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.OnGetElementDisplayName(`0)">
            <summary>
            响应获取元素的显示名称，可由子类覆写
            </summary>
            <param name="element">元素</param>
            <returns>元素的显示名称</returns>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.OnSelectElement(`0)">
            <summary>
            响应选中单个元素，可由子类覆写
            </summary>
            <param name="element">选中的元素</param>
        </member>
        <member name="M:MUEditor.MUEditorListCtrl`1.CheckElementIsNull(`0)">
            <summary>
            检查元素是否为空
            </summary>
            <param name="element">元素</param>
            <returns>元素是否为空</returns>
        </member>
        <member name="T:MUEditor.MUGameObjectListCtrl">
            <summary>
            游戏对象列表控件
            </summary>
        </member>
        <member name="T:MUEditor.MUMaterialListCtrl">
            <summary>
            材质列表控件
            </summary>
        </member>
        <member name="T:MUEditor.MUSpriteListCtrl">
            <summary>
            UI精灵列表控件
            </summary>
        </member>
        <member name="T:MUEditor.MUStringListCtrl">
            <summary>
            字符串类型列表控件
            </summary>
        </member>
        <member name="T:MUEditor.MUTextureListCtrl">
            <summary>
            贴图列表控件
            </summary>
        </member>
        <member name="T:MUEditor.MUUIGameObjectListCtrl">
            <summary>
            UI游戏对象列表控件
            </summary>
        </member>
        <member name="T:MUEditor.IMUMenuItem">
            <summary>
            MU菜单项接口
            </summary>
        </member>
        <member name="P:MUEditor.IMUMenuItem.Path">
            <summary>
            菜单项路径
            </summary>
        </member>
        <member name="P:MUEditor.IMUMenuItem.Priority">
            <summary>
            排序优先级
            </summary>
        </member>
        <member name="M:MUEditor.IMUMenuItem.AddToMenu(UnityEditor.GenericMenu)">
            <summary>
            添加到父级菜单
            </summary>
            <param name="menu">父级菜单</param>
        </member>
        <member name="T:MUEditor.MUMenuBar">
            <summary>
            供各编辑器使用的菜单栏类
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuBar.MenuItemWidth">
            <summary>
            菜单项宽度
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuBar.MenuItemHeight">
            <summary>
            菜单项高度
            </summary>
        </member>
        <member name="F:MUEditor.MUMenuBar.isMenuDirty">
            <summary>
            菜单是否需要刷新
            </summary>
        </member>
        <member name="F:MUEditor.MUMenuBar.class2menuItemDict">
            <summary>
            菜单根目录分类到菜单项列表的映射字典
            </summary>
        </member>
        <member name="M:MUEditor.MUMenuBar.RegisterMenuItem(System.String,MUEditor.IMUMenuItem)">
            <summary>
            注册菜单项
            </summary>
            <param name="rootMenuClass">根目录分类</param>
            <param name="menuItem">菜单项</param>
        </member>
        <member name="M:MUEditor.MUMenuBar.ClearAllMenuItem">
            <summary>
            清除所有菜单项
            </summary>
        </member>
        <member name="M:MUEditor.MUMenuBar.DrawGUI">
            <summary>
            绘制界面
            </summary>
        </member>
        <member name="M:MUEditor.MUMenuBar.SortAllMenu">
            <summary>
            对所有菜单进行排序
            </summary>
        </member>
        <member name="T:MUEditor.MUMenuItem">
            <summary>
            供各编辑器使用的菜单项类
            </summary>
        </member>
        <member name="T:MUEditor.MUMenuItem.MUMenuItemDelegate">
            <summary>
            供菜单项记录检测方法使用的布尔返回型委托
            </summary>
            <returns>返回的布尔值</returns>
        </member>
        <member name="P:MUEditor.MUMenuItem.Path">
            <summary>
            菜单项路径
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuItem.Priority">
            <summary>
            排序优先级
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuItem.ExecuteAction">
            <summary>
            执行菜单项时的实际执行逻辑
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuItem.VerifyDelegate">
            <summary>
            检测菜单项能否使用的委托
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuItem.IsSelectedDelegate">
            <summary>
            检测菜单项是否被选中的委托
            </summary>
        </member>
        <member name="M:MUEditor.MUMenuItem.#ctor(System.String,System.Int32,System.Action)">
            <summary>
            不检测能否执行的菜单项构造函数
            </summary>
            <param name="path">菜单项路径</param>
            <param name="priority">显示时的排序优先级</param>
            <param name="executeAction">菜单项的执行动作</param>
        </member>
        <member name="M:MUEditor.MUMenuItem.#ctor(System.String,System.Int32,System.Action,MUEditor.MUMenuItem.MUMenuItemDelegate)">
            <summary>
            完整菜单项构造函数
            </summary>
            <param name="path">菜单项路径</param>
            <param name="priority">显示时的排序优先级</param>
            <param name="executeAction">菜单项的执行动作</param>
            <param name="verifyDelegate">检测菜单项能否使用的委托</param>
        </member>
        <member name="M:MUEditor.MUMenuItem.#ctor(System.String,System.Int32,System.Action,MUEditor.MUMenuItem.MUMenuItemDelegate,MUEditor.MUMenuItem.MUMenuItemDelegate)">
            <summary>
            完整菜单项构造函数
            </summary>
            <param name="path">菜单项路径</param>
            <param name="priority">显示时的排序优先级</param>
            <param name="executeAction">菜单项的执行动作</param>
            <param name="verifyDelegate">检测菜单项能否使用的委托</param>
            <param name="isSelectedDelegate">判断菜单项是否被选中的委托</param>
        </member>
        <member name="M:MUEditor.MUMenuItem.AddToMenu(UnityEditor.GenericMenu)">
            <summary>
            添加到父级菜单
            </summary>
            <param name="menu">父级菜单</param>
        </member>
        <member name="M:MUEditor.MUMenuItem.Execute">
            <summary>
            执行菜单项
            </summary>
        </member>
        <member name="M:MUEditor.MUMenuItem.CheckIsEnable">
            <summary>
            检测菜单项是否可用
            </summary>
            <returns>菜单项是否可用</returns>
        </member>
        <member name="M:MUEditor.MUMenuItem.CheckIsSelected">
            <summary>
            检测菜单项是否被选中
            </summary>
            <returns>菜单项是否被选中</returns>
        </member>
        <member name="T:MUEditor.MUMenuSeparator">
            <summary>
            供各编辑器使用的菜单分割线类
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuSeparator.Path">
            <summary>
            菜单项路径
            </summary>
        </member>
        <member name="P:MUEditor.MUMenuSeparator.Priority">
            <summary>
            排序优先级
            </summary>
        </member>
        <member name="M:MUEditor.MUMenuSeparator.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="path">路径</param>
            <param name="priority">优先级</param>
        </member>
        <member name="M:MUEditor.MUMenuSeparator.AddToMenu(UnityEditor.GenericMenu)">
            <summary>
            添加到父级菜单
            </summary>
            <param name="menu">父级菜单</param>
        </member>
        <member name="T:MUEditor.MUDataListWindow`1">
            <summary>
            可以显示数据列表的窗口基类
            </summary>
            <typeparam name="T">列表中的数据的类型</typeparam>
        </member>
        <member name="P:MUEditor.MUDataListWindow`1.OriginDataList">
            <summary>
            原始数据列表
            </summary>
        </member>
        <member name="P:MUEditor.MUDataListWindow`1.DataListCtrl">
            <summary>
            列表控件
            </summary>
        </member>
        <member name="P:MUEditor.MUDataListWindow`1.Filter">
            <summary>
            搜索过滤文本
            </summary>
        </member>
        <member name="F:MUEditor.MUDataListWindow`1.searchField">
            <summary>
            搜索框控件
            </summary>
        </member>
        <member name="P:MUEditor.MUDataListWindow`1.TitleText">
            <summary>
            窗口标题
            </summary>
        </member>
        <member name="P:MUEditor.MUDataListWindow`1.DataListTitle">
            <summary>
            数据列表标题
            </summary>
        </member>
        <member name="P:MUEditor.MUDataListWindow`1.ButtonText">
            <summary>
            获取数据列表按钮文本
            </summary>
        </member>
        <member name="P:MUEditor.MUDataListWindow`1.RefreshWhenElementNull">
            <summary>
            当元素为空时，是否自动刷新
            </summary>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnEnable">
            <summary>
            响应窗口启动
            </summary>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnDestroy">
            <summary>
            响应窗口销毁
            </summary>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnGUI">
            <summary>
            响应绘制窗口
            </summary>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnRefreshDataList">
            <summary>
            刷新数据列表
            </summary>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnGetDataList">
            <summary>
            获取数据列表
            </summary>
            <returns>数据列表</returns>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnGetElementDisplayName(`0)">
            <summary>
            获取元素的显示名称
            </summary>
            <param name="element">元素</param>
            <returns>元素的显示名称</returns>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnDrawElement(UnityEngine.Rect,`0,System.Boolean,System.Boolean)">
            <summary>
            绘制单个元素
            </summary>
            <param name="rect">绘制区域</param>
            <param name="element">要绘制的元素</param>
            <param name="isActive">是否被激活</param>
            <param name="isFocused">是否有焦点</param>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.OnSelectElement(`0)">
            <summary>
            选中单个元素
            </summary>
            <param name="element">选中的元素</param>
        </member>
        <member name="M:MUEditor.MUDataListWindow`1.RefreshFilteredItems">
            <summary>
            刷新被过滤后的数据项
            </summary>
        </member>
        <member name="T:MUEditor.SetIntValue">
            <summary>
            用于设置整型数值的委托
            </summary>
        </member>
        <member name="T:MUEditor.SetFloatValue">
            <summary>
            用于设置浮点型数值的委托
            </summary>
        </member>
        <member name="T:MUEditor.SetBoolValue">
            <summary>
            用于设置布尔型数值的委托
            </summary>
        </member>
        <member name="T:MUEditor.SetStringValue">
            <summary>
            用于设置字符串型数值的委托
            </summary>
        </member>
        <member name="T:MUEditor.SetVector3Value">
            <summary>
            用于设置Vector3类型数值的委托
            </summary>
        </member>
        <member name="T:MUEditor.SetVector2Value">
            <summary>
            用于设置Vector2类型数值的委托
            </summary>
        </member>
        <member name="T:MUEditor.MUGuiUtility">
            <summary>
            MUEditor的通用GUI辅助方法
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.Vector3Field(System.String,UnityEngine.Vector3)">
            <summary>
            该方法用于替代EditorGUILayout.Vector3Field
            使用该方法可以避免原方法创建出来的UI控件在布局上额外多占用一行的问题
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.Vector3PropertyField(System.String,UnityEditor.SerializedProperty)">
            <summary>
            仅供Vector3类型的属性使用
            与Vector3Field方法基本等价，用于解决布局问题
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.Vector2Field(System.String,UnityEngine.Vector2)">
            <summary>
            该方法用于替代EditorGUILayout.Vector2Field
            使用该方法可以避免原方法创建出来的UI控件在布局上额外多占用一行的问题
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.ObjectField``1(System.String,``0,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑对象类型字段的界面
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="label">标签文本</param>
            <param name="obj">对象</param>
            <param name="allowSceneObjects">是否允许选中场景中的对象</param>
            <param name="options">界面绘制参数</param>
            <returns>编辑后得到的新对象</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.PropertyField(System.String,UnityEditor.SerializedProperty)">
            <summary>
            EditorGUILayout.PropertyField的参数简化版
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.TextArea(System.String,System.String,System.String)">
            <summary>
            以TextArea控制来编辑一个较长的文本，能根据指定的分隔符自动换行
            </summary>
            <param name="label">左侧标签文本</param>
            <param name="value">需要编辑的文本</param>
            <param name="seprator">换行分隔符</param>
            <returns>编辑后的文本</returns>
        </member>
        <member name="T:MUEditor.MUGuiUtility.PopupWindowSelectionChanged`1">
            <summary>
            弹出窗口的选中项变更的委托
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="selectedData">被选中的数据</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.PopupSelectionWindow``1(UnityEngine.Rect,System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.PopupWindowSelectionChanged{``0})">
            <summary>
            弹出从列表中选择数据项的窗口
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="windowRect">窗口位置</param>
            <param name="allData">包含所有数据的列表</param>
            <param name="callback">选中项变更的回调</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.PopupSelectionWindow``1(UnityEngine.Rect,System.Collections.Generic.List{``0},``0,MUEditor.MUGuiUtility.PopupWindowSelectionChanged{``0})">
            <summary>
            弹出从列表中选择数据项的窗口
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="windowRect">窗口位置</param>
            <param name="allData">包含所有数据的列表</param>
            <param name="initData">初始选中的数据</param>
            <param name="callback">选中项变更的回调</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.OnGUIGroup(System.String,System.Action)">
            <summary>
            在界面上显示一个分组信息
            </summary>
            <param name="groupName">组名</param>
            <param name="guiAction">显示分组信息的实际代码</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.OnGUIGroup(System.String,System.Action,System.Boolean@)">
            <summary>
            在界面上显示一个分组信息
            </summary>
            <param name="groupName">组名</param>
            <param name="guiAction">显示分组信息的实际代码</param>
            <param name="isShrink">是否收缩</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.PingAsset(System.String)">
            <summary>
            在编辑器中定位到指定资源
            </summary>
            <param name="assetPath">资源路径</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.IntFieldUndoable(System.String,System.Int32,UnityEngine.Object,MUEditor.SetIntValue)">
            <summary>
            绘制编辑整型数值的界面，支持撤销重做
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.IntSliderUndoable(System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Object,MUEditor.SetIntValue)">
            <summary>
            绘制编辑整型数值的滑杆界面，支持撤销重做
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.FloatFieldUndoable(System.String,System.Single,UnityEngine.Object,MUEditor.SetFloatValue)">
            <summary>
            绘制编辑浮点型数值的界面，支持撤销重做
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SliderUndoable(System.String,System.Single,System.Single,System.Single,UnityEngine.Object,MUEditor.SetFloatValue)">
            <summary>
            绘制编辑浮点型数值的滑杆界面，支持撤销重做
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.ToggleUndoable(System.String,System.Boolean,UnityEngine.Object,MUEditor.SetBoolValue)">
            <summary>
            绘制编辑布尔型数值的界面，支持撤销重做
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.TextFieldUndoable(System.String,System.String,UnityEngine.Object,MUEditor.SetStringValue)">
            <summary>
            绘制编辑文本型数值的界面，支持撤销重做
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.Vector3FieldUndoable(System.String,UnityEngine.Vector3,UnityEngine.Object,MUEditor.SetVector3Value)">
            <summary>
            绘制编辑Vector3型数值的界面，支持撤销重做
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.Vector2FieldUndoable(System.String,UnityEngine.Vector2,UnityEngine.Object,MUEditor.SetVector2Value)">
            <summary>
            绘制编辑Vector2型数值的界面，支持撤销重做
            </summary>
        </member>
        <member name="T:MUEditor.MUGuiUtility.GetBoolValue`1">
            <summary>
            获取数据对象中的Bool类型属性的委托
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="data">数据对象</param>
            <returns>获取到的bool型属性值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.CreateBoolArray``1(System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.GetBoolValue{``0})">
            <summary>
            使用数据对象的某一bool属性创建对应的整型数组
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="getValueDelegate">获取bool属性值的委托</param>
            <returns>bool属性值的数组</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiToggle(System.String,System.Boolean[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个bool值的Toggle界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">bool数组值</param>
            <param name="options">界面绘制参数</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiToggleLeft(System.String,System.Boolean[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个bool值的ToggleLeft界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">bool数组值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.IsAllValueEqual(System.Boolean[],System.Nullable{System.Boolean}@)">
            <summary>
            判断是否数组所有值相等
            </summary>
            <param name="values">待判断数组</param>
            <param name="firstValue">数组第一个值</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SetBoolValue``1(System.Collections.Generic.List{``0},System.Nullable{System.Boolean},System.Action{``0,System.Boolean})">
            <summary>
            对数据对象设置指定的bool属性的属性值
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="value">需要设置的属性值</param>
            <param name="setValueAction">设置属性值的Action</param>
        </member>
        <member name="T:MUEditor.MUGuiUtility.GetIntValue`1">
            <summary>
            获取数据对象中的int类型属性的委托
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="data">数据对象</param>
            <returns>获取到的int型属性值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.CreateIntArray``1(System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.GetIntValue{``0})">
            <summary>
            使用数据对象的某一int属性创建对应的整型数组
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="getValueDelegate">获取整型属性值的委托</param>
            <returns>整型属性值的数组</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiIntField(System.Int32[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个整型值的GUI界面
            </summary>
            <param name="values">整型数组值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiIntField(System.String,System.Int32[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个整型值的GUI界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">整型数组值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiIntSliderField(System.String,System.Int32[],System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个整型值的滑动条界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">整型数组值</param>
            <param name="leftValue">最小值</param>
            <param name="rightValue">最大值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiPopupField(System.String,System.Int32[],System.String[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个整型值的Popup界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">整型数组值</param>
            <param name="displayOptions">显示的选项名</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.IsAllValueEqual(System.Int32[],System.Nullable{System.Int32}@)">
            <summary>
            判断是否数组所有值相等
            </summary>
            <param name="values">待判断数组</param>
            <param name="firstValue">数组第一个值</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SetIntValue``1(System.Collections.Generic.List{``0},System.Nullable{System.Int32},System.Action{``0,System.Int32})">
            <summary>
            对数据对象设置指定的整型属性的属性值
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="value">需要设置的属性值</param>
            <param name="setValueAction">设置属性值的Action</param>
        </member>
        <member name="T:MUEditor.MUGuiUtility.GetFloatValue`1">
            <summary>
            获取数据对象中的float类型属性的委托
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="data">数据对象</param>
            <returns>获取到的float型属性值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.CreateFloatArray``1(System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.GetFloatValue{``0})">
            <summary>
            使用数据对象的某一float属性创建对应的整型数组
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="getValueDelegate">获取float属性值的委托</param>
            <returns>float属性值的数组</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiFloatField(System.Single[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个float值的GUI界面
            </summary>
            <param name="values">float数组值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiFloatField(System.String,System.Single[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个float值的GUI界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">float数组值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiSliderField(System.String,System.Single[],System.Single,System.Single,UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个float值的滑动条界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">float数组值</param>
            <param name="leftValue">最小值</param>
            <param name="rightValue">最大值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.IsAllValueEqual(System.Single[],System.Nullable{System.Single}@)">
            <summary>
            判断是否数组所有值相等
            </summary>
            <param name="values">待判断数组</param>
            <param name="firstValue">数组第一个值</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SetFloatValue``1(System.Collections.Generic.List{``0},System.Nullable{System.Single},System.Action{``0,System.Single})">
            <summary>
            对数据对象设置指定的float属性的属性值
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="value">需要设置的属性值</param>
            <param name="setValueAction">设置属性值的Action</param>
        </member>
        <member name="T:MUEditor.MUGuiUtility.GetStringValue`1">
            <summary>
            获取数据对象中的string类型属性的委托
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="data">数据对象</param>
            <returns>获取到的string型属性值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.CreateStringArray``1(System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.GetStringValue{``0})">
            <summary>
            使用数据对象的某一string属性创建对应的整型数组
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="getValueDelegate">获取string属性值的委托</param>
            <returns>string属性值的数组</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiStringField(System.String,System.String[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个string值的GUI界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">string数组值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SetStringValue``1(System.Collections.Generic.List{``0},System.String,System.Action{``0,System.String})">
            <summary>
            对数据对象设置指定的string属性的属性值
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="value">需要设置的属性值</param>
            <param name="setValueAction">设置属性值的Action</param>
        </member>
        <member name="T:MUEditor.MUGuiUtility.GetEnumValue`1">
            <summary>
            获取数据对象中的枚举类型属性的委托
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="data">数据对象</param>
            <returns>获取到的枚举型属性值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.CreateEnumArray``1(System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.GetEnumValue{``0})">
            <summary>
            使用数据对象的某一枚举属性创建对应的整型数组
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="getValueDelegate">获取枚举型属性值的委托</param>
            <returns>枚举型属性值的数组</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiEnumField(System.String,System.Enum[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个枚举型值的GUI界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">枚举型数组值</param>
            <returns>编辑后的新数值，返回null表示未对数值进行修改</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.IsAllValueEqual(System.Enum[],System.Enum@)">
            <summary>
            判断是否数组所有值相等
            </summary>
            <param name="values">待判断数组</param>
            <param name="firstValue">数组第一个值</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SetEnumValue``1(System.Collections.Generic.List{``0},System.Enum,System.Action{``0,System.Enum})">
            <summary>
            对数据对象设置指定的枚举型属性的属性值
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="value">需要设置的属性值</param>
            <param name="setValueAction">设置属性值的Action</param>
        </member>
        <member name="T:MUEditor.MUGuiUtility.GetVector3Value`1">
            <summary>
            获取数据对象中的Vector3类型属性的委托
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="data">数据对象</param>
            <returns>获取到的Vector3类型属性值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.CreateVector3Array``1(System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.GetVector3Value{``0})">
            <summary>
            使用数据对象的某一枚举属性创建对应的整型数组
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="getValueDelegate">获取属性值的委托</param>
            <returns>枚举型属性值的数组</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiVector3Field(System.String,UnityEngine.Vector3[],UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个MUVector3类型值的GUI界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">包含数值的数组</param>
            <returns>编辑后的新数值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SetVector3Value``1(System.Collections.Generic.List{``0},MUEditor.MUVector3,UnityEngine.Vector3[],System.Action{``0,UnityEngine.Vector3})">
            <summary>
            对数据对象设置指定的Vector3类型属性的属性值
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="newValue">需要设置的属性值</param>
            <param name="originValues">原始Vector3数值数组</param>
            <param name="setValueAction">设置属性值的Action</param>
        </member>
        <member name="T:MUEditor.MUGuiUtility.GetObjectValue`1">
            <summary>
            获取数据对象中的Object类型属性的委托
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="data">数据对象</param>
            <returns>获取到的Object类型属性值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.CreateObjectArray``1(System.Collections.Generic.List{``0},MUEditor.MUGuiUtility.GetObjectValue{``0})">
            <summary>
            使用数据对象的某一Object属性创建对应的整型数组
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="getValueDelegate">获取属性值的委托</param>
            <returns>枚举型属性值的数组</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.MultiObjectField(System.String,UnityEngine.Object[],System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>
            绘制编辑多个object类型值的GUI界面
            </summary>
            <param name="label">标签文本</param>
            <param name="values">包含数值的数组</param>
            <param name="objType">obj数据类型</param>
            <param name="allowSceneObjects">是否允许指定场景obj</param>
            <returns>编辑后的新数值</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.SetObjectValue``1(System.Collections.Generic.List{``0},UnityEngine.Object,System.Action{``0,UnityEngine.Object})">
            <summary>
            对数据对象设置指定的Object类型属性的属性值
            </summary>
            <typeparam name="DATATYPE">数据对象的类型</typeparam>
            <param name="dataList">数据对象列表</param>
            <param name="newValue">需要设置的属性值</param>
            <param name="setValueAction">设置属性值的Action</param>
        </member>
        <member name="P:MUEditor.MUGuiUtility.LeftBtnStyleFont11">
            <summary>
            左侧按钮样式（字号11）
            </summary>
        </member>
        <member name="P:MUEditor.MUGuiUtility.MidBtnStyleFont11">
            <summary>
            中间按钮样式（字号11）
            </summary>
        </member>
        <member name="P:MUEditor.MUGuiUtility.RightBtnStyleFont11">
            <summary>
            右侧按钮样式（字号11）
            </summary>
        </member>
        <member name="P:MUEditor.MUGuiUtility.LeftBtnStyleFont10">
            <summary>
            左侧按钮样式（字号10）
            </summary>
        </member>
        <member name="P:MUEditor.MUGuiUtility.MidBtnStyleFont10">
            <summary>
            中间按钮样式（字号10）
            </summary>
        </member>
        <member name="P:MUEditor.MUGuiUtility.RightBtnStyleFont10">
            <summary>
            右侧按钮样式（字号10）
            </summary>
        </member>
        <member name="M:MUEditor.MUGuiUtility.DrawHorizontalLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            绘制水平分割线
            </summary>
            <param name="thickness">线宽</param>
            <param name="paddingTop">上方间距</param>
            <param name="paddingBottom">下方间距</param>
            <param name="width">分割线长度，0为撑满整个布局</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.DrawVerticalLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            绘制垂直分割线
            </summary>
            <param name="thickness">线宽</param>
            <param name="paddingLeft">左侧间距</param>
            <param name="paddingRight">右侧间距</param>
            <param name="height">分割线长度，0为撑满整个布局</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.LoadEditorTexture(System.String)">
            <summary>
            加载编辑器纹理
            </summary>
            <param name="texturePath">纹理路径</param>
            <returns>加载得到的纹理</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.TempModifyLabelWidth(System.Single,System.Action)">
            <summary>
            临时修改标签的宽度
            </summary>
            <param name="newLabelWidth">新的标签宽度</param>
            <param name="guiAction">修改标签宽度之后的界面绘制操作</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.TempModifyPopupStyle(System.Nullable{System.Single},System.Nullable{System.Int32},System.Action)">
            <summary>
            临时修改下拉框的样式
            </summary>
            <param name="popHeight">下拉框的高度</param>
            <param name="fontSize">下拉框中文字的字号</param>
            <param name="guiAction">修改样式后的界面绘制操作</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.HorizonCenterAlign(System.Action,UnityEngine.GUILayoutOption[])">
            <summary>
            绘制水平居中的界面
            </summary>
            <param name="guiAction">界面绘制操作</param>
            <param name="options">界面绘制参数</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.VerticalCenterAlign(System.Action,UnityEngine.GUILayoutOption[])">
            <summary>
            绘制垂直居中的界面
            </summary>
            <param name="guiAction">界面绘制操作</param>
            <param name="options">界面绘制参数</param>
        </member>
        <member name="M:MUEditor.MUGuiUtility.DrawCirclePointButton">
            <summary>
            绘制 “⊙” 按钮
            </summary>
            <returns>按钮是否点击</returns>
        </member>
        <member name="M:MUEditor.MUGuiUtility.DrawCrossButton">
            <summary>
            绘制 “×” 按钮
            </summary>
            <returns>按钮是否点击</returns>
        </member>
        <member name="T:MUEditor.MUSelectionChangedEventArgs`1">
            <summary>
            弹出窗口选中项变更事件
            </summary>
            <typeparam name="T">数据的类型</typeparam>
        </member>
        <member name="P:MUEditor.MUSelectionChangedEventArgs`1.NewData">
            <summary>
            选新中的数据
            </summary>
        </member>
        <member name="M:MUEditor.MUSelectionChangedEventArgs`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="newData">新选中的数据</param>
        </member>
        <member name="T:MUEditor.MUSelectionGuiContent`1">
            <summary>
            用于从列表中选择一项的弹出窗口界面的实际GUI内容
            </summary>
            <typeparam name="T">列表中数据的类型</typeparam>
        </member>
        <member name="P:MUEditor.MUSelectionGuiContent`1.SelectedItem">
            <summary>
            当前被选中的项
            </summary>
        </member>
        <member name="E:MUEditor.MUSelectionGuiContent`1.SelectionChanged">
            <summary>
            选中项变更事件
            </summary>
        </member>
        <member name="P:MUEditor.MUSelectionGuiContent`1.Filter">
            <summary>
            过滤器
            </summary>
        </member>
        <member name="F:MUEditor.MUSelectionGuiContent`1.originItems">
            <summary>
            原始数据项
            </summary>
        </member>
        <member name="F:MUEditor.MUSelectionGuiContent`1.filteredItems">
            <summary>
            过滤后的数据项
            </summary>
        </member>
        <member name="F:MUEditor.MUSelectionGuiContent`1.filteredItemsProp">
            <summary>
            过滤后数据项对应的ReorderableList属性
            </summary>
        </member>
        <member name="F:MUEditor.MUSelectionGuiContent`1.scrollViewPosition">
            <summary>
            滚动窗口位置
            </summary>
        </member>
        <member name="M:MUEditor.MUSelectionGuiContent`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEditor.MUSelectionGuiContent`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造函数
            </summary>
            <param name="allData">包含所有数据的列表</param>
        </member>
        <member name="M:MUEditor.MUSelectionGuiContent`1.Initialize(System.Collections.Generic.List{`0})">
            <summary>
            初始化
            </summary>
            <param name="allData">包含所有数据的列表</param>
        </member>
        <member name="M:MUEditor.MUSelectionGuiContent`1.Initialize(System.Collections.Generic.List{`0},`0)">
            <summary>
            初始化
            </summary>
            <param name="allData">包含所有数据的列表</param>
            <param name="initData">初始选中的数据</param>
        </member>
        <member name="M:MUEditor.MUSelectionGuiContent`1.OnGUI">
            <summary>
            绘制界面
            </summary>
        </member>
        <member name="M:MUEditor.MUSelectionGuiContent`1.Destroy">
            <summary>
            销毁界面
            </summary>
        </member>
        <member name="T:MUEditor.MUSelectionWindow`1">
            <summary>
            用于从列表中选择一项的弹出窗口界面
            </summary>
            <typeparam name="T">列表中数据的类型</typeparam>
        </member>
        <member name="P:MUEditor.MUSelectionWindow`1.Content">
            <summary>
            窗口实际GUI内容
            </summary>
        </member>
        <member name="P:MUEditor.MUSelectionWindow`1.Width">
            <summary>
            窗口宽度
            不设置则使用默认值（400）
            </summary>
        </member>
        <member name="P:MUEditor.MUSelectionWindow`1.Height">
            <summary>
            窗口高度
            不设置则使用默认值（400）
            </summary>
        </member>
        <member name="M:MUEditor.MUSelectionWindow`1.GetWindowSize">
            <summary>
            获取窗口尺寸
            </summary>
            <returns>窗口尺寸</returns>
        </member>
        <member name="M:MUEditor.MUSelectionWindow`1.OnGUI(UnityEngine.Rect)">
            <summary>
            绘制窗口界面
            </summary>
            <param name="rect">窗口位置</param>
        </member>
        <member name="M:MUEditor.MUSelectionWindow`1.OnClose">
            <summary>
            响应窗口关闭
            </summary>
        </member>
        <member name="T:MUEditor.MUVector3">
            <summary>
            对Vector3类型的封装，主要用于属性区多选编辑
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelDataItem.SN">
            <summary>
            SN值
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelDataItem.name2valueDict">
            <summary>
            属性项键值对字典
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelDataItem.OwnerSheet">
            <summary>
            父级工作表
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelDataItem.S11N_FieldValues">
            <summary>
            具体属性项列表
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelDataItem.Initialize(MUEditor.Exceler.MUExcelSheet)">
            <summary>
            初始化数据结构,反序列化后调用
            </summary>
            <param name="excelSheet">父级工作表</param>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelDataItem.GetValue(System.String)">
            <summary>
            获取某项属性的值
            </summary>
            <param name="fieldName">属性名称</param>
            <returns>属性值,没找到返回null</returns>
        </member>
        <member name="T:MUEditor.Exceler.EFieldInfoType">
            <summary>
            所有表头字段类别
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelFieldInfo.SN_FIELD_NAME">
            <summary>
            SN字段的标识名称
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelFieldInfo.SN_COLUMN">
            <summary>
            SN在Excel文件中的列数
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelFieldInfo.ROW_COUNT">
            <summary>
            表头的总行数
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelFieldInfo.ROW_OF_NAME">
            <summary>
            Exce表格中属性名称所在的行数
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelFieldInfo.UseDomain">
            <summary>
            使用域
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelFieldInfo.DataType">
            <summary>
            属性的数据类型
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelFieldInfo.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelFieldInfo.Description">
            <summary>
            属性描述
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelFieldInfo.OwnerSheet">
            <summary>
            父级工作表
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelFieldInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="use">作用域</param>
            <param name="type">数据类型</param>
            <param name="name">属性名称</param>
            <param name="des">属性描述</param>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelFieldInfo.Initialize(MUEditor.Exceler.MUExcelSheet)">
            <summary>
            初始化数据结构,反序列化后调用
            </summary>
            <param name="excelSheet">父级工作表</param>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelFieldInfo.GetField(MUEditor.Exceler.EFieldInfoType)">
            <summary>
            根据类别,返回表头信息字段值
            </summary>
            <param name="fieldType">信息类别</param>
            <returns>对应字段值</returns>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelSheet.OwnerWorkbook">
            <summary>
            父级工作簿
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelSheet.name2fieldinfoDict">
            <summary>
            属性名称及对应属性信息字典
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelSheet.sn2dataDict">
            <summary>
            SN数据项字典
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelSheet.SheetName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelSheet.S11N_FieldList">
            <summary>
            表头信息列表,以列为单位
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelSheet.S11N_DataList">
            <summary>
            数据项列表,以行为单位
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelSheet.LoadSheetFromXml(System.String,System.String)">
            <summary>
            获取反序列化后的工作表
            </summary>
            <param name="xmlPath">xml文件路径</param>
            <param name="sheetName">工作表表名</param>
            <returns>读取后的工作表</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelSheet.SaveSheetToXml(System.String,System.String)">
            <summary>
            工作表序列化
            </summary>
            <param name="xmlPath">xml文件路径</param>
            <param name="excelPath">excel文件路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelSheet.Initialize(MUEditor.Exceler.MUExcelWorkbook)">
            <summary>
            初始化数据结构,反序列化后调用
            </summary>
            <param name="excelWorkbook">父级工作薄</param>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelSheet.GetAllFieldInfo">
            <summary>
            获得所有表头信息
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelSheet.GetAllDataItem">
            <summary>
            获得所有数据项
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelSheet.GetDataItem(System.String)">
            <summary>
            获得指定sn的数据项
            </summary>
            <param name="sn">sn值</param>
            <returns>对应数据项,没找到返回null</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelSheet.GetAllValueByColumnName(System.String)">
            <summary>
            获取属性名为指定值的整列数据
            </summary>
            <param name="fieldName">属性名</param>
            <returns>整列数据值</returns>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelUtility.E2X_METHOD_COMMAND">
            <summary>
            Excel2Xml转换方法指令
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelUtility.X2E_METHOD_COMMAND">
            <summary>
            Xml2Excel转换方法指令
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelUtility.excelerPath">
            <summary>
            Exceler程序路径
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelUtility.logFilePath">
            <summary>
            Exceler日志文件路径
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelUtility.LoadExcelSheet(System.String,System.String)">
            <summary>
            调用Exceler读取工作表
            </summary>
            <param name="excelPath">excel文件路径</param>
            <param name="sheetName">工作表名</param>
            <returns>读取后的工作表</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelUtility.LoadExcelWorkbook(System.String)">
            <summary>
            调用Exceler读取工作簿
            </summary>
            <param name="excelPath">excel文件路径</param>
            <returns>读取后的工作簿</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelUtility.SaveExcelSheet(MUEditor.Exceler.MUExcelSheet,System.String)">
            <summary>
            调用Exceler存储工作表
            </summary>
            <param name="worksheet">待存储工作表</param>
            <param name="excelPath">excel路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelUtility.SaveExcelWorkbook(MUEditor.Exceler.MUExcelWorkbook,System.String)">
            <summary>
            调用Exceler存储工作簿
            </summary>
            <param name="workbook">待存储工作簿</param>
            <param name="excelPath">excel路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelUtility.CallExceler(System.String,System.String,System.String,System.String)">
            <summary>
            调用Exceler进程并传递参数
            </summary>
            <param name="method">转换方式</param>
            <param name="excelPath">excel文件路径</param>
            <param name="xmlPath">xml文件路径</param>
            <param name="sheetName">子表名称</param>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelUtility.ReadLogToUnity">
            <summary>
            读取日志文件至Unity控制台
            </summary>
        </member>
        <member name="F:MUEditor.Exceler.MUExcelWorkbook.name2sheetDict">
            <summary>
            工作表对应表名字典
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelWorkbook.FilePath">
            <summary>
            对应Excel文件路径
            </summary>
        </member>
        <member name="P:MUEditor.Exceler.MUExcelWorkbook.S11N_WorkSheets">
            <summary>
            包含的工作表列表
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelWorkbook.LoadWorkbookFromXml(System.String)">
            <summary>
            反序列化工作薄
            </summary>
            <param name="xmlPath">xml文件路径</param>
            <returns>读取后的工作薄,失败返回null</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelWorkbook.SaveWorkbookToXml(System.String)">
            <summary>
            序列化工作薄
            </summary>
            <param name="xmlPath">xml文件路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelWorkbook.Initialize">
            <summary>
            初始化数据结构,反序列化后调用
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelWorkbook.GetAllSheets">
            <summary>
            获取所有工作表
            </summary>
        </member>
        <member name="M:MUEditor.Exceler.MUExcelWorkbook.GetSheet(System.String)">
            <summary>
            获得指定表名的工作表
            </summary>
            <param name="sheetName">待查找表名</param>
            <returns>查找到的表名,如没有找到返回null</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.DataFieldAttribute">
            <summary>
            数据字段特性，用于标记那些在Excel表中存在的数据字段
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.DataFieldAttribute.FieldName">
            <summary>
            在Excel表中对应的字段名
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.GetFieldName(System.Reflection.PropertyInfo)">
            <summary>
            获取一个属性对应在配置表中的字段名
            </summary>
            <param name="propInfo">属性信息</param>
            <returns>属性对应在配置表中的字段名</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.SetFieldValue(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            设置字段的值
            </summary>
            <param name="target">目标对象</param>
            <param name="propInfo">属性信息</param>
            <param name="valueText">值的文本</param>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.GetFieldValueText(System.Object)">
            <summary>
            获取字段数值对应的文本
            </summary>
            <param name="value">数值</param>
            <returns>数值对应的文本</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.InitDefaultFiledParser">
            <summary>
            初始化默认字段解析器
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.LoadCustomFieldParser">
            <summary>
            加载自定义字段解析器
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.DataFieldAttribute.GetFieldParser(System.Type)">
            <summary>
            获取对应的字段解析器
            </summary>
            <param name="fieldType">字段类型</param>
            <returns>对应的字段解析器</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.IDataset">
            <summary>
            场景编辑器数据集接口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.FileName">
            <summary>
            对应的配置文件名
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.FilePath">
            <summary>
            配置文件的路径
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.HasLoaded">
            <summary>
            是否已经从Excel中加载了数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.IsReadOnly">
            <summary>
            是否为只读数据集
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.LoadPriority">
            <summary>
            加载优先级
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.DataType">
            <summary>
            保存的数据的数据类型
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.DisplayName">
            <summary>
            在界面上的显示名称
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.DisplayPriority">
            <summary>
            在界面上的显示顺序
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.ShowInPanel">
            <summary>
            是否在数据列表面板中显示
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataset.Count">
            <summary>
            数据项的数量
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.Load">
            <summary>
            加载数据集
            </summary>
            <returns>加载的输出日志，如果正常加载则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.Save">
            <summary>
            保存数据集
            </summary>
            <returns>保存的输出日志，如果正常保存则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.GetAllData">
            <summary>
            获取数据集中的所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.GetData(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="sn">数据的SN</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.ChangeSN(MUEditor.SceneEditor.IData,System.Int32)">
            <summary>
            变更数据的SN
            </summary>
            <param name="data">需要变更的数据</param>
            <param name="newSN">新的SN</param>
            <returns>是否变更成功</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.ChangeSN(System.Int32,System.Int32)">
            <summary>
            变更数据的SN
            </summary>
            <param name="oldSN">旧SN</param>
            <param name="newSN">新SN</param>
            <returns>是否变更成功</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.Remove(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据的索引</param>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.RemoveAll">
            <summary>
            清空数据集中的所有数据
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.CanAdd">
            <summary>
            当前能否添加数据
            </summary>
            <returns>能否添加数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.AddNewData">
            <summary>
            添加一个新的数据
            </summary>
            <returns>新添加的数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.DuplicateData(MUEditor.SceneEditor.IData)">
            <summary>
            复制一个数据
            </summary>
            <param name="originData">原始数据</param>
            <returns>复制得到的数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataset.GetAllDataInDataListPanel">
            <summary>
            获取要在当前数据列表面板上显示的数据项
            </summary>
            <returns>要显示的数据项</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.SEDataset`1">
            <summary>
            场景编辑器数据集基类
            </summary>
            <typeparam name="DATATYPE">数据类型</typeparam>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.FileName">
            <summary>
            对应的配置文件名
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.TableName">
            <summary>
            对应的页签名称
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.FilePath">
            <summary>
            配置文件的路径
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.IsReadOnly">
            <summary>
            是否为只读数据集
            只读数据集在点击[全部保存]的时候不会被存盘
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.HasLoaded">
            <summary>
            是否已经从Excel中加载了数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.LoadPriority">
            <summary>
            加载优先级
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.DataType">
            <summary>
            保存的数据的数据类型
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.DisplayName">
            <summary>
            在界面上的显示名称
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.DisplayPriority">
            <summary>
            在界面上的显示顺序
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.ShowInPanel">
            <summary>
            是否在数据列表面板中显示
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.DataItems">
            <summary>
            数据集中的所有数据项
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.DataProperties">
            <summary>
            数据项的属性信息
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.Count">
            <summary>
            数据项的数量
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.Keys">
            <summary>
            所有索引
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.Values">
            <summary>
            所有数值
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.GetData(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="sn">数据的SN</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.GetDataAs(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="sn">数据的SN</param>
            <returns>获取到的数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="newData">新添加的数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.Remove(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据的索引</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.RemoveAll">
            <summary>
            清空数据集中的所有数据
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.ContainsKey(System.Int32)">
            <summary>
            是否包含索引
            </summary>
            <param name="index">索引</param>
            <returns>是否包含索引</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.ChangeSN(`0,System.Int32)">
            <summary>
            变更数据的SN
            </summary>
            <param name="data">需要变更的数据</param>
            <param name="newSN">新的SN</param>
            <returns>是否变更成功</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.ChangeSN(System.Int32,System.Int32)">
            <summary>
            变更数据的SN
            </summary>
            <param name="oldSN">旧SN</param>
            <param name="newSN">新SN</param>
            <returns>是否变更成功</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.GetNewSN">
            <summary>
            获取一个新的未被使用的SN
            </summary>
            <returns>新的SN</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.GetNewSnFillGap">
            <summary>
            以 [全表填充空当] 的方式获取一个新的SN
            </summary>
            <returns>新的SN</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.GetNewSnInCurrentScene">
            <summary>
            以 [当前场景填充空当] 的方式获取一个新的SN
            </summary>
            <returns>新的SN</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.CanAdd">
            <summary>
            当前能否添加数据
            </summary>
            <returns>能否添加数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.AddNewData">
            <summary>
            添加一个新的数据
            </summary>
            <returns>新添加的数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.DuplicateData(`0)">
            <summary>
            复制一个数据
            </summary>
            <param name="originData">原始数据</param>
            <returns>复制得到的数据</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.GetAllDataInDataListPanel">
            <summary>
            获取要在当前数据列表面板上显示的数据项
            </summary>
            <returns>要显示的数据项</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.Save">
            <summary>
            将数据保存到配置表
            </summary>
            <returns>输出信息，正常保存则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.OnSave">
            <summary>
            保存数据集
            </summary>
            <returns>输出信息，正常保存则为空</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.SEDataset`1.ExcelColumnInfo">
            <summary>
            Excel表中的列信息
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.ExcelColumnInfo.Name">
            <summary>
            列名称
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.ExcelColumnInfo.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.ExcelColumnInfo.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataset`1.ExcelColumnInfo.UseDomain">
            <summary>
            使用域（客户端/服务器）
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.ExcelColumnInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEDataset`1.ExcelFieldList">
            <summary>
            表头信息
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.LoadByExceler">
            <summary>
            通过Exceler读取数据集
            </summary>
            <returns>输出信息,正常则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.CreateSEDataItem(MUEditor.Exceler.MUExcelDataItem)">
            <summary>
            使用ExcelDataItem创建SEDataItem
            </summary>
            <param name="excelDataItem">ExcelDataItem对象</param>
            <returns>对应SEDataItem对象</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.SaveByExceler">
            <summary>
            通过Exceler存储数据至excel
            </summary>
            <returns>输出信息,正常则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataset`1.CreateExcelDataItem(`0)">
            <summary>
            使用SEDataItem创建ExcelDatItem
            </summary>
            <param name="seDataItem">SEDataItem对象</param>
            <returns>对应ExcelDataItem</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.SEDatasetAttribute">
            <summary>
            用于标记场景编辑器数据集的特性
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SESceneElementDataset`1">
            <summary>
            场景元素数据的数据集基类
            </summary>
            <typeparam name="DATATYPE">数据类型</typeparam>
        </member>
        <member name="T:MUEditor.SceneEditor.IData">
            <summary>
            场景编辑器数据的接口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IData.SN">
            <summary>
            SN号
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IData.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IData.UnhandledFields">
            <summary>
            未处理的字段
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.IData.Clone(MUEditor.SceneEditor.IData)">
            <summary>
            从源数据中复制数据
            </summary>
            <param name="source">源数据</param>
        </member>
        <member name="T:MUEditor.SceneEditor.ISceneData">
            <summary>
            场景数据接口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ISceneData.AssetName">
            <summary>
            场景对应的Asset名称
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneData.GetHeroActorEntity">
            <summary>
            获取对应的主角演员实体
            </summary>
            <returns>对应的主角演员实体</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.ISceneElementData">
            <summary>
            场景元素数据的接口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ISceneElementData.SceneSN">
            <summary>
            所在场景的SN
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IVisualData.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IVisualData.HasBuildControlView">
            <summary>
            是否已经创建了ControlView
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.IVisualData.DisposeControlView">
            <summary>
            释放控制视图
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEData">
            <summary>
            配置表中的数据项的基类
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEData.SN">
            <summary>
            SN
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEData.UnhandledFields">
            <summary>
            未处理的字段
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEData.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="E:MUEditor.SceneEditor.SEData.PropertyChanged">
            <summary>
            属性变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEData.Clone(MUEditor.SceneEditor.IData)">
            <summary>
            从源数据中复制数据
            </summary>
            <param name="source">源数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEData.CloneList``1(System.Collections.Generic.List{``0})">
            <summary>
            复制列表
            </summary>
            <typeparam name="T">数值的类型</typeparam>
            <param name="sourceList">源列表</param>
            <returns>复制得到的新列表</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEData.RaisePropertyChanged(System.String)">
            <summary>
            发起属性变更事件
            </summary>
            <param name="propertyName">产生变更的属性名</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEData.OnPropertyChanged(System.String)">
            <summary>
            响应属性变更，可由子类覆写
            </summary>
            <param name="propertyName">产生变更的属性名称</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEData.SetField``1(``0@,``0,System.String)">
            <summary>
            设置字段的值
            </summary>
            <typeparam name="T">字段类型</typeparam>
            <param name="field">字段的引用</param>
            <param name="newValue">新的字段值</param>
            <param name="propertyName">属性名称</param>
            <returns>是否实际更改了字段的值</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEData.SetFieldForRotationVec(UnityEngine.Vector3@,UnityEngine.Vector3,System.String)">
            <summary>
            设置字段的值（专用于表示旋转的Vector3类型字段）
            </summary>
            <param name="field">字段的引用</param>
            <param name="newValue">新的字段值</param>
            <param name="propertyName">属性名称</param>
            <returns>是否实际更改了字段的值</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.SESceneElementData`1">
            <summary>
            场景内元素数据的基类
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEVisualData`1">
            <summary>
            可视数据类，具有控制视图
            </summary>
            <typeparam name="CONTROLVIEW">控制视图类型</typeparam>
        </member>
        <member name="P:MUEditor.SceneEditor.SEVisualData`1.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEVisualData`1.HasBuildControlView">
            <summary>
            是否创建了CV
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEVisualData`1.OnCreateControlView">
            <summary>
            创建控制视图，可由子类覆写
            </summary>
            <returns>控制视图</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEVisualData`1.DisposeControlView">
            <summary>
            释放持有的CV
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.CustomFieldParserAttribute">
            <summary>
            自定义字段解析器的特性标签
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.BaseFieldParser">
            <summary>
            字段解析器
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.BaseFieldParser.FieldType">
            <summary>
            可以解析的字段类型
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.BaseFieldParser.CanHandle(System.Type)">
            <summary>
            是否可以处理字段
            </summary>
            <param name="fieldType">字段的类型</param>
            <returns>是否可以处理</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.BaseFieldParser.ParseFromText(System.String)">
            <summary>
            从文本中解析字段的数值
            </summary>
            <param name="valueText">数值文本</param>
            <returns>解析得到的数值</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.BaseFieldParser.ConvertToText(System.Object)">
            <summary>
            将数值转换成对应的文本
            </summary>
            <param name="value">数值</param>
            <returns>数值对应的文本</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.NotifyChangeAttribute">
            <summary>
            通知变更特性
            使用该特性标记的属性会在产生变更时发出属性变更通知（具体时间为每次Update）
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.NotifyChangeAttribute.UseCustomCompareor">
            <summary>
            是否使用自定义比较器
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.NotifyChangeAttribute.CheckIsEqual(System.Object,System.Object)">
            <summary>
            检测两个属性值是否相等
            </summary>
            <param name="propA">属性A</param>
            <param name="propB">属性B</param>
            <returns></returns>
        </member>
        <member name="T:MUEditor.SceneEditor.NotifyChangeRotationAttribute">
            <summary>
            供Rotation属性使用的变更通知特性
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.NotifyPropertyObserver">
            <summary>
            属性变更观察者脚本
            负责在属性（手动修改或撤销重做）产生变更时触发属性变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.NotifyPropertyObserver.#ctor(MUEngine.Common.IMUNotifyPropertyChanged)">
            <summary>
            构造函数
            </summary>
            <param name="target">观察对象</param>
        </member>
        <member name="M:MUEditor.SceneEditor.NotifyPropertyObserver.Initialize(MUEngine.Common.IMUNotifyPropertyChanged)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.NotifyPropertyObserver.Clear">
            <summary>
            清空之前的观察目标
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.NotifyPropertyObserver.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.NotifyPropertyObserver.TargetPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            处理观察目标的属性变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.NotifyPropertyObserver.GetValue(System.ComponentModel.PropertyDescriptor)">
            <summary>
            获取属性值
            </summary>
            <param name="propDesc">属性描述</param>
            <returns>属性值</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.ISEControlView">
            <summary>
            MUEditor中使用的控制视图接口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ISEControlView.gameObject">
            <summary>
            控制视图对应的游戏对象
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ISEControlView.IsValid">
            <summary>
            控制视图还是否有效
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISEControlView.LateUpdate">
            <summary>
            对应MonoBehaviour的LateUpdate时执行的每帧更新操作
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISEControlView.OnDestroy">
            <summary>
            对应MonoBehaviour的OnDestroy时执行的销毁操作
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneElementControlView">
            <summary>
            所有场景元素数据的控制视图基类
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementControlView.UpdateIsEnabled">
            <summary>
            更新IsEnabled属性
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementControlView.OnGetIsInCurrentScene">
            <summary>
            获取源数据是否位于当前场景内
            </summary>
            <returns>源数据是否位于当前场景内</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.SECameraControl">
            <summary>
            场景编辑器中使用的摄像机控制器
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.ELoadingStatus">
            <summary>
            加载状态
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEControlView">
            <summary>
            MUEditor中使用的所有控制视图的基类
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.gameObject">
            <summary>
            控制视图对应的游戏对象
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.transform">
            <summary>
            控制视图对应的Transform对象
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.SourceData">
            <summary>
            源数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.IsEnabled">
            <summary>
            控制视图是否可用
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.LoadingStatus">
            <summary>
            当前加载状态
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEControlView.MAX_WAIT_TIME">
            <summary>
            最大等待时间
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEControlView.curLoadingTime">
            <summary>
            当前加载时间
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.LoadResource">
            <summary>
            加载相关资源
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.Initialize(MUEditor.SceneEditor.IData)">
            <summary>
            由数据源重建ControlView
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.Build(MUEditor.SceneEditor.IData)">
            <summary>
            初始化
            </summary>
            <param name="source">源数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.ChangeSource(MUEditor.SceneEditor.IData)">
            <summary>
            从新的源数据重建
            </summary>
            <param name="source">源数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.Dispose">
            <summary>
            释放该ControlView
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.SelectGameObject(System.Boolean)">
            <summary>
            选中对应的游戏对象
            </summary>
            <param name="isDoubleClick">是否为双击</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.ForceRefresh">
            <summary>
            强制执行刷新
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.GetSelectableGameObjects">
            <summary>
            获取可以被选中的游戏对象
            </summary>
            <returns>可以被选中的游戏对象列表</returns>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.CircleMaterial">
            <summary>
            环形材质
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.RectangleMaterial">
            <summary>
            矩形材质
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.ReloadActorEntityModel(MUEngine.MUActorEntity,System.String,System.Action)">
            <summary>
            重新加载演员实体的模型
            </summary>
            <param name="actorEntity">需要重新加载模型的演员实体</param>
            <param name="assetName">模型的资源名</param>
            <param name="loadedCallback">加载完成回调</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.ReloadActorEntityModel(MUEngine.MUActorEntity,System.String,UnityEngine.Transform,System.Action)">
            <summary>
            重新加载演员实体的模型
            </summary>
            <param name="actorEntity">需要重新加载模型的演员实体</param>
            <param name="assetName">模型的资源名</param>
            <param name="actorParent">演员的根节点</param>
            <param name="loadedCallback">加载完成回调</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.CreateLocationPlane">
            <summary>
            创建定位平面
            </summary>
            <returns>定位平面的游戏对象</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnInitialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnLoadResource">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnSourceChanged">
            <summary>
            响应源数据变更
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnEnableChanged">
            <summary>
            响应可用性变更
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnDirtyRefresh">
            <summary>
            响应脏绘刷新
            该方法仅在关注的属性有变化时才会被调用一次
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnUpdateSourceData">
            <summary>
            更新源数据
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnEveryFrameRefresh">
            <summary>
            响应每帧刷新
            该方法每帧都会被调用
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnSelectGameObject(System.Boolean)">
            <summary>
            响应选中对应的游戏对象
            </summary>
            <param name="isDoubleClick">是否为双击</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnGetSelectableGameObjects">
            <summary>
            响应获取可以被选中的游戏对象
            </summary>
            <returns>可以被选中的游戏对象</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnDestroy">
            <summary>
            对应MonoBehaviour的OnDestroy时执行的销毁操作
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnCurrentSceneChanged">
            <summary>
            响应当前场景变更
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnCurrentElementChanged">
            <summary>
            响应当前场景元素变更
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.OnCurrentElementTypeChanged">
            <summary>
            响应当前编辑的元素类型变更
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.CurrentElementChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前场景元素变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.CurrentElementTypeChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前编辑的元素类型变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.CurrentSceneChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前场景变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.SourceDataPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            处理源数据属性变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.DeselectGameObject(UnityEngine.GameObject)">
            <summary>
            取消游戏对象的选中
            </summary>
            <param name="gObj">需要取消选中的游戏对象</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.RegistAttentionProperty(System.String)">
            <summary>
            注册关注的属性
            </summary>
            <param name="propertyName">关注的属性名称</param>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlView.MUEditor#SceneEditor#ISEControlView#IsValid">
            <summary>
            控制视图还是否有效
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.Update">
            <summary>
            每帧刷新
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlView.MUEditor#SceneEditor#ISEControlView#LateUpdate">
            <summary>
            对应MonoBehaviour的LateUpdate时执行的每帧更新操作
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEControlViewMarker">
            <summary>
            控制视图标识器
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlViewMarker.RelateCtrlView">
            <summary>
            对应的控制视图
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewMarker.AddMarker(UnityEngine.GameObject,MUEditor.SceneEditor.ISEControlView)">
            <summary>
            向指定游戏对象添加标识器
            </summary>
            <param name="targetGameObj">目标游戏对象</param>
            <param name="relateCtrlView">游戏对象对应的控制器</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SEControlViewRoot">
            <summary>
            MUEditor中所有控制视图的根节点
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEControlViewRoot.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEControlViewRoot.MAX_NUM_OF_REQUEST">
            <summary>
            同时加载资源数量的上限
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEControlViewRoot.loadingRequests">
            <summary>
            待加载资源的CV队列
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEControlViewRoot.loadingTasks">
            <summary>
            正在加载的CV队列
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEControlViewRoot.allCtrlView">
            <summary>
            所有已注册的控制视图
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEControlViewRoot.controlViewPool">
            <summary>
            ControlView缓存池
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.LoadControlViewFirst(MUEditor.SceneEditor.SEControlView)">
            <summary>
            优先加载指定视图的资源
            </summary>
            <param name="selectedCV">指定视图</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.GetControlView``1(MUEditor.SceneEditor.IData)">
            <summary>
            从缓存池获取一个ControlView,若没有,则创建新实例
            </summary>
            <param name="source">数据源</param>
            <returns>获取的ControlView</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.DisposeControlView(MUEditor.SceneEditor.SEControlView)">
            <summary>
            释放一个ControlView并放入缓存池
            </summary>
            <param name="controlView">目标ControlView</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.RegisterControlView(MUEditor.SceneEditor.ISEControlView)">
            <summary>
            注册控制视图
            </summary>
            <param name="ctrlView">控制视图</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.UnregisterControlView(MUEditor.SceneEditor.ISEControlView)">
            <summary>
            取消控制视图的注册
            </summary>
            <param name="ctrlView"></param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.AssignLoadingTasks">
            <summary>
            分配加载任务
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.AddNewLoadRequest(MUEditor.SceneEditor.SEControlView)">
            <summary>
            添加新的加载请求
            </summary>
            <param name="controlView">待加载CV</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.LateUpdate">
            <summary>
            每帧更新
            这里不使用Update，以保证该方法在NotifyPropertyObserver等属性变更相关脚本的更新后执行
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEControlViewRoot.OnDestroy">
            <summary>
            销毁控制视图
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEDisplayConfig">
            <summary>
            场景编辑器显示配置
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDisplayConfig.IsVisible">
            <summary>
            是否可见
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDisplayConfig.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDisplayConfig.DataType">
            <summary>
            对应的数据类型
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDisplayConfig.Priority">
            <summary>
            显示排序
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDisplayConfig.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="sourceDataType">源数据的类型</param>
            <param name="name">显示名称</param>
            <param name="priority">显示排序</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SEHeadText">
            <summary>
            供场景编辑器的控制视图使用的头顶文本
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEHeadText.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEHeadText.Position">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEHeadText.TextColor">
            <summary>
            文本颜色
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEHeadText.TargetCamera">
            <summary>
            目标摄像机
            如果为空则使用Scene窗口的摄像机
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEHeadText.Create(UnityEngine.GameObject,System.String)">
            <summary>
            创建一个头顶文本
            </summary>
            <param name="parentGameObj">父级游戏对象</param>
            <param name="text">文本</param>
            <returns>新创建的头顶文本</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEHeadText.Initialize(System.String)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEVisualDataAttribute">
            <summary>
            用于标识场景中可见数据的特性标签
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEVisualDataAttribute.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEVisualDataAttribute.Priority">
            <summary>
            在菜单中显示时的排序位置
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEVisualDataAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示名称</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEVisualDataAttribute.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示名称</param>
            <param name="priority">在菜单中显示时的排序位置</param>
        </member>
        <member name="T:MUEditor.SceneEditor.ConfigInspectorWindow">
            <summary>
            配置表属性区窗口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ConfigInspectorWindow.Instance">
            <summary>
            窗口实例
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ConfigInspectorWindow.GuiPanel">
            <summary>
            实际的界面面板
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ConfigInspectorWindow.Open">
            <summary>
            打开窗口
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ConfigInspectorWindow.SelectData(MUEditor.SceneEditor.IData)">
            <summary>
            选中场景配置表数据
            </summary>
            <param name="selectedData">被选中的数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.ConfigInspectorWindow.SelectDatas(System.Collections.Generic.IReadOnlyList{MUEditor.SceneEditor.IData})">
            <summary>
            选中场景元素配置表数据
            </summary>
            <param name="selectedDatas">被选中的数据</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneConfigInspectorWindow">
            <summary>
            场景配置表属性区窗口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneConfigInspectorWindow.Instance">
            <summary>
            窗口实例
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneConfigInspectorWindow.GuiPanel">
            <summary>
            实际的界面面板
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneConfigInspectorWindow.Open">
            <summary>
            打开窗口
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneConfigInspectorWindow.SelectData(MUEditor.SceneEditor.IData)">
            <summary>
            选中场景配置表数据
            </summary>
            <param name="selectedData">被选中的数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneConfigInspectorWindow.SelectDatas(System.Collections.Generic.IReadOnlyList{MUEditor.SceneEditor.IData})">
            <summary>
            选中场景元素配置表数据
            </summary>
            <param name="selectedDatas">被选中的数据</param>
        </member>
        <member name="T:MUEditor.SceneEditor.IDataListPanel">
            <summary>
            数据列表面板接口
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.IDataListPanel.Dataset">
            <summary>
            对应的数据集
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataListPanel.Rebuild">
            <summary>
            重新构建
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.IDataListPanel.OnGUI(UnityEngine.Rect)">
            <summary>
            绘制界面
            </summary>
            <param name="rect">界面显示区域</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneElementDataListPanel">
            <summary>
            场景内元素的数据列表面板
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.DeselectAll">
            <summary>
            取消所有对象的选中
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.OnMouseClicked(System.Boolean)">
            <summary>
            响应鼠标点击事件
            </summary>
            <param name="isDoubleClick">是否双击</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.RefreshTreeViewSelection">
            <summary>
            刷新视图中的选中项
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.OnShowDeleteDataDialog">
            <summary>
            弹出确认删除对话框
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.OnCurrentDataDeleted">
            <summary>
            响应当前数据被删除
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.CurrentSceneChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前编辑的场景变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.CurrentElementTypeChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前编辑的元素类型变更事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.CurrentElementChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前选中的场景元素变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneElementDataListPanel.DisposeAllControlViewInPanel">
            <summary>
            释放所有Panel中数据的ControlView
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneListPanel">
            <summary>
            场景列表面板
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneListPanel.SelectedData">
            <summary>
            被选中数据项
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SceneListPanel.lastSelectedData">
            <summary>
            记录上一次选中的数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneListPanel.DataTreeView">
            <summary>
            树形视图
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.RefreshTreeViewSelection">
            <summary>
            刷新视图中的选中项
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.SelectInsepector">
            <summary>
            选中配置数据
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.OnShowDeleteDataDialog">
            <summary>
            弹出确认删除对话框
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.DuplicateButtonClickedHandler">
            <summary>
            处理[复制]按钮点击事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.DeleteButtonClickedHandler">
            <summary>
            处理[删除]按钮点击事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.OnCurrentDataDeleted">
            <summary>
            响应当前数据被删除
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.CurrentSceneChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前选中的场景变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.OnSceneLoadedCallback(System.Object,MUEditor.SceneEditor.SceneLoadEventArgs)">
            <summary>
            场景资源读取回调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneListPanel.OnSelectionChanged(System.Object,MUEditor.SceneEditor.MouseClickedEventArgs)">
            <summary>
            处理场景列表面板的选中项变更事件
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEDataListPanel">
            <summary>
            数据列表面板
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataListPanel.Dataset">
            <summary>
            数据集
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataListPanel.FilteredDataList">
            <summary>
            过滤后的数据列表
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataListPanel.SelectedDataList">
            <summary>
            当前选中的数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEDataListPanel.DataTreeView">
            <summary>
            树形视图
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEDataListPanel.isSelectionDirty">
            <summary>
            是否需要刷新选中项
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEDataListPanel.selectingDataBySelf">
            <summary>
            用于判断选中项变化是否是DataTreeView自己发起的
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEDataListPanel.searchFieldBar">
            <summary>
            搜索框
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.Rebuild">
            <summary>
            重新构建
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.RebuildDataTreeView">
            <summary>
            重新构建数据表对应的TreeView
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.RefreshTreeViewSelection">
            <summary>
            刷新视图中的选中项
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.ResetDataSource">
            <summary>
            重置数据源
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.RefreshFilteredData">
            <summary>
            刷新列表中的数据
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.OnGUI(UnityEngine.Rect)">
            <summary>
            绘制界面
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.OnSelectCallback(System.Object,MUEditor.SceneEditor.MouseClickedEventArgs)">
            <summary>
            选中列表中元素回调
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.OnMouseClicked(System.Boolean)">
            <summary>
            响应鼠标点击
            </summary>
            <param name="isDoubleClick">是否为双击</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.SelectInsepector">
            <summary>
            选中配置数据
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.OnShowDeleteDataDialog">
            <summary>
            弹出确认删除对话框
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.OnSave">
            <summary>
            保存数据集
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.AddButtonClickedHandler">
            <summary>
            处理[添加]按钮点击事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.DuplicateButtonClickedHandler">
            <summary>
            处理[复制]按钮点击事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.DeleteButtonClickedHandler">
            <summary>
            处理[删除]按钮点击事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEDataListPanel.OnCurrentDataDeleted">
            <summary>
            响应当前数据删除
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneLoadEventArgs">
            <summary>
            场景资源读取事件参数
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneLoadEventArgs.SceneSN">
            <summary>
            场景SN
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SESceneTreeView">
            <summary>
            场景属性树形视图
            </summary>
        </member>
        <member name="E:MUEditor.SceneEditor.SESceneTreeView.SceneLoaded">
            <summary>
            场景资源加载事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SESceneTreeView.CanMultiSelect(UnityEditor.IMGUI.Controls.TreeViewItem)">
            <summary>
            Treeview能否被多选
            </summary>
            <param name="item">对应TreeView</param>
            <returns>是否可被多选</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.MouseClickedEventArgs">
            <summary>
            鼠标点击事件参数
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.MouseClickedEventArgs.isDoubleClick">
            <summary>
            是否双击
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SETreeView">
            <summary>
            场景编辑器使用的树形视图
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SETreeView.DataList">
            <summary>
            包含的数据列表
            </summary>
        </member>
        <member name="E:MUEditor.SceneEditor.SETreeView.OnSelectionChanged">
            <summary>
            选择项变化事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SETreeView.Rebuild(System.Collections.Generic.List{MUEditor.SceneEditor.IData})">
            <summary>
            根据源数据重建视图
            </summary>
            <param name="sourceData">源数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SETreeView.DeselectAll">
            <summary>
            取消所有选中
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SETreeView.SelectionChanged(System.Collections.Generic.IList{System.Int32})">
            <summary>
            选择项变化时调用的方法
            </summary>
            <param name="selectedIds">选中的所有ID</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SETreeView.DoubleClickedItem(System.Int32)">
            <summary>
            双击某元素时调用的方法
            </summary>
            <param name="id">元素的ID</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SETreeViewItem">
            <summary>
            场景编辑器使用的视图元素
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SETreeViewItem.SourceData">
            <summary>
            对应的源数据
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SETreeViewItem.#ctor(MUEditor.SceneEditor.IData)">
            <summary>
            构造函数
            </summary>
            <param name="inSourceData">对应的源数据</param>
        </member>
        <member name="P:MUEditor.SceneEditor.ISEInspector.LabelWidth">
            <summary>
            左侧文本所占宽度
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISEInspector.OnGUI">
            <summary>
            绘制界面
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISEInspector.Initialize(System.Collections.Generic.IReadOnlyList{MUEditor.SceneEditor.IData})">
            <summary>
            数据集初始化
            </summary>
            <param name="targets">需要处理的数据集</param>
        </member>
        <member name="M:MUEditor.SceneEditor.ISEInspector.QuickMoveTarget">
            <summary>
            快速移动目标
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEInspector`1">
            <summary>
            场景编辑器中使用的Inspector的泛型基类
            </summary>
            <typeparam name="DATATYPE">处理的数据的类型</typeparam>
        </member>
        <member name="P:MUEditor.SceneEditor.SEInspector`1.Targets">
            <summary>
            目标数据集
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEInspector`1.Target">
            <summary>
            单选状态时的目标数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEInspector`1.LabelWidth">
            <summary>
            左侧文本所占宽度
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspector`1.Initialize(System.Collections.Generic.IReadOnlyList{MUEditor.SceneEditor.IData})">
            <summary>
            初始化
            </summary>
            <param name="targets">源数据集</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspector`1.OnInitialize">
            <summary>
            初始化，由子类覆写，会在刚设置完Target时被调用
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspector`1.OnGUI">
            <summary>
            绘制界面
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEInspectorAttribute">
            <summary>
            标记场景编辑器使用的Inspector的特性标签
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEInspectorAttribute.DateType">
            <summary>
            处理的数据的类型
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspectorAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="dataType">处理的数据的类型</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SEInspectorPanel">
            <summary>
            场景编辑器的属性面板
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEInspectorPanel.CurrentData">
            <summary>
            当前正在编辑的数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEInspectorPanel.CurrentInspector">
            <summary>
            当前使用的属性编辑器
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEInspectorPanel.allSEInspector">
            <summary>
            所有属性编辑器
            Key:处理的数据的类型； Value:对应的属性编辑器
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspectorPanel.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspectorPanel.OnGUI">
            <summary>
            绘制界面
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspectorPanel.SelectSEData(MUEditor.SceneEditor.IData,MUEditor.SceneEditor.SEInspectorPanel.SEInspectorTYPE)">
            <summary>
            选中场景编辑器数据
            </summary>
            <param name="selectedData">选中的数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspectorPanel.SelectSEDatas(System.Collections.Generic.IReadOnlyList{MUEditor.SceneEditor.IData},MUEditor.SceneEditor.SEInspectorPanel.SEInspectorTYPE)">
            <summary>
            选中多个场景编辑器数据
            </summary>
            <param name="selectedDatas">选中的数据集</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspectorPanel.CurrentElementChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前场景元素变更事件
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEInspectorPanel.CurrentSceneChangedHandler(System.Object,System.EventArgs)">
            <summary>
            处理当前场景变更事件
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SelectDataGUIContent`1">
            <summary>
            用于选择数据的GUI界面内容
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SelectDataGUIContent`1.SelectedItem">
            <summary>
            当前被选中的项
            </summary>
        </member>
        <member name="E:MUEditor.SceneEditor.SelectDataGUIContent`1.SelectionChanged">
            <summary>
            选中项变更事件
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SelectDataGUIContent`1.FilteredItems">
            <summary>
            过滤后的数据项
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SelectDataGUIContent`1.originItems">
            <summary>
            原始数据项
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SelectDataGUIContent`1.OriginItemCount">
            <summary>
            原始数据项数量
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SelectDataGUIContent`1.sourceFilter">
            <summary>
            源数据显示过滤器
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SelectDataGUIContent`1.Filter">
            <summary>
            过滤器
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SelectDataGUIContent`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SelectDataGUIContent`1.#ctor(MUEditor.SceneEditor.SEGuiUtility.DisplayDataFilterDelegate{`0})">
            <summary>
            构造函数
            </summary>
            <param name="filter">源数据过滤器</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SelectDataGUIContent`1.SetInitData(`0)">
            <summary>
            设置初始选中的数据
            </summary>
            <param name="initData">初始选中的数据</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SelectDataGUIContent`1.OnGetOriginItems">
            <summary>
            获取原始数据列表
            </summary>
            <returns>原始数据列表</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.SelectDataPopupWindow`1">
            <summary>
            可以选择数据的下拉弹出窗口基类
            </summary>
            <typeparam name="DATATYPE">数据类型</typeparam>
        </member>
        <member name="P:MUEditor.SceneEditor.SelectDataPopupWindow`1.Width">
            <summary>
            窗口宽度
            不设置则使用默认值（400）
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SelectDataPopupWindow`1.Height">
            <summary>
            窗口高度
            不设置则使用默认值（400）
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SelectDataPopupWindow`1.sourceFilter">
            <summary>
            源数据显示过滤器
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SelectDataPopupWindow`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SelectDataPopupWindow`1.#ctor(MUEditor.SceneEditor.SEGuiUtility.DisplayDataFilterDelegate{`0})">
            <summary>
            构造函数
            </summary>
            <param name="filter">源数据过滤器</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SelectDataWindow`1">
            <summary>
            可以选择数据的窗口
            </summary>
            <typeparam name="DATATYPE">数据类型</typeparam>
        </member>
        <member name="E:MUEditor.SceneEditor.SelectDataWindow`1.OKButtonClicked">
            <summary>
            确定按钮点击事件
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneEditorWindow">
            <summary>
            场景编辑器窗口
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SceneEditorWindow.SESceneAssetPath">
            <summary>
            场景编辑器专用场景的资源路径
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneEditorWindow.Instance">
            <summary>
            当前场景编辑器窗口实例
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneEditorWindow.Open">
            <summary>
            打开场景编辑器
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneEditorWindow.StartIconContent">
            <summary>
            启动按钮
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SceneEditorWindow.isStartIconEnable">
            <summary>
            启动按钮是否可用
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneEditorWindow.TheMenuBar">
            <summary>
            菜单栏
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SceneEditorWindow.sceneListPanel">
            <summary>
            场景列表面板
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SceneEditorWindow.allDatasets">
            <summary>
            所有数据集
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SceneEditorWindow.allSceneElementDataset">
            <summary>
            所有场景元素数据集
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneEditorWindow.SceneElementsListPanel">
            <summary>
            场景元素列表面板
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneEditorWindow.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneEditorWindow.InitializeMenuBar">
            <summary>
            初始化菜单栏
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneEditorWindow.InitializeDataListPanel">
            <summary>
            初始化数据列表面板
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SceneEditorWindow.OpenUnityPreferenceWindow">
            <summary>
            打开Unity的偏好设置窗口
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEGuiUtility">
            <summary>
            场景编辑器GUI帮助类
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEGuiUtility.SelectDataWindowSelectionChanged`1">
            <summary>
            选择数据弹出窗口的选中项变更委托
            </summary>
            <typeparam name="DATATYPE">数据项类型</typeparam>
            <param name="selectedData">被选中的数据项</param>
        </member>
        <member name="T:MUEditor.SceneEditor.SEGuiUtility.DisplayDataFilterDelegate`1">
            <summary>
            显示数据过滤代理
            </summary>
            <typeparam name="DATATYPE">数据类型</typeparam>
            <param name="data">需要判断能否显示的数据</param>
            <returns>数据能否显示</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEGuiUtility.SelectDataButton``1(System.String,UnityEngine.Rect@,System.Int32,MUEditor.SceneEditor.SEGuiUtility.SelectDataWindowSelectionChanged{``0})">
            <summary>
            绘制选择数据项的按钮
            </summary>
            <typeparam name="DATATYPE">数据项类型</typeparam>
            <param name="label">左侧标签文本</param>
            <param name="activatorRect">弹出窗口的位置</param>
            <param name="dataSN">数据的SN</param>
            <param name="callback">选中项切换的回调</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEGuiUtility.SelectDataInSceneButton``1(System.String,UnityEngine.Rect@,System.Int32,System.Int32,MUEditor.SceneEditor.SEGuiUtility.SelectDataWindowSelectionChanged{``0})">
            <summary>
            绘制在指定场景中选择数据项的按钮
            </summary>
            <typeparam name="DATATYPE">数据项类型</typeparam>
            <param name="label">左侧标签文本</param>
            <param name="activatorRect">弹出窗口的位置</param>
            <param name="dataSN">数据的SN</param>
            <param name="sceneSN">所在场景的SN</param>
            <param name="callback">选中项切换的回调</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEGuiUtility.MultiSelectDataButton``1(System.String,UnityEngine.Rect@,System.Int32[],MUEditor.SceneEditor.SEGuiUtility.SelectDataWindowSelectionChanged{``0})">
            <summary>
            绘制选择数据项的按钮
            </summary>
            <typeparam name="DATATYPE">数据项类型</typeparam>
            <param name="label">左侧标签文本</param>
            <param name="activatorRect">弹出窗口的位置</param>
            <param name="dataSNs">数据的SN</param>
            <param name="callback">选中项切换的回调</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEGuiUtility.MultiSelectDataInSceneButton``1(System.String,UnityEngine.Rect@,System.Int32[],System.Int32,MUEditor.SceneEditor.SEGuiUtility.SelectDataWindowSelectionChanged{``0})">
            <summary>
            绘制在指定场景中选择数据项的按钮
            </summary>
            <typeparam name="DATATYPE">数据项类型</typeparam>
            <param name="label">左侧标签文本</param>
            <param name="activatorRect">弹出窗口的位置</param>
            <param name="dataSNs">数据的SN</param>
            <param name="sceneSN">所在场景的SN</param>
            <param name="callback">选中项切换的回调</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEGuiUtility.MultiSelectFilteredDataButton``1(System.String,UnityEngine.Rect@,System.Int32[],MUEditor.SceneEditor.SEGuiUtility.DisplayDataFilterDelegate{``0},MUEditor.SceneEditor.SEGuiUtility.SelectDataWindowSelectionChanged{``0})">
            <summary>
            绘制选择数据项的按钮，数据可按一定过滤规则来显示
            </summary>
            <typeparam name="DATATYPE">数据项类型</typeparam>
            <param name="label">左侧标签文本</param>
            <param name="activatorRect">弹出窗口的位置</param>
            <param name="dataSNs">所有数据的SN</param>
            <param name="filter">数据过滤器</param>
            <param name="callback">选中项切换的回调</param>
        </member>
        <member name="T:MUEditor.SceneEditor.ModelConfigFileInfo">
            <summary>
            模型配置表文件的相关信息
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ModelConfigFileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ModelConfigFileInfo.TableIndex">
            <summary>
            页签索引
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ModelConfigFileInfo.SnColumnName">
            <summary>
            SN对应的列名
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.ModelConfigFileInfo.ModelSnColumnName">
            <summary>
            模型SN对应的列名
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneEditorProxyAttribute">
            <summary>
            用于标识场景编辑器代理的特性标签
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.ISceneEditorProxy">
            <summary>
            场景编辑器在实际项目中的代理接口
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneEditorProxy.Initialize">
            <summary>
            初始化
            </summary>
            <returns>初始化是否成功</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneEditorProxy.InitializeExtendMenu">
            <summary>
            初始化扩展菜单
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneEditorProxy.LoadCustomPreference">
            <summary>
            加载自定义偏好设置
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneEditorProxy.SaveCustomPreference">
            <summary>
            保存自定义偏好设置
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneEditorProxy.CustomPreferenceGUI">
            <summary>
            绘制自定义偏好设置GUI
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneEditorProxy.GetSceneAssetDirectory">
            <summary>
            获取场景资源根目录
            </summary>
            <returns>场景资源根目录</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.ISceneEditorProxy.HandleSceneLoaded">
            <summary>
            处理场景加载事件
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SceneEditorRoot">
            <summary>
            场景编辑器根节点
            负责将游戏内的每帧更新传递到一般的C#类中
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SceneEditorRoot.NextFrameExecute">
            <summary>
            将在下一帧执行的Action
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.EGetNewSnMode">
            <summary>
            获取新SN的模式
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEPreference">
            <summary>
            场景编辑器偏好设置
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEPreference.hasInitialized">
            <summary>
            是否已经初始化
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEPreference.hasUpdatedInformation">
            <summary>
            是否有更新信息需要显示
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEPreference.DisplayMode">
            <summary>
            控制视图的显示模式
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEPreference.GetNewSnMode">
            <summary>
            获取新SN的模式
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEPreference.ShowUpdatedInformation">
            <summary>
            显示更新信息
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEPreference.InitializeIfNeeded">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEPreference.LoadPreference">
            <summary>
            加载偏好设置
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEPreference.SavePreference">
            <summary>
            保存偏好设置
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.EDisplayMode">
            <summary>
            控制视图显示模式
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.EEditMode">
            <summary>
            编辑模式
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SESelection">
            <summary>
            用于记录当前场景编辑器中选中的数据的类
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SESelection.EditMode">
            <summary>
            编辑模式
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SESelection.CurrentScene">
            <summary>
            当前选中的场景数据
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SESelection.CurrentElements">
            <summary>
            当前选中的场景元素列表
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SESelection.CurrentElementType">
            <summary>
            当前正在编辑的场景元素数据类型
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SESelection.DisplayMode">
            <summary>
            控制视图的显示模式
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SESelection.DisplayConfigs">
            <summary>
            显示配置
            </summary>
        </member>
        <member name="E:MUEditor.SceneEditor.SESelection.SceneChanged">
            <summary>
            当前场景数据变更事件
            </summary>
        </member>
        <member name="E:MUEditor.SceneEditor.SESelection.ElementChanged">
            <summary>
            当前场景元素数据变更事件
            </summary>
        </member>
        <member name="E:MUEditor.SceneEditor.SESelection.ElementTypeChanged">
            <summary>
            当前编辑数据类型变更事件
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SESelection.selectableGameObjTable">
            <summary>
            当前所有选中CtrlView对应的可选GameObj
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.IsElementSelected(MUEditor.SceneEditor.IData)">
            <summary>
            数据当前是否被选中
            </summary>
            <param name="data">数据</param>
            <returns>是否被选中</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.GetAllSelectedElementGameObj">
            <summary>
            获取所有应该被选中的场景元素GameObj
            </summary>
            <returns>所有应该被选中的场景元素GameObj</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.CheckIsExtraVisible(System.Type)">
            <summary>
            检测源数据类型是否需要额外显示
            </summary>
            <param name="sourceDataType">源数据类型</param>
            <returns>是否需要额外显示</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.ToggleDisplayConfig(MUEditor.SceneEditor.SEDisplayConfig)">
            <summary>
            反转显示配置的可见性
            </summary>
            <param name="config">显示配置</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.SetAllDisplayConfig(System.Boolean)">
            <summary>
            设置全部显示配置
            </summary>
            <param name="isVisible">是否可见</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.InitializeDisplayConfig">
            <summary>
            初始化显示配置
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.UnitySelectionChangedHandler">
            <summary>
            unity选中项变化事件处理
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.GetCorrectGameObject(UnityEngine.GameObject,MUEditor.SceneEditor.SEControlView)">
            <summary>
            获取对应CtrlView中应该被选中的GameObj
            </summary>
            <param name="curGameObj">当前选中的GameObj</param>
            <param name="ctrlView">所在地CtrlView</param>
            <returns>应该被选中的GameObj</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SESelection.CheckListsAreSame(System.Collections.Generic.List{MUEditor.SceneEditor.ISceneElementData},System.Collections.Generic.List{MUEditor.SceneEditor.ISceneElementData})">
            <summary>
            检测两个列表是否相同
            </summary>
            <param name="listA">列表A</param>
            <param name="listB">列表B</param>
            <returns>列表是否相同</returns>
        </member>
        <member name="T:MUEditor.SceneEditor.SEServices">
            <summary>
            场景编辑器服务类
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEServices.Proxy">
            <summary>
            在实际项目中的代理
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEServices.CurrentHero">
            <summary>
            当前主角
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEServices.CurrentAssetName">
            <summary>
            当前场景资源
            </summary>
        </member>
        <member name="P:MUEditor.SceneEditor.SEServices.SceneAssets">
            <summary>
            所有的场景资源引用
            Key:场景资源名， Value:场景资源引用
            </summary>
        </member>
        <member name="F:MUEditor.SceneEditor.SEServices.allDatasets">
            <summary>
            所有的数据集
            Key:数据集中SEData的类型，Value:实际的数据集
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.Initialize">
            <summary>
            初始化
            </summary>
            <returns>输出信息，如果正常初始化则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.GetDataset``1">
            <summary>
            获取存储了指定数据类型的数据集
            </summary>
            <typeparam name="DATATYPE">SEData的类型</typeparam>
            <returns>对应的数据集，未获取到时返回空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.GetDataset(System.Type)">
            <summary>
            获取存储了指定数据类型的数据集
            </summary>
            <param name="dataType">SEData的类型</param>
            <returns>对应的数据集，未获取到时返回空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.GetDatasetAs``1">
            <summary>
            获取存储了指定数据类型的数据集，结果会被as转换成对应的数据集类型
            (该方法不适用于ISceneData)
            </summary>
            <typeparam name="DATATYPE">SEData的类型</typeparam>
            <returns>对应的数据集，未获取到时返回空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.GetAllDatasets">
            <summary>
            获取所有数据集
            </summary>
            <returns>所有数据集</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.SaveAllDataset">
            <summary>
            保存所有的数据集
            </summary>
            <returns>日志信息，正常保存则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.LoadSceneAsset(MUEditor.SceneEditor.ISceneData,System.Action)">
            <summary>
            加载场景资源
            </summary>
            <param name="sceneData">场景数据</param>
            <param name="loadedCallback">加载完成的回调</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.RegisterUpdatableObject(MUEditor.SceneEditor.IUpdatable)">
            <summary>
            注册可更新对象
            </summary>
            <param name="target">想要注册的对象</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.UnregisterUpdatableObject(MUEditor.SceneEditor.IUpdatable)">
            <summary>
            取消更新对象的注册
            </summary>
            <param name="target">想要取消注册的对象</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.NextFrameExecute(System.Action)">
            <summary>
            添加在下一帧执行的动作
            </summary>
            <param name="action">想要在下一帧执行的动作</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.InitializeProxy">
            <summary>
            初始化代理
            </summary>
            <returns>输出信息，正常加载则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.InitializeAllDataset">
            <summary>
            初始化所有数据集
            </summary>
            <returns>输出信息，正常加载则为空</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.InitializeSceneAssets">
            <summary>
            初始化场景资源引用列表
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.ResetSceneEditorRoot">
            <summary>
            重置场景编辑器根节点
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.RaiseUpdate">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.HideSceneOtherGizmos">
            <summary>
            隐藏场景中与场景编辑器无关的物体
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.LodEnable(System.Boolean)">
            <summary>
            设置lod是否激活
            </summary>
            <param name="enable">是否激活</param>
        </member>
        <member name="M:MUEditor.SceneEditor.SEServices.InitLodList">
            <summary>
            初始化lod列表
            </summary>
        </member>
        <member name="T:MUEditor.SceneEditor.SEUtility">
            <summary>
            场景编辑器辅助类
            </summary>
        </member>
        <member name="M:MUEditor.SceneEditor.SEUtility.RotationToAngle(UnityEngine.Quaternion)">
            <summary>
            将物体的旋转转换成配置表中的角度
            </summary>
            <param name="rotation">旋转</param>
            <returns>角度</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEUtility.AngleToRotation(System.Single)">
            <summary>
            将配置表中的角度转换成物体的旋转
            </summary>
            <param name="angle">角度</param>
            <returns>旋转</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEUtility.RadiusToScale(System.Single)">
            <summary>
            圆形半径转换成Plane的缩放
            </summary>
            <param name="radius">半径</param>
            <returns>缩放</returns>
        </member>
        <member name="M:MUEditor.SceneEditor.SEUtility.ScaleToRadius(UnityEngine.Vector3)">
            <summary>
            Plane的缩放转换成圆形半径
            </summary>
            <param name="scale">缩放</param>
            <returns>半径</returns>
        </member>
        <member name="T:MUEditor.Story.FCopyUtility">
            <summary>
            复制粘贴辅助类
            </summary>
        </member>
        <member name="F:MUEditor.Story.FCopyUtility.cachedCopySet">
            <summary>
            缓存的复制集合
            该字段会在检测能否粘贴时赋值，执行粘贴操作时会直接使用该缓存值，以避免再次进行反序列化
            </summary>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.Copy(System.Collections.Generic.List{MUEngine.Story.FEvent})">
            <summary>
            复制事件
            </summary>
            <param name="targetEvents">想要复制的事件</param>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.Copy(System.Collections.Generic.List{MUEngine.Story.FKeyFrameBase})">
            <summary>
            复制关键帧
            </summary>
            <param name="targetKeyFrames">想要复制的关键帧</param>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.Copy(System.Collections.Generic.List{MUEngine.Story.FTrack})">
            <summary>
            复制轨道
            </summary>
            <param name="targetTracks">想要复制的轨道</param>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.CanPaste(MUEngine.Story.FTrack,System.Int32)">
            <summary>
            检测是否可以粘贴到轨道
            </summary>
            <param name="targetTrack">目标轨道</param>
            <param name="startFrame">起始帧</param>
            <returns>是否可以粘贴</returns>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.Paste(MUEngine.Story.FTrack,System.Int32)">
            <summary>
            粘贴到轨道
            </summary>
            <param name="targetTrack">目标轨道</param>
            <param name="startFrame">起始帧</param>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.CanPaste(MUEngine.Story.FKeyFrameEventBase,System.Int32)">
            <summary>
            检测是否可以粘贴到关键帧事件
            </summary>
            <param name="targetEvent">目标关键帧事件</param>
            <param name="startFrame">起始帧</param>
            <returns>是否可以粘贴</returns>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.Paste(MUEngine.Story.FKeyFrameEventBase,System.Int32)">
            <summary>
            粘贴到关键帧事件
            </summary>
            <param name="targetEvent">目标事件</param>
            <param name="startFrame">起始帧</param>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.CanPaste(MUEngine.Story.FTimeline)">
            <summary>
            检测是否可以粘贴
            </summary>
            <param name="targetTimeline">目标时间线</param>
            <returns>是否可以粘贴</returns>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.Paste(MUEngine.Story.FTimeline)">
            <summary>
            粘贴到时间线
            </summary>
            <param name="targetTimeline">目标时间线</param>
        </member>
        <member name="M:MUEditor.Story.FCopyUtility.CheckCanPaste">
            <summary>
            检测能否执行粘贴操作
            </summary>
            <returns>能否执行粘贴</returns>
        </member>
        <member name="M:MUEditor.Story.JsonCopySet.SortEvents">
            <summary>
            把事件按时间顺序排序
            </summary>
        </member>
        <member name="T:MUEditor.Story.AudioResourceScaner">
            <summary>
            音频资源扫描器
            </summary>
        </member>
        <member name="T:MUEditor.Story.EffectResourceScaner">
            <summary>
            特效资源扫描器
            </summary>
        </member>
        <member name="T:MUEditor.Story.IResourceScaner">
            <summary>
            供剧情模块导出资源列表使用的资源扫描器
            </summary>
        </member>
        <member name="M:MUEditor.Story.IResourceScaner.ScanResource(MUEngine.Story.StoryDatabase)">
            <summary>
            扫描资源，并存入目标数据库
            </summary>
            <param name="targetDatabase">目标数据库</param>
        </member>
        <member name="T:MUEditor.Story.ResourceScanerAttribute">
            <summary>
            用于标记资源扫描器的特性标签
            </summary>
        </member>
        <member name="T:MUEditor.Story.StoryDataExporter">
            <summary>
            剧情信息导出工具类
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryDataExporter.Export">
            <summary>
            导出所有剧情编辑器需要的数据信息
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryDataExporter.InitializeResourceScaners">
            <summary>
            初始化资源扫描器
            </summary>
        </member>
        <member name="M:MUEditor.Story.FActorParticleAnimationEventEditor.CheckCanSplit">
            <summary>
            检测能否从当前帧位置拆分事件
            </summary>
            <returns>能否拆分</returns>
        </member>
        <member name="M:MUEditor.Story.FPlayAnimationEventEditor.CheckCanCut">
            <summary>
            检测能否从当前帧位置剪辑事件
            </summary>
            <returns>能否剪辑</returns>
        </member>
        <member name="T:MUEditor.Story.FDoubleClickChecker">
            <summary>
            双击检测器
            </summary>
        </member>
        <member name="F:MUEditor.Story.FDoubleClickChecker.timeThreshold">
            <summary>
            双击时间阈值
            </summary>
        </member>
        <member name="F:MUEditor.Story.FDoubleClickChecker.lastSelectedObj">
            <summary>
            上次选中的对象
            </summary>
        </member>
        <member name="F:MUEditor.Story.FDoubleClickChecker.lastClickTime">
            <summary>
            上次点击的时间
            </summary>
        </member>
        <member name="M:MUEditor.Story.FDoubleClickChecker.CheckIsDoubleClick(UnityEngine.Object,System.Single)">
            <summary>
            检测一次点击是否是双击
            </summary>
            <param name="obj">选中的对象</param>
            <param name="time">点击的时间</param>
            <returns>点击是否是双击</returns>
        </member>
        <member name="M:MUEditor.Story.FEventEditor.OnDrawEventRect(MUEngine.Story.FrameRange)">
            <summary>
            绘制蓝条
            </summary>
            <param name="viewRange">当前显示的帧范围</param>
        </member>
        <member name="M:MUEditor.Story.FEventEditor.OnGetDragLimit(System.Boolean,MUEngine.Story.FrameRange,System.Int32@,System.Int32@)">
            <summary>
            获取拖拽的限制范围
            </summary>
            <param name="draggingStart">是否在拖拽事件的起点</param>
            <param name="validKeyframeRange">有效范围</param>
            <param name="leftLimit">左侧限制的帧位置</param>
            <param name="rightLimit">右侧限制的帧位置</param>
        </member>
        <member name="M:MUEditor.Story.FEventEditor.DrawStartTransitionRect(System.Single,UnityEngine.Color,MUEngine.Story.FrameRange)">
            <summary>
            在事件条的起始位置绘制渐变区域
            </summary>
            <param name="timeLen">时间长度</param>
            <param name="rectColor">区域颜色</param>
            <param name="viewRange">当前显示的帧范围</param>
        </member>
        <member name="M:MUEditor.Story.FEventEditor.DrawSecondStartTransitionRect(System.Single,System.Single,UnityEngine.Color,MUEngine.Story.FrameRange)">
            <summary>
            在事件条起始的第二段位置绘制渐变区域
            </summary>
            <param name="firstLength">第一段起始的长度</param>
            <param name="secondLength">第二段起始的长度</param>
            <param name="rectColor">区域颜色</param>
            <param name="viewRange">当前显示的帧范围</param>
        </member>
        <member name="M:MUEditor.Story.FEventEditor.DrawEndTransitionRect(System.Single,UnityEngine.Color,MUEngine.Story.FrameRange)">
            <summary>
            绘制事件结束渐变区域
            </summary>
            <param name="timeLen">时间长度</param>
            <param name="rectColor">区域颜色</param>
            <param name="viewRange">当前显示的帧范围</param>
        </member>
        <member name="T:MUEditor.Story.FFadeInOutEventEditor">
            <summary>
            渐变事件Editor
            </summary>
        </member>
        <member name="T:MUEditor.Story.FFadeKeyFrameEventEditor">
            <summary>
            带有淡入淡出属性的事件的编辑器
            </summary>
        </member>
        <member name="T:MUEditor.Story.FKeyFrameEditor">
            <summary>
            关键帧对应的Editor
            </summary>
        </member>
        <member name="P:MUEditor.Story.FKeyFrameEditor.IsSelected">
            <summary>
            是否被选中
            </summary>
        </member>
        <member name="P:MUEditor.Story.FKeyFrameEditor.IsMouseHover">
            <summary>
            是否处于鼠标悬停状态
            </summary>
        </member>
        <member name="P:MUEditor.Story.FKeyFrameEditor.KeyFrame">
            <summary>
            对应的关键帧
            </summary>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEditor.#ctor(MUEngine.Story.FKeyFrameBase)">
            <summary>
            构造函数
            </summary>
            <param name="keyFrame">对应的关键帧</param>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEditor.Refresh(MUEngine.Story.FrameRange,UnityEngine.Rect)">
            <summary>
            刷新
            </summary>
            <param name="viewRange">当前视图范围</param>
            <param name="ownerEditorRect">父级事件编辑器的显示范围</param>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEditor.CheckIsMouseIn">
            <summary>
            检测鼠标当前是否处在自身的范围之内
            </summary>
            <returns>鼠标指针是否在范围内</returns>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEditor.Repaint">
            <summary>
            重绘
            </summary>
        </member>
        <member name="T:MUEditor.Story.FKeyFrameEventEditor">
            <summary>
            关键帧事件的编辑器，提供关键帧的绘制和编辑操作
            </summary>
        </member>
        <member name="F:MUEditor.Story.FKeyFrameEventEditor.hoveredIndex">
            <summary>
            鼠标悬停指向的关键帧的索引
            </summary>
        </member>
        <member name="F:MUEditor.Story.FKeyFrameEventEditor.draggedIndex">
            <summary>
            鼠标拖拽的关键帧的索引
            </summary>
        </member>
        <member name="F:MUEditor.Story.FKeyFrameEventEditor.keyFrameEditos">
            <summary>
            关键帧对应的Editor
            </summary>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventEditor.EventPropertyChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理事件的属性变更事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventEditor.RebuildKeyFrameEditor">
            <summary>
            重新构建关键帧编辑器
            </summary>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventEditor.DeselectAllKeyFrames">
            <summary>
            取消所有关键帧的选中状态
            </summary>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventEditor.GetDragKeyFrameLimit(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            获取拖拽关键帧的移动限制
            </summary>
            <param name="draggingIndex">被拖拽的关键帧的索引</param>
            <param name="leftLimit">左侧限制</param>
            <param name="rightLimit">右侧限制</param>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventEditor.RecordKeyframe">
            <summary>
            记录关键帧
            </summary>
        </member>
        <member name="M:MUEditor.Story.FTimelineEditor.GetEventsRange">
            <summary>
            获取时间线里包含的所有事件的整体帧范围
            不包含事件时，返回[-1, -1]
            </summary>
            <returns>所有事件的整体范围</returns>
        </member>
        <member name="M:MUEditor.Story.FTimelineEditor.SelectAllEvents">
            <summary>
            选中时间线中的所有事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.FTimelineEditor.DeselectAllEvents">
            <summary>
            取消时间线中所有事件的选中
            </summary>
        </member>
        <member name="M:MUEditor.Story.FTrackEditor.PasteEvents(System.Object)">
            <summary>
            粘贴事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.FContainerEditor.GetEventsRange">
            <summary>
            获取容器里包含的所有事件的整体帧范围
            不包含事件时，返回[-1, -1]
            </summary>
            <returns>所有事件的整体范围</returns>
        </member>
        <member name="M:MUEditor.Story.FContainerEditor.SelectAllEvents">
            <summary>
            选中时间线中的所有事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.FContainerEditor.DeselectAllEvents">
            <summary>
            取消时间线中所有事件的选中
            </summary>
        </member>
        <member name="T:MUEditor.Story.ESnapTimeMode">
            <summary>
            时间吸附的吸附模式
            </summary>
        </member>
        <member name="T:MUEditor.Story.FDragService">
            <summary>
            拖拽服务类
            </summary>
        </member>
        <member name="P:MUEditor.Story.FDragService.DraggingFrame">
            <summary>
            当前拖拽对象对应的帧位置
            </summary>
        </member>
        <member name="P:MUEditor.Story.FDragService.DraggingTarget">
            <summary>
            正在拖拽的目标
            </summary>
        </member>
        <member name="P:MUEditor.Story.FDragService.IsDragging">
            <summary>
            是否正在拖拽
            </summary>
        </member>
        <member name="P:MUEditor.Story.FDragService.SnapTimeMode">
            <summary>
            吸附时间模式
            </summary>
        </member>
        <member name="P:MUEditor.Story.FDragService.EnableSnap">
            <summary>
            是否启用吸附
            </summary>
        </member>
        <member name="M:MUEditor.Story.FDragService.StartDragging(MUEngine.Story.IDragTarget)">
            <summary>
            开始拖拽
            </summary>
            <param name="draggingTarget">正在拖拽的目标</param>
        </member>
        <member name="M:MUEditor.Story.FDragService.StartDragging(System.Int32)">
            <summary>
            开始拖拽
            </summary>
            <param name="draggingFrame">正在拖拽的对象对应的帧位置</param>
        </member>
        <member name="M:MUEditor.Story.FDragService.StopDragging">
            <summary>
            停止拖拽
            </summary>
        </member>
        <member name="M:MUEditor.Story.FDragService.DrawDraggingTooltipLine(UnityEngine.Rect)">
            <summary>
            绘制正在拖拽对象对应的悬浮提示线
            </summary>
            <param name="dragTooltipRect">整体区域范围</param>
        </member>
        <member name="M:MUEditor.Story.FDragService.GetDragEventDelta(System.Int32,MUEngine.Story.IDragTarget)">
            <summary>
            获取拖拽事件（经过吸附运算后）的偏移量
            </summary>
            <param name="originFrame">原始帧</param>
            <param name="draggingTarget">正在拖拽的目标</param>
            <returns>偏移量</returns>
        </member>
        <member name="M:MUEditor.Story.FDragService.GetSnappedFrame(System.Int32)">
            <summary>
            获取吸附后的帧位置
            </summary>
            <param name="originFrame">原始帧位置</param>
            <returns>吸附后的帧位置</returns>
        </member>
        <member name="M:MUEditor.Story.FDragService.GetTimeUnitSnappedFrame(System.Int32)">
            <summary>
            获取吸附到时间单位刻度线上的帧位置
            </summary>
            <param name="originFrame">原始帧</param>
            <returns>吸附后的帧位置</returns>
        </member>
        <member name="M:MUEditor.Story.FDragService.GetTimeUnitSnappedTime(System.Single)">
            <summary>
            获取吸附到时间单位刻度线上的时间点
            </summary>
            <param name="originTime">原始时间</param>
            <returns>吸附后的时间点</returns>
        </member>
        <member name="M:MUEditor.Story.FDragService.GetXFromFrame(UnityEngine.Rect,MUEngine.Story.FrameRange,System.Int32)">
            <summary>
            获取帧对应的X坐标
            </summary>
            <param name="dragTooltipRect">拖拽提示区域</param>
            <param name="viewRange">显示范围</param>
            <param name="frame">帧位置</param>
            <returns>X坐标</returns>
        </member>
        <member name="M:MUEditor.Story.FDragService.GetNearestSnapPoint(System.Int32)">
            <summary>
            获取最近的吸附点
            </summary>
            <param name="originFrame">原始帧</param>
            <returns>最近的吸附点，返回－1表示附近没有吸附点</returns>
        </member>
        <member name="T:MUEditor.Story.FEditor">
            	 * @brief Base for all the editor classes used in the sequence window.
                 * editor的基类
        </member>
        <member name="P:MUEditor.Story.FEditor.SequenceEditor">
            @brief Reference to the sequence editor this editor belongs to 
        </member>
        <member name="F:MUEditor.Story.FEditor._isSelected">
            @brief Is this element selected? 
        </member>
        <member name="P:MUEditor.Story.FEditor.IsSelected">
            @brief Is this element selected? 
        </member>
        <member name="P:MUEditor.Story.FEditor.Rect">
            @brief What's the rect used to draw this element? 
        </member>
        <member name="M:MUEditor.Story.FEditor.OnSelect">
            @brief Called on selection. 
        </member>
        <member name="M:MUEditor.Story.FEditor.OnDeselect">
            @brief Called on deselection. 
        </member>
        <member name="M:MUEditor.Story.FEditor.OnDelete">
            @brief Called when the editor is deleted, e.g. deleting an event
            from the track.
            @note it is different from OnDestroy because it is called while
            the object is still "proper" (e.g. event still belongs to track).
        </member>
        <member name="M:MUEditor.Story.FEditor.Init(MUEngine.Story.FObject,MUEditor.Story.FEditor)">
            @brief Inits the editor object.
            @param obj CObject the editor manages
        </member>
        <member name="P:MUEditor.Story.FEditor.ClickChecker">
            <summary>
            点击检测器
            提供判断某次点击是否为双击的接口
            </summary>
        </member>
        <member name="T:MUEditor.Story.FEditorAttribute">
            @brief Attribute to specify which editor will handle the representation
            of a specific FObject class. It works in the same way as Unity's
            CustomEditor, but here it is for specifying how that FObject will be 
            represented inside sequence window.
        </member>
        <member name="T:MUEditor.Story.FEditorCache">
            @brief Used to cache the editor classes that will be used to handle the individual elements
            (e.g. FTimelineEditor, FEventEditor).
        </member>
        <member name="T:MUEditor.Story.FInspectorWindow">
            <summary>
            剧情属性区窗口
            </summary>
        </member>
        <member name="P:MUEditor.Story.FInspectorWindow.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:MUEditor.Story.FInspectorWindow.Open">
            <summary>
            打开属性窗口
            </summary>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.GetXForFrame(System.Int32)">
            @brief Returns the mouse x normalized to the start of the timeline, so 0 = viewRange.Start
            @param frame Frame.
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.GetFrameForX(System.Single)">
            @brief Get frame for x, normalized to the start of timeline, so 0 = viewRange.Start
            @param x Position.
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.SelectEvents(MUEngine.Story.FrameRange)">
            <summary>
            选中事件
            </summary>
            <param name="range">帧范围</param>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.SelectEventsAfter(System.Int32,System.Boolean)">
            <summary>
            选中指定帧之后的所有事件
            </summary>
            <param name="frame">指定帧</param>
            <param name="containsOverlap">是否包括跨越指定帧的事件</param>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.SelectEventsBefore(System.Int32,System.Boolean)">
            <summary>
            选中指定帧之前的所有事件
            </summary>
            <param name="frame">指定帧</param>
            <param name="containsOverlap">是否包括跨越指定帧的事件</param>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.ExpandAllEditors">
            <summary>
            全部展开
            </summary>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.ShrinkAllEditors">
            <summary>
            全部收起
            </summary>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditor.GetSnapableEditors">
            <summary>
            获取所有可被吸附的事件编辑器
            </summary>
            <returns>可被吸附的事件编辑器</returns>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditorWindow.DrawStoryPlayingGUI">
            <summary>
            绘制剧情正在播放时的界面
            </summary>
        </member>
        <member name="M:MUEditor.Story.FSequenceEditorWindow.PlayPauseSequenceCommandHandler">
            <summary>
            处理[播放/暂停序列]命令
            </summary>
        </member>
        <member name="M:MUEditor.Story.FUtility.GetTimeInSecond(System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取以[秒]为单位时间文本
            </summary>
            <param name="frame">帧</param>
            <param name="frameRate">帧率</param>
            <param name="showDecimal">是否显示小数</param>
        </member>
        <member name="P:MUEditor.Story.FUtility.SequenceEditor">
            <summary>
            FSequenceEditor实例
            </summary>
        </member>
        <member name="T:MUEditor.Story.FKeyFrameEventInspector">
            <summary>
            关键帧事件的Inspector基类
            </summary>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventInspector.OnGetValueText(System.Int32)">
            <summary>
            获取关键帧的数值对应文本
            </summary>
            <param name="index">关键帧的索引</param>
            <returns>数值对应的文本</returns>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventInspector.OnSelectKeyFrame(System.Int32)">
            <summary>
            选中关键帧
            </summary>
            <param name="index">关键帧的索引</param>
        </member>
        <member name="M:MUEditor.Story.FKeyFrameEventInspector.OnEditKeyFrameGUI(System.Int32)">
            <summary>
            绘制编辑单个关键帧的界面
            </summary>
            <param name="index">关键帧的索引</param>
        </member>
        <member name="T:MUEditor.Story.FKeyFrameTraceInspector">
            <summary>
            轨迹关键帧类型的Inspector
            </summary>
        </member>
        <member name="T:MUEditor.Story.FKeyFrameVector3EventInspector">
            <summary>
            Vector3类型的关键帧事件的Inspector基类
            </summary>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.IntFieldUndoable(System.String,System.Int32,MUEditor.SetIntValue)">
            <summary>
            绘制编辑整型数值的界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.IntSliderUndoable(System.String,System.Int32,System.Int32,System.Int32,MUEditor.SetIntValue)">
            <summary>
            绘制编辑整型数值的滑杆界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="leftValue">滑杆最小值限制</param>
            <param name="rightValue">滑杆最大值限制</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.FloatFieldUndoable(System.String,System.Single,MUEditor.SetFloatValue)">
            <summary>
            绘制编辑浮点型数值的界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.SliderUndoable(System.String,System.Single,System.Single,System.Single,MUEditor.SetFloatValue)">
            <summary>
            绘制编辑浮点型数值的滑杆界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="leftValue">滑杆最小值限制</param>
            <param name="rightValue">滑杆最大值限制</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.ToggleUndoable(System.String,System.Boolean,MUEditor.SetBoolValue)">
            <summary>
            绘制编辑布尔型数值的界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.TextFieldUndoable(System.String,System.String,MUEditor.SetStringValue)">
            <summary>
            绘制编辑文本型数值的界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.Vector3FieldUndoable(System.String,UnityEngine.Vector3,MUEditor.SetVector3Value)">
            <summary>
            绘制编辑Vector3型数值的界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="M:MUEditor.Story.FEventInspector.Vector2FieldUndoable(System.String,UnityEngine.Vector2,MUEditor.SetVector2Value)">
            <summary>
            绘制编辑Vector2型数值的界面，支持撤销重做
            </summary>
            <param name="label">显示文本</param>
            <param name="value">原始数值</param>
            <param name="setValueDelegate">设置新数值的委托</param>
        </member>
        <member name="T:MUEditor.Story.RelativeCalculatorWindow">
            <summary>
            相对坐标计算器窗口
            </summary>
        </member>
        <member name="M:MUEditor.Story.RelativeCalculatorWindow.MaxToUnityPos(UnityEngine.Vector3)">
            <summary>
            把3DSMax中的坐标转换成Unity中的坐标
            </summary>
            <param name="maxPos">3DSMax中的坐标</param>
            <returns>Unity中的坐标</returns>
        </member>
        <member name="T:MUEditor.Story.ConfigInspectorAttribute">
            <summary>
            用于标识剧情配置属性区类的特性标签
            </summary>
        </member>
        <member name="T:MUEditor.Story.StoryConfigInspector">
            <summary>
            剧情配置的属性区界面
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryConfigInspector.DrawGUI">
            <summary>
            绘制界面
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryConfigInspector.Config">
            <summary>
            剧情配置
            </summary>
        </member>
        <member name="T:MUEditor.Story.TranslationToolWindow">
            <summary>
            剧情平移工具窗口
            </summary>
        </member>
        <member name="M:MUEditor.Story.TranslationToolWindow.Open">
            <summary>
            打开剧情平移工具
            </summary>
        </member>
        <member name="M:MUEditor.Story.ActorInspector.ResourceInspectorGUI">
            <summary>
            显示资源属性的设置界面
            </summary>
        </member>
        <member name="M:MUEditor.Story.ActorInspector.OnEdittimeInspectorGUI">
            <summary>
            显示编辑时属性
            </summary>
        </member>
        <member name="M:MUEditor.Story.ActorInspector.GetScaleFloatFromVector3(UnityEngine.Vector3)">
            <summary>
            从Vector3类型的缩放中获取float类型的缩放
            </summary>
            <param name="scale">Vector3类型的缩放</param>
            <returns>float类型的缩放</returns>
        </member>
        <member name="M:MUEditor.Story.ParticleActorInspector.ResourceInspectorGUI">
            <summary>
            显示资源属性的设置界面
            </summary>
        </member>
        <member name="M:MUEditor.Story.ParticleActorInspector.OnEdittimeInspectorGUI">
            <summary>
            显示编辑时属性
            </summary>
        </member>
        <member name="T:MUEditor.Story.StoryMenuManager">
            <summary>
            剧情相关菜单类，为编辑器提供所有剧情相关的菜单项
            </summary>
        </member>
        <member name="F:MUEditor.Story.StoryMenuManager.MENU_HEIGHT">
            <summary>
            菜单栏高度
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.RegisterMenuItem(System.String,MUEditor.IMUMenuItem,System.Boolean)">
            <summary>
            注册菜单项
            </summary>
            <param name="rootMenu">根菜单</param>
            <param name="menuItem">需要注册的菜单项</param>
            <param name="isSkillMode">是否为技能预览模式</param>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.MenuGUI">
            <summary>
            绘制菜单界面
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.ShowEditor">
            <summary>
            打开剧情编辑器
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.ShowSkillPreviewEditor">
            <summary>
            打开技能预览编辑器
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.RegisterDefaultMenuItems_StoryMode">
            <summary>
            注册剧情模式的默认菜单项
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.RegisterDefaultMenuItems_SkillMode">
            <summary>
            注册技能预览模式的默认菜单项
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.EditStoryConfig">
            <summary>
            设置剧情配置
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryMenuManager.AlignSequeceToTimeEnd">
            <summary>
            将当前动画序列对齐到时间末尾
            </summary>
        </member>
        <member name="T:MUEditor.Story.IStoryEditorScript">
            <summary>
            剧情编辑器接口
            </summary>
        </member>
        <member name="T:MUEditor.Story.StoryCameraControl">
            <summary>
            剧情摄像机控制器
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryCameraControl.OperateInFreeMode(MUEngine.Story.StoryCamera)">
            <summary>
            以自由移动的模式进行操作
            </summary>
        </member>
        <member name="T:MUEditor.Story.StoryCommand">
            <summary>
            剧情命令类，用于将快捷键转换为对应的命令，并分发至Editor当中
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryCommand.PlayPauseSequence">
            <summary>
            播放/暂停 剧情序列
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryCommand.GoToNextFrame">
            <summary>
            移到下一帧
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryCommand.GoToPreviousFrame">
            <summary>
            移到上一帧
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryCommand.GoToFirstFrame">
            <summary>
            移到第一帧
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryCommand.GoToLastFrame">
            <summary>
            移到最后一帧
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryCommand.RecordKeyframe">
            <summary>
            记录关键帧
            </summary>
        </member>
        <member name="T:MUEditor.Story.StoryGuiUtility">
            <summary>
            供剧情编辑器使用的GUI相关辅助方法类
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryGuiUtility.ActorShaderMaterialGUI(MUEngine.Story.IActorShaderEvent,UnityEngine.Rect@)">
            <summary>
            显示可以编辑 IActorShaderEvent 的材质的界面
            </summary>
            <param name="targetEvent">需要编辑的事件</param>
            <param name="popupWndRect">弹出窗口的位置</param>
        </member>
        <member name="M:MUEditor.Story.StoryGuiUtility.ActorShaderPropertyGUI(MUEngine.Story.IActorShaderEvent,UnityEngine.Rect@)">
            <summary>
            显示可以编辑 IActorShaderEvent 的材质属性的界面
            </summary>
            <param name="targetEvent">需要编辑的事件</param>
            <param name="popupWndRect">弹出窗口的位置</param>
        </member>
        <member name="M:MUEditor.Story.StoryGuiUtility.SmoothEventGUI(MUEngine.Story.ISmoothEvent)">
            <summary>
            绘制平滑过渡事件的属性编辑界面
            </summary>
            <param name="targetEvent">平滑过渡事件</param>
        </member>
        <member name="M:MUEditor.Story.StoryGuiUtility.TargetEventGUI(MUEngine.Story.ITargetEvent,UnityEngine.Rect@)">
            <summary>
            绘制目标事件的属性编辑界面
            </summary>
            <param name="targetEvent">目标事件</param>
            <param name="popWndRect">弹出选择目标子节点窗口的位置</param>
        </member>
        <member name="M:MUEditor.Story.StoryGuiUtility.TextEventGUI(MUEngine.Story.ITextEvent)">
            <summary>
            绘制文本事件的通用界面
            </summary>
            <param name="targetEvent">文本事件</param>
        </member>
        <member name="M:MUEditor.Story.StoryGuiUtility.FadeInOutEventGUI(MUEngine.Story.IFadeInOutEvent,System.String)">
            <summary>
            显示淡入淡出事件的淡入淡出时间属性
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryGuiUtility.RefreshEditor(MUEngine.Story.FSequence)">
            <summary>
            刷新编辑器，用于在手动创建动画相关对象后创建对应的Editor
            </summary>
            <param name="sequence">需要刷新的动画序列</param>
        </member>
        <member name="T:MUEditor.Story.StoryService">
            <summary>
            剧情服务类
            提供编辑器模型下使用的管理剧情相关入口
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryService.EdittingStory">
            <summary>
            当前正在编辑的剧情
            </summary>
        </member>
        <member name="E:MUEditor.Story.StoryService.EdittingStoryChanged">
            <summary>
            当前剧情变更事件
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryService.EdittingSequence">
            <summary>
            正在编辑的动画序列
            </summary>
        </member>
        <member name="P:MUEditor.Story.StoryService.EditorMode">
            <summary>
            编辑器模式
            </summary>
        </member>
        <member name="F:MUEditor.Story.StoryService.STORY_EDITOR_MODE_PREFERENCE_KEY">
            <summary>
            剧情编辑器模式在偏好设置中对应的键
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.CreateStory">
            <summary>
            创建剧情
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.OpenStory">
            <summary>
            打开剧情
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.OpenStory(System.String)">
            <summary>
            打开剧情
            </summary>
            <param name="filePath">剧情文件路径</param>
            <returns>打开得到的剧情</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.SaveStory">
            <summary>
            保存剧情
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.SaveStory(MUEngine.Story.MUStory)">
            <summary>
            保存剧情
            </summary>
            <param name="toSaveStory">待保存的剧情</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.StorySaveAs">
            <summary>
            剧情另存为
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.StoryAutoSave">
            <summary>
            执行剧情自动保存
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.CloseStory">
            <summary>
            关闭当前剧情
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.PlayStory">
            <summary>
            预览播放剧情
            </summary>
            <returns>播放的剧情，播放失败时返回空</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.PlayStory(System.String)">
            <summary>
            播放剧情
            </summary>
            <param name="storyJsonString">剧情的JSON序列化文本</param>
            <returns>播放的剧情，播放失败时返回空</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.PlayStory4Skill(System.String)">
            <summary>
            以技能预览模式播放剧情
            </summary>
            <param name="storyJsonString">剧情的JSON序列化文本</param>
            <returns>播放的剧情，播放失败时返回空</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.AppendOtherStory">
            <summary>
            拼接其它剧情
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.MergeOtherStory">
            <summary>
            合并其它剧情
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.PlaySequence(MUEngine.Story.FSequence,System.Single)">
            <summary>
            供编辑器调用的播放序列接口
            </summary>
            <param name="sequence">需要播放的序列</param>
            <param name="currentTime">当前时间</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.PauseSequence(MUEngine.Story.FSequence)">
            <summary>
            供编辑器调用的暂停序列接口
            </summary>
            <param name="sequence">需要暂停的序列</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.StopSequence(MUEngine.Story.FSequence,System.Boolean)">
            <summary>
            供编辑器使用的停止序列接口
            </summary>
            <param name="sequence">需要停止的序列</param>
            <param name="reset">是否重置</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.SetCurrentTime(MUEngine.Story.FSequence,System.Single)">
            <summary>
            供编辑器使用的设置序列当前时间
            </summary>
            <param name="sequence">需要设置时间的序列</param>
            <param name="currentTime">当前时间</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.CreateStoryComponent``1">
            <summary>
            创建剧情组件
            </summary>
            <typeparam name="T">剧情组件类型</typeparam>
            <returns>新创建的组件</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.DestroyStoryComponent(MUEngine.Story.StoryComponent)">
            <summary>
            销毁剧情组件
            </summary>
            <param name="component">需要删除的组件</param>
            <returns>组件是否被成功删除</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.ClearRedundant">
            <summary>
            清除多余的剧情组件和动画序列元素
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.SelectAllEvents">
            <summary>
            选中所有事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.DeselectAll">
            <summary>
            取消选中
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.SelectAfterEvents">
            <summary>
            选中当前帧之后的事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.SelectAfterEventsWithOverlap">
            <summary>
            选中当前帧之后的事件（含跨越）
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.SelectBeforeEvents">
            <summary>
            选中当前帧之前的事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.SelectBeforeEventsWithOverlap">
            <summary>
            选中当前帧之前的事件（含跨越）
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="F:MUEditor.Story.StoryService.editorScripts">
            <summary>
            剧情模块的编辑器相关脚本
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.HierarchyChangedHandler">
            <summary>
            处理层级树变更事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.ChangeEdittingStory(MUEngine.Story.MUStory)">
            <summary>
            变更当前剧情
            </summary>
            <param name="newStory">新的剧情</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.GetUniqueStoryName(System.String)">
            <summary>
            获取一个不重复的Story名称
            </summary>
            <param name="originName">原始名称</param>
            <returns>不重复的名称。当原始名称存在时将添加数字编号后缀</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.SaveStory(MUEngine.Story.MUStory,System.String)">
            <summary>
            保存剧情
            </summary>
            <param name="story">需要保存的剧情</param>
            <param name="savePath">保存路径</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.DestroyStory(System.Boolean)">
            <summary>
            销毁当前剧情
            </summary>
            <param name="isForce">是否强制销毁</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.GetUniqueComponentName(System.String,MUEngine.Story.MUStory)">
            <summary>
            获取一个不重复的剧情组件名称
            </summary>
            <param name="originName">原始名称</param>
            <param name="ownerStory">持有该组件的剧情</param>
            <returns>不重复的名称。当原始名称存在时将添加数字编号后缀</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.GetScreenCenterPosition">
            <summary>
            获取屏幕中心对应场景中的坐标
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.AddToFirstContainer(MUEngine.Story.MUStory,MUEngine.Story.StoryComponent)">
            <summary>
            将剧情组件添加到剧情的第一个Container当中
            </summary>
            <param name="ownerStory">持有组件的Story</param>
            <param name="component">剧情组件</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.GetFirstSelectedContainer(MUEngine.Story.FSequence)">
            <summary>
            获取第一个被选中的Container
            </summary>
            <param name="sequence">动画序列</param>
            <returns>第一个被选中的Container。全未被选中时返回第一个Container，没有Container时返回空</returns>
        </member>
        <member name="M:MUEditor.Story.StoryService.ClearRedundantComponent(MUEngine.Story.MUStory)">
            <summary>
            清除多余的剧情组件
            </summary>
            <param name="story">持有者剧情</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.StoryPlayFinishedHandler(System.Object,MUEngine.Story.StoryPlaybackEventArgs)">
            <summary>
            处理剧情播放完毕事件
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.LoadStoryConfig(MUEngine.Story.MUStory)">
            <summary>
            加载剧情的配置
            </summary>
            <param name="story">需要加载配置的剧情</param>
        </member>
        <member name="M:MUEditor.Story.StoryService.OnEdittingStoryChanged">
            <summary>
            响应当前编辑剧情变更
            </summary>
        </member>
        <member name="M:MUEditor.Story.StoryService.UpdateLod">
            <summary>
            根据是否正在编辑剧情，更新LOD的可用性
            </summary>
        </member>
        <member name="T:MUEditorUtility">
            <summary>
            供编辑器使用的通用辅助工具
            </summary>
        </member>
        <member name="P:MUEditorUtility.TRUNK_FULL_PATH">
            <summary>
            trunk目录的完整路径
            </summary>
        </member>
        <member name="P:MUEditorUtility.AssetsToTrunkRelativePrefix">
            <summary>
            资源目录到根目录的相对路径前缀
            </summary>
        </member>
        <member name="M:MUEditorUtility.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:MUEditorUtility.GetFormatedAssetPath(System.String)">
            <summary>
            获取格式化之后的资源路径
            </summary>
            <param name="assetPath">原始资源路径</param>
            <returns>格式化之后的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.AssetPathToFullPath(System.String)">
            <summary>
            将资源路径转换为本地硬盘完整路径
            </summary>
            <param name="assetPath">资源路径</param>
            <returns>本地硬盘完整路径</returns>
        </member>
        <member name="M:MUEditorUtility.FullPathToAssetPath(System.String)">
            <summary>
            将本地硬盘的完整路径转换为资源路径
            </summary>
            <param name="fullPath">完整路径</param>
            <returns>资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.GetAllFullPathIn(System.String,System.String)">
            <summary>
            获取某一资源目录下的所有文件完整路径，可以指定某一特定的扩展名
            </summary>
            <param name="assetDir">资源目录（以“Assets/”开头，或以“Assets/”目录的一级子目录开头）</param>
            <param name="extension">指定的扩展名(留空则表示不作判断)</param>
            <returns>所有符合要求的文件的完整路径</returns>
        </member>
        <member name="M:MUEditorUtility.GetAllFullPathIn(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            获取某一资源目录下的所有文件完整路径
            </summary>
            <param name="assetDir">资源目录（以“Assets/”开头，或以“Assets/”目录的一级子目录开头）</param>
            <param name="searchSubDir">是否搜索子目录</param>
            <param name="extensions">指定的扩展名(留空则表示不作判断)</param>
            <returns>所有符合要求的文件的完整路径</returns>
        </member>
        <member name="M:MUEditorUtility.GetAllAssetPathIn(System.String,System.String)">
            <summary>
            获取某一资源目录下的所有文件的资源路径，可以指定某一特定的扩展名
            （*该方法会获取项目内的所有资源，执行时间与资源总量挂勾、与传入的目录无关。应该避免大量频繁地调用该方法）
            </summary>
            <param name="assetDir">资源目录（以“Assets/”开头，或以“Assets/”目录的一级子目录开头）</param>
            <param name="extension">指定的扩展名(留空则表示不作判断)</param>
            <returns>所有符合要求的文件的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.GetAllAssetPathIn(System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            获取某一资源目录下的所有文件的资源路径
            （*该方法会获取项目内的所有资源，执行时间与资源总量挂勾、与传入的目录无关。应该避免大量频繁地调用该方法）
            </summary>
            <param name="assetDir">资源目录（以“Assets/”开头，或以“Assets/”目录的一级子目录开头）</param>
            <param name="searchSubDir">是否搜索子目录</param>
            <param name="extensions">指定的扩展名(留空则表示不作判断)</param>
            <returns>所有符合要求的文件的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.GetAllPathIn(System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            获取某一资源目录下的所有文件路径
            </summary>
            <param name="assetDir">资源目录（以 'Assets/' 开头，或以 'Assets/' 目录的一级子目录开头）</param>
            <param name="searchSubDir">是否搜索子目录</param>
            <param name="extensions">指定的扩展名（留空则表示不作判断）</param>
            <param name="returnAsAssetPath">是否以资源路径的形式返回（true:以资源路径返回; false:以完整路径返回）</param>
            <returns>所有符合要求的文件路径</returns>
        </member>
        <member name="M:MUEditorUtility.GetAllFiles(System.String,System.String)">
            <summary>
            获取指定目录下所有指定扩展名的文件的完整路径
            </summary>
            <param name="rootDirFullPath">指定目录的完整路径</param>
            <param name="extension">扩展名，为空时返回所有文件</param>
            <returns>文件的完整路径列表</returns>
        </member>
        <member name="M:MUEditorUtility.GetSelectedAssetPath(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            获取当前编辑器中选中的资源路径
            </summary>
            <param name="extensions">指定的扩展名(留空则表示不作判断)</param>
            <param name="excludeDir">是否包含选中的目录中的所有子项</param>
            <returns>所有选中的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.FindAssetPath(System.String,System.String)">
            <summary>
            通过资源名称与类型获取资源路径（例如huacun, Scene）
            </summary>
            <param name="assetName">资源名称</param>
            <param name="assetType">资源类型</param>
            <returns>资源路径，未找到时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.FindAssetsPath(System.String,System.String)">
            <summary>
            通过资源名称与类型，获取所有对应资源的资源路径（例如huacun, Scene）
            </summary>
            <param name="assetName"></param>
            <param name="assetType"></param>
            <returns></returns>
        </member>
        <member name="F:MUEditorUtility.cachedAssetPathSearchResult">
            <summary>
            缓存的资源路径搜索结果
            </summary>
        </member>
        <member name="M:MUEditorUtility.FindAssetPathIn(System.String,System.String)">
            <summary>
            在指定目录下根据名称查找资源路径
            </summary>
            <param name="assetName">资源名称</param>
            <param name="searchDirAssetPath">查找目录的资源路径</param>
            <returns>资源的资源路径，未找到时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.GetDirectoryName(System.String)">
            <summary>
            对 System.Path.GetDirectoryName 的封装方法，统一使用 “/” 作为路径分割符
            </summary>
            <param name="path">路径</param>
            <returns>路径的父级目录</returns>
        </member>
        <member name="M:MUEditorUtility.SearchAssetPathByName(System.String,System.String)">
            <summary>
            通过名称搜索资源路径
            </summary>
            <param name="assetName">资源名称，包含扩展名</param>
            <param name="parentDir">父级目录。如果为空则搜索项目内所有资源</param>
            <returns>第一个找到的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.SetupDirectory(System.String)">
            <summary>
            部署资源目录：如果目录不存在则创建一个目录
            </summary>
            <param name="dirFullPath">目录的完整路径</param>
        </member>
        <member name="M:MUEditorUtility.SetupAssetDirectory(System.String)">
            <summary>
            部署资源目录：如果目录不存在则创建一个目录
            </summary>
            <param name="dirAssetPath">目录的资源路径</param>
        </member>
        <member name="M:MUEditorUtility.GetRelativePath(UnityEngine.GameObject,UnityEngine.GameObject,System.String)">
            <summary>
            获取两个节点之间的相对路径
            </summary>
            <param name="root">根节点</param>
            <param name="leaf">叶子节点</param>
            <param name="seprator">分隔符</param>
            <returns>两个节点之间的相对路径</returns>
        </member>
        <member name="M:MUEditorUtility.GetRelativePath(UnityEngine.Transform,UnityEngine.Transform,System.String)">
            <summary>
            获取两个节点之间的相对路径
            </summary>
            <param name="root">根节点</param>
            <param name="leaf">叶子节点</param>
            <param name="seprator">分隔符</param>
            <returns>两个节点之间的相对路径</returns>
        </member>
        <member name="M:MUEditorUtility.FormatPath(System.String)">
            <summary>
            对路径进行格式化
            </summary>
            <param name="path">原始路径</param>
            <returns>格式化之后的路径</returns>
        </member>
        <member name="M:MUEditorUtility.SearchTrunkDir">
            <summary>
            搜索trunk目录
            </summary>
            <returns>trunk目录。未找到时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.GetAudioClipByName(System.String)">
            <summary>
            通过资源名称获取AudioClip
            </summary>
            <param name="assetName">资源名称</param>
            <returns>获取到的AudioClip资源</returns>
        </member>
        <member name="M:MUEditorUtility.GetTexture2DByName(System.String)">
            <summary>
            通过名称获取Texture2D资源
            </summary>
            <param name="assetName">资源名称</param>
            <returns>Texture2D资源</returns>
        </member>
        <member name="M:MUEditorUtility.GetFontByName(System.String)">
            <summary>
            通过名称获取Font资源
            </summary>
            <param name="assetName">资源名称</param>
            <returns>Font资源</returns>
        </member>
        <member name="M:MUEditorUtility.DeleteMissingScript(UnityEngine.GameObject)">
            <summary>
            删除游戏对象身上及其子节点上已经丢失的脚本
            *慎用，一次性修改较多文件时可能会引起编辑器崩溃
            </summary>
            <param name="gameObj">游戏对象</param>
            <returns>是否实际对游戏对象进行了修改</returns>
        </member>
        <member name="M:MUEditorUtility.DeleteMissingScriptInOneGameObject(UnityEngine.GameObject)">
            <summary>
            删除游戏对象自身上的已丢失脚本
            </summary>
            <param name="gameObj">游戏对象</param>
            <returns>是否实际对游戏对象进行了修改</returns>
        </member>
        <member name="M:MUEditorUtility.CheckHasMissingScript(UnityEngine.GameObject)">
            <summary>
            检测游戏对象身上是否有已经丢失的脚本
            </summary>
            <param name="gameObj">游戏对象</param>
            <returns>是否有已经丢失的脚本</returns>
        </member>
        <member name="T:MUEditorUtility.ModifyPrefabDelegate">
            <summary>
            供修改Prefab使用的委托
            </summary>
            <param name="gameObj">从Prefab中加载得到的GameObject</param>
            <returns>是否进行了修改</returns>
        </member>
        <member name="M:MUEditorUtility.ModifyPrefab(System.String,MUEditorUtility.ModifyPrefabDelegate)">
            <summary>
            修改预制体
            </summary>
            <param name="assetPath">预制体资源路径</param>
            <param name="modifyDelegate">修改预制体的委托</param>
        </member>
        <member name="M:MUEditorUtility.ModifyPrefab(System.String,UnityEditor.PrefabUnpackMode,MUEditorUtility.ModifyPrefabDelegate)">
            <summary>
            修改预制体
            </summary>
            <param name="assetPath">预制体资源路径</param>
            <param name="unpackMode">预制体解包模式</param>
            <param name="modifyDelegate">修改预制体的委托</param>
        </member>
        <member name="M:MUEditorUtility.InstantiatePrefab(System.String)">
            <summary>
            加载预制体并创建游戏对象实例
            </summary>
            <param name="assetPath">资源路径</param>
            <returns>新创建的游戏对象实例</returns>
        </member>
        <member name="M:MUEditorUtility.GetFileTimestamp(System.String)">
            <summary>
            获取文件的最后修改时间戳
            </summary>
            <param name="filePath">文件路径</param>
            <returns>时间戳</returns>
        </member>
        <member name="M:MUEditorUtility.CopyAsset(System.String,System.String)">
            <summary>
            复制资源
            </summary>
            <param name="srcAssetPath">来源资源路径</param>
            <param name="dstAssetPath">目标资源路径</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:MUEditorUtility.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="srcFullPath">来源完整路径</param>
            <param name="dstFullPath">目标完整路径</param>
            <returns>操作是否成功</returns>
        </member>
        <member name="M:MUEditorUtility.BatchProcessAssets(System.Action)">
            <summary>
            批量对资源进行处理
            通过 AssetDatabase.StartAssetEditing, AssetDatabase.StopAssetEditing 对处理的过程进行加速
            </summary>
            <param name="processAction">资源处理方法</param>
        </member>
        <member name="M:MUEditorUtility.AddScenesToEditorBuildSettings(System.String)">
            <summary>
            将指定目录下的场景添加到 EditorBuildSettings.scenes
            </summary>
            <param name="entryDirAssetPath">入口目录的资源路径</param>
        </member>
        <member name="M:MUEditorUtility.SelectGameObject(UnityEngine.GameObject,System.Boolean)">
            <summary>
            选中游戏对象（仅在编辑器模式下使用）
            </summary>
            <param name="gameObj">想要选中的物体</param>
            <param name="pivotTo">是否聚焦到该物体</param>
        </member>
        <member name="M:MUEditorUtility.SceneWindowPivotTo(UnityEngine.Vector3)">
            <summary>
            Scene窗口跳转到指定坐标点
            </summary>
            <param name="position">坐标点</param>
        </member>
        <member name="M:MUEditorUtility.DeselectGameObject(UnityEngine.GameObject)">
            <summary>
            取消游戏对象的选中（仅在编辑器模式下使用）
            </summary>
            <param name="gObj">需要取消选中的游戏对象</param>
        </member>
        <member name="M:MUEditorUtility.PingAsset(System.String)">
            <summary>
            在编辑器中定位到指定资源
            </summary>
            <param name="assetPath">资源路径</param>
        </member>
        <member name="M:MUEditorUtility.GetBoundsCenter(UnityEngine.GameObject)">
            <summary>
            获取游戏对象的包围盒中心
            </summary>
            <param name="gameObj">目标游戏对象</param>
            <returns>包围盒中心（内部不存在包围盒时返回自身位置）</returns>
        </member>
        <member name="M:MUEditorUtility.ShowErrorDialog(System.String)">
            <summary>
            显示错误提示
            </summary>
            <param name="errorText">错误文本</param>
        </member>
        <member name="T:MUEditorUtility.GetItemName`1">
            <summary>
            使用带进度条的遍历时，用于获取每一项的名称的代理
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="item">列表中的单项</param>
            <returns>单项的名称</returns>
        </member>
        <member name="T:MUEditorUtility.TravelStep`1">
            <summary>
            使用可取消的带进度条的遍历时的单步实际操作的委托
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="item">列表中的单项</param>
            <returns>是否继续遍历</returns>
        </member>
        <member name="M:MUEditorUtility.TraverseListWithProgress``1(System.String,System.Collections.Generic.List{``0},System.Action{``0},MUEditorUtility.GetItemName{``0})">
            <summary>
            遍历传入的列表，并在编辑器中显示对应的进度条
            </summary>
            <typeparam name="T">列表的数据类型</typeparam>
            <param name="title">进度条标题</param>
            <param name="list">需要遍历的列表</param>
            <param name="processItemAction">遍历列表中的单个项的Action</param>
            <param name="getItemNameDelegate">获取列表中单个项的名称的代理</param>
            <returns>是否成功执行（执行过程中出现异常则认为失败）</returns>
        </member>
        <member name="M:MUEditorUtility.CancelableTraverseListWithProgress``1(System.String,System.Collections.Generic.List{``0},MUEditorUtility.TravelStep{``0},MUEditorUtility.GetItemName{``0})">
            <summary>
            遍历传入的列表，并在编辑器中显示对应的进度条。该方法可以中途取消
            </summary>
            <typeparam name="T">列表的数据类型</typeparam>
            <param name="title">进度条标题</param>
            <param name="list">需要遍历的列表</param>
            <param name="processItemDelegate">遍历列表中的单个项的委托</param>
            <param name="getItemNameDelegate">获取列表中单个项的名称的代理</param>
            <returns>操作是否正常结束。如果被取消则返回false</returns>
        </member>
        <member name="M:MUEditorUtility.TraverseAssetsWithProgress(System.String,System.String,System.String,System.Action{System.String})">
            <summary>
            遍历资源，并在编辑器中显示对应的进度条
            </summary>
            <param name="title">进度条标题</param>
            <param name="dirAssetPath">要遍历的目录的资源路径</param>
            <param name="extension">资源的扩展名</param>
            <param name="processItemAction">遍历列表中的单个项的委托</param>
            <returns>是否成功执行（执行过程中出现异常则认为失败）</returns>
        </member>
        <member name="M:MUEditorUtility.TraversePrefabWithProgress(System.String,System.String,MUEditorUtility.ModifyPrefabDelegate)">
            <summary>
            遍历预制体资源，并在编辑器中显示对应的进度条
            </summary>
            <param name="title">进度条标题</param>
            <param name="dirAssetPath">要遍历的目录的资源路径</param>
            <param name="modifyDelegate">修改预制体的委托</param>
        </member>
        <member name="M:MUEditorUtility.TraverseAssetsWithProgress(System.String,System.String,System.Collections.Generic.List{System.String},System.Action{System.String})">
            <summary>
            遍历资源，并在编辑器中显示对应的进度条
            </summary>
            <param name="title">进度条标题</param>
            <param name="dirAssetPath">要遍历的目录的资源路径</param>
            <param name="extensions">资源的扩展名</param>
            <param name="processItemAction">遍历列表中的单个项的委托</param>
            <returns>是否成功执行（执行过程中出现异常则认为失败）</returns>
        </member>
        <member name="M:MUEditorUtility.OpenDirectoryInExplorer(System.String)">
            <summary>
            在资源管理器中打开指定目录
            </summary>
            <param name="directory">需要打开的目录</param>
        </member>
        <member name="M:MUEditorUtility.GetProgramStartArgsValue(System.String,System.Boolean)">
            <summary>
            获取程序起动参数（例如传入 "-cmd"， 则返回参数列表中 "-cmd" 后面的参数）
            </summary>
            <param name="argsName">参数名称</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>参数的值</returns>
        </member>
        <member name="M:MUEditorUtility.CheckHasProgramStartArgs(System.String,System.Boolean)">
            <summary>
            检查程序起动参数中是否含有指定名称的参数
            </summary>
            <param name="argsName">参数名称</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>是否含有指定的参数</returns>
        </member>
        <member name="M:MUEditorUtility.FindAsset(System.String,System.String,System.Boolean)">
            <summary>
            查找当前项目中的指定资源
            具体实现为调用 AssetDatabase.FindAssets 并将第一个全字匹配的结果转换成资源路径返回
            </summary>
            <param name="filter">过滤器，可为资源名，也可以为包含扩展的完整文件名</param>
            <param name="searchInFolder">指定的查找目录</param>
            <param name="isWholeMatch">是否使用全字匹配</param>
            <returns>第一个找到的资源路径，未找到时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.FindAsset(System.String,System.String[],System.Boolean)">
            <summary>
            查找当前项目中的指定资源
            具体实现为调用 AssetDatabase.FindAssets 并将第一个全字匹配的结果转换成资源路径返回
            </summary>
            <param name="filter">过滤器，可为资源名，也可以为包含扩展的完整文件名</param>
            <param name="searchInFolders">指定的查找目录</param>
            <param name="isWholeMatch">是否使用全字匹配</param>
            <returns>第一个找到的资源路径，未找到时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.FindAssets(System.String,System.String[],System.Boolean)">
            <summary>
            查找当前项目中的指定资源
            具体实现为调用 AssetDatabase.FindAssets 并将全字匹配的结果转换成资源路径返回
            </summary>
            <param name="filter">过滤器，可为资源名，也可以为包含扩展的完整文件名</param>
            <param name="searchInFolders">指定的查找目录</param>
            <param name="isWholeMatch">是否使用全字匹配</param>
            <returns>所有找到的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.FindAssets(EFilterAssetType,System.String)">
            <summary>
            查找当前项目中指定类型的资源
            </summary>
            <param name="assetType">资源类型</param>
            <param name="searchInFolder">指定的查找目录</param>
            <returns>所有找到的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.FindAssets(System.String,System.String,System.Boolean)">
            <summary>
            查找当前项目中的指定资源
            具体实现为调用 AssetDatabase.FindAssets 并将全字匹配的结果转换成资源路径返回
            </summary>
            <param name="filter">过滤器，可为资源名，也可以为包含扩展的完整文件名</param>
            <param name="searchInFolder">指定的查找目录</param>
            <param name="isWholeMatch">是否使用全字匹配</param>
            <returns>所有找到的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.FindAssets(EFilterAssetType,System.String[])">
            <summary>
            查找当前项目中指定类型的资源
            </summary>
            <param name="assetType">资源类型</param>
            <param name="searchInFolders">指定的查找目录</param>
            <returns>所有找到的资源路径</returns>
        </member>
        <member name="M:MUEditorUtility.FindAssetByExt(System.String,System.String)">
            <summary>
            查找当前项目中的指定后缀名资源
            </summary>
            <param name="ext">后缀名</param>
            <param name="searchInFolder">指定的查找目录</param>
            <returns>第一个找到的资源路径，未找到时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.UnloadAsset(UnityEngine.Object)">
            <summary>
            从内存中卸载资源
            </summary>
            <param name="toUnloadAsset">待卸载的资源</param>
        </member>
        <member name="M:MUEditorUtility.LoadAssetByName``1(System.String,System.String)">
            <summary>
            通过名称加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="assetName">资源名称</param>
            <param name="searchInFolder">指定的搜索目录</param>
            <returns>加载得到的资源</returns>
        </member>
        <member name="M:MUEditorUtility.GetConfigTableName(System.String)">
            <summary>
            获取配置表的实际名称（提取 “｜” 后面的实际表名）
            </summary>
            <param name="tableName">原始表名</param>
            <returns>配置表实际名称</returns>
        </member>
        <member name="M:MUEditorUtility.LoadFromXML``1(System.String,System.Boolean)">
            <summary>
            从XML文件中加载数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="xmlFilePath">XML文件路径</param>
            <param name="createDefaultWhenFailed">加载失败时是否创建默认对象</param>
            <returns>加载得到的对象，加载失败时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.SaveToXML``1(System.String,``0)">
            <summary>
            将数据保存到XML文件
            </summary>
            <param name="xmlFilePath">XML文件路径</param>
            <param name="data">需要保存的数据</param>
        </member>
        <member name="M:MUEditorUtility.DeserializeFromXMLString``1(System.String,System.Boolean)">
            <summary>
            从XML字符串中反序列化生成数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="str">XML字符串</param>
            <param name="createDefaultWhenFailed">反序列化失败时是否创建默认对象</param>
            <returns>反序列化得到的对象，失败时返回空</returns>
        </member>
        <member name="M:MUEditorUtility.SerializeToXMLString``1(``0)">
            <summary>
            将数据序列化为XML字符串
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">待序列化的数据</param>
            <returns>序列化得到的字符串</returns>
        </member>
        <member name="T:MUEngine.Story.IDragTarget">
            <summary>
            拖拽目标接口
            用于在编辑器中进行相关绘制
            </summary>
        </member>
        <member name="P:MUEngine.Story.IDragTarget.Start">
            <summary>
            起始帧
            </summary>
        </member>
        <member name="P:MUEngine.Story.IDragTarget.End">
            <summary>
            结束帧
            </summary>
        </member>
    </members>
</doc>
