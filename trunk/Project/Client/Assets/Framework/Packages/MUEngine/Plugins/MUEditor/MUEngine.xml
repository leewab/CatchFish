<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MUEngine</name>
    </assembly>
    <members>
        <member name="T:MUUtility">
            <summary>
            通用辅助工具类
            </summary>
        </member>
        <member name="M:MUUtility.GetNameWithoutExtension(System.String)">
            <summary>
            获取不带扩展名的名称
            </summary>
            <param name="name">原始名称</param>
            <returns>不带扩展名的名称</returns>
        </member>
        <member name="M:MUUtility.GetNameWithExtension(System.String,System.String)">
            <summary>
            获取带扩展名的完整名称
            </summary>
            <param name="name">名称</param>
            <param name="extension">扩展名</param>
            <returns>带扩展名的完整名称</returns>
        </member>
        <member name="M:MUUtility.FormatRotation(UnityEngine.Vector3)">
            <summary>
            对向量进行格式化，使其符合标准的旋转格式（-180度 ~ +180度）
            </summary>
            <param name="rotation">需要格式化的旋转</param>
        </member>
        <member name="M:MUUtility.GetGroundPosition(UnityEngine.Vector3,System.Single)">
            <summary>
            获取一个点对应在地面上的位置
            </summary>
            <param name="originPosition">原始位置</param>
            <param name="yOffset">垂直方向上的偏移量</param>
            <returns>对应地面上的位置</returns>
        </member>
        <member name="M:MUUtility.GetUpGroundPosition(UnityEngine.Vector3)">
            <summary>
            获取一个点对应在地面稍偏上的位置（提高0.02米）
            </summary>
            <param name="originPosition">原始位置</param>
            <returns>对应地面稍偏上的位置</returns>
        </member>
        <member name="M:MUUtility.GetGroundPositionAndRet(System.Boolean@,UnityEngine.Vector3,System.Single)">
            <summary>
            获取一个点对应在地面上的位置，并附带是否命中的返回值
            </summary>
            <param name="isHit">是否命中的返回结果</param>
            <param name="originPosition">原始位置</param>
            <param name="yOffset">垂直方向上的偏移量</param>
            <returns>对应地面上的位置</returns>
        </member>
        <member name="M:MUUtility.GetUpGroundPositionRaiseTry(UnityEngine.Vector3)">
            <summary>
            获取一个点对应在地面稍偏上的位置（提高0.02米），如果没有命中地面，会提高高度多尝试一次
            </summary>
            <param name="originPosition">原始位置</param>
            <returns>对应地面稍偏上的位置</returns>
        </member>
        <member name="M:MUUtility.ScreenCenterToGroundPosition(System.Single)">
            <summary>
            将当前屏幕中心转换为对应在地面上的位置（仅在编辑器模式下使用）
            </summary>
            <param name="yOffset">垂直方向上的偏移量</param>
            <returns>对应地面上的位置</returns>
        </member>
        <member name="M:MUUtility.ScreenCenterToUpGroundPosition">
            <summary>
            将当前屏幕中心转换为对应在地面上稍偏上的位置（提高0.01米；仅在编辑器模式下使用）
            </summary>
            <returns>对应地面稍偏上的位置</returns>
        </member>
        <member name="F:MUUtility.cachedAllTypes">
            <summary>
            缓存的保存了所有类型的列表
            </summary>
        </member>
        <member name="M:MUUtility.GetAllTypes">
            <summary>
            获取所有程序集中的所有类型
            </summary>
            <returns>所有程序集中的所有类型</returns>
        </member>
        <member name="M:MUUtility.GetAllTypesWithAttribute(System.Type)">
            <summary>
            获取所有带有指定特性的类型
            </summary>
            <param name="attributeType">指定的特性的类型</param>
            <returns>所有带有指定特性的类型</returns>
        </member>
        <member name="M:MUUtility.UTF8ToBase64(System.String)">
            <summary>
            将UTF8编码的文本换为Base64编码的文本
            </summary>
            <param name="utf8Text">原始UTF8文本</param>
            <returns>转换后的Base64文本</returns>
        </member>
        <member name="M:MUUtility.Base64ToUTF8(System.String)">
            <summary>
            将Base64编码的文本转换为UTF8编码的文本
            </summary>
            <param name="base64Text">原始Base64文本</param>
            <returns>转换后的UTF8文本</returns>
        </member>
        <member name="M:MUUtility.SafeInvoke(System.Action)">
            <summary>
            自带判空处理的Action的Invoke方法
            </summary>
            <param name="action">需要Invoke的Action</param>
        </member>
        <member name="M:MUUtility.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            获取一个控件。如游戏对象身上不存在，则添加一个控件。
            </summary>
            <typeparam name="T">控件类型</typeparam>
            <param name="gameObj">游戏对象</param>
            <returns>控件</returns>
        </member>
        <member name="M:MUUtility.ComputeMD5(System.String)">
            <summary>
            计算文件的MD5校验码
            </summary>
            <param name="fullPath">文件的完整路径</param>
            <returns>MD5校验码。计算失败时返回空</returns>
        </member>
        <member name="M:MUUtility.GetNodePath(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            获取GameObject节点相对于它的根节点的完整路径
            </summary>
            <param name="root">根节点</param>
            <param name="node">需要获取路径的节点</param>
            <returns>完整路径</returns>
        </member>
        <member name="M:MUUtility.GetNodePath(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            获取Transform节点相对于它的根节点的完整路径
            </summary>
            <param name="root">根节点</param>
            <param name="node">需要获取路径的节点</param>
            <returns>完整路径</returns>
        </member>
        <member name="M:MUUtility.GetRootGameObjects">
            <summary>
            获取场景中的根游戏对象
            </summary>
            <returns>场景中的根游戏对象</returns>
        </member>
        <member name="M:MUUtility.TraverseGameObject(UnityEngine.GameObject,System.Action{UnityEngine.GameObject},System.Boolean)">
            <summary>
            遍历游戏对象中的每一个节点
            </summary>
            <param name="root">入口根节点</param>
            <param name="action">遍历时执行的操作</param>
            <param name="isBottomUp">遍历时是否从叶子节点开始</param>
        </member>
        <member name="M:MUUtility.FindChildByName(UnityEngine.Transform,System.String,System.Boolean)">
            <summary>
            通过名称查找子节点
            </summary>
            <param name="searchEntry">查找入口</param>
            <param name="nodeName">节点名称</param>
            <param name="ignoreCase">是否忽略大小写差异</param>
            <returns>子节点。未找到时返回空</returns>
        </member>
        <member name="M:MUUtility.FindChildByName(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            通过名称查找子节点
            </summary>
            <param name="searchEntry">查找入口</param>
            <param name="nodeName">节点名称</param>
            <param name="ignoreCase">是否忽略大小写差异</param>
            <returns>子节点。未找到时返回空</returns>
        </member>
        <member name="T:MUEngine.Common.ResourcePreloader">
            <summary>
            通用资源预加载器
            可用于同时加载多个资源，并在全部加载完成时触发回调
            </summary>
        </member>
        <member name="M:MUEngine.Common.ResourcePreloader.Create(System.Collections.Generic.List{System.String})">
            <summary>
            创建新的预加载器
            </summary>
            <param name="resourceList">待加载资源列表</param>
            <returns>预加载器。如果待加载列表为空的话，返回空</returns>
        </member>
        <member name="P:MUEngine.Common.ResourcePreloader.IsLoadFinished">
            <summary>
            加载是否已经完成
            </summary>
        </member>
        <member name="F:MUEngine.Common.ResourcePreloader.toLoadList">
            <summary>
            待加载列表
            </summary>
        </member>
        <member name="M:MUEngine.Common.ResourcePreloader.StartLoad(System.Action)">
            <summary>
            开始加载
            </summary>
            <param name="loadedCallback">加载完成的回调</param>
        </member>
        <member name="M:MUEngine.Implement.MUCurvController.FindIndexByTime(System.Single,System.Int32@,System.Int32@)">
            <summary>
            根据时间查找关键帧Index
            </summary>
            <param name="t">时间</param>
            <param name="left">左方关键帧Idx</param>
            <param name="right">右方关键帧Idx</param>
            <returns>查找结果</returns>
        </member>
        <member name="M:MUEngine.Implement.GOECameraControllerComponent.AdjustTargetHeight(System.Single)">
            <summary>
            target height from default to default+offset about distance
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimOpCacheData.StoryPlayInFixedTime(System.String,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimOpCacheData.StoryCrossFadeInFixedTime(System.String,System.Single,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="transition_duration"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="T:MUEngine.Implement.GOEActorAnimPlayer">
            <summary>
            角色动画播放器
            </summary>
        </member>
        <member name="P:MUEngine.Implement.GOEActorAnimPlayer.OnAniEventFunc">
            <summary>
            动画事件回调
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.OnAniEvent(System.String)">
            <summary>
            动画事件回调
            </summary>
            <param name="event_name"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.PreloadAnim(System.Int32,System.Boolean,System.Action{System.Boolean,UnityEngine.AnimationClip[]},System.Boolean)">
            <summary>
            预先加载动画
            </summary>
            <param name="trigger_hash"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.PreloadAnims(System.String[],System.Boolean,System.Action{System.Boolean,UnityEngine.AnimationClip[]},System.Boolean)">
            <summary>
            预加载动画列表
            </summary>
            <param name="needload_anis"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.StoryPlay(System.String,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="normalized_time"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.StoryPlayInFixedTime(System.String,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.StoryCrossFadeInFixedTime(System.String,System.Single,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="transition_duration"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.PlayAnimByAnimator(System.Int32)">
            <summary>
            播放动画
            这个操作是排队的
            </summary>
            <param name="name_hash"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.LoadAndPlayNextAnim">
            <summary>
            加载并播放下一段动画
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayer.CancelAction(System.Single)">
            <summary>
            撤销当前播放动画
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mActor">
            <summary>
            玩家角色
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mAnimator">
            <summary>
            动画状态机
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mLoader">
            <summary>
            加载器
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mToPlayAnis">
            <summary>
            待播放的动画列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mToPlayAni">
            <summary>
            即将要播放的动画
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mIsLoading">
            <summary>
            当前是否正在加载
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mAniNeedLoadData">
            <summary>
            动画加载数据
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mOnAniEventFunc">
            <summary>
            动画事件
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mReleased">
            <summary>
            角色部件动画播放器
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayer.mPauseTime">
            <summary>
            倒计时时间
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorAnimPlayerDelegate">
            <summary>
            用于处理角色动画模块还未初始化时，对动画模块进行调用的缓存封装
            </summary>
        </member>
        <member name="P:MUEngine.Implement.GOEActorAnimPlayerDelegate.OnAniEventFunc">
            <summary>
            动画事件回调
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayerDelegate.SetLayerWeight(System.Int32,System.Single)">
            <summary>
            设置layer weight
            </summary>
            <param name="layer"></param>
            <param name="weight"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayerDelegate.PreloadAnim(System.Int32,System.Boolean,System.Action{System.Boolean,UnityEngine.AnimationClip[]},System.Boolean)">
            <summary>
            预加载动画
            </summary>
            <param name="trigger_hash"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayerDelegate.StoryPlay(System.String,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="normalized_time"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayerDelegate.StoryPlayInFixedTime(System.String,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayerDelegate.StoryCrossFadeInFixedTime(System.String,System.Single,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="transition_duration"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayerDelegate.PlayAnimByAnimator(System.Int32)">
            <summary>
            播放动画
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimPlayerDelegate.CancelAction(System.Single)">
            <summary>
            撤销动作
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayerDelegate.mOnAniEventFunc">
            <summary>
            动画事件回调
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimPlayerDelegate.mOpCacheDataList">
            <summary>
            操作缓存
            </summary>
        </member>
        <member name="M:MUEngine.Implement.BatchLoadingGroup.AddPart(MUEngine.EPlayerElement)">
            <summary>
            往当前加载组放入一个部位
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.Implement.BatchLoadingGroup.RemovePart(MUEngine.EPlayerElement)">
            <summary>
            从当前加载组移除一个部位
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.Implement.BatchLoadingGroup.ContainsPart(MUEngine.EPlayerElement)">
            <summary>
            当前加载组是否存在某个部位
            </summary>
            <param name="part"></param>
            <returns></returns>
        </member>
        <member name="F:MUEngine.Implement.BatchLoadingGroup.mLoadingParts">
            <summary>
            加载中部位列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.BatchLoadingGroup.mLoadedParts">
            <summary>
            加载完毕部位列表
            </summary>
        </member>
        <member name="M:MUEngine.Implement.BatchLoadingVisibleManager.OnReqAddMesh(MUEngine.EPlayerElement)">
            <summary>
            当请求添加mesh的回调
            </summary>
            <param name="part"></param>
        </member>
        <member name="F:MUEngine.Implement.BatchLoadingVisibleManager.mInBatchLoading">
            <summary>
            当前是否处于成批加载中
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorMakeFaceTexHelper.ChangeFace(FaceMaker.FaceTexData,FaceMaker.FaceTexDataKey[],UnityEngine.Color[],UnityEngine.Texture2D,UnityEngine.Material,UnityEngine.Material,System.Int32,System.Action{MUEngine.BorrowRenderTexture})">
            <summary>
            生成脸部纹理
            </summary>
            <param name="tex_dat"></param>
            <param name="parts"></param>
            <param name="colors"></param>
            <param name="source"></param>
            <param name="cpyface_mat"></param>
            <param name="cpyimg_mat"></param>
            <param name="callback"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAsyncRenderData.mReleased">
            <summary>
            是否已经被卸载
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAsyncRenderData.mMeshExportInfo">
            <summary>
            角色mesh导出信息
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorInstantRenderData.mMeshExportInfo">
            <summary>
            角色mesh导出信息
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorComponentMultiSubMesh">
            <summary>
            包含多个sub mesh的mesh
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentMultiSubMesh.OnResReady">
            <summary>
            全部子mesh加载完毕
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentMultiSubMesh.SwitchMaterial(System.Int32)">
            <summary>
            切换材质
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentMultiSubMesh.SetShadowMode(UnityEngine.Rendering.ShadowCastingMode,System.Boolean)">
            <summary>
            设置阴影信息
            </summary>
            <param name="cast_mode"></param>
            <param name="receive_shadow"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentMultiSubMesh.mSubMeshList">
            <summary>
            子mesh列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentsDelegate.mComponentListeners">
            <summary>
            模型模块监听
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentsDelegate.mMeshMask">
            <summary>
            已加mesh的列表
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorComponentSkinnedSubMesh">
            submesh系列的类，不缓存任何数据，只做直接的属性设置，缓存功能由外边去做
             <summary>
             skin mesh 子mesh接口
             </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.CreateRenderInfo">
            <summary>
            创建渲染信息
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.InitMaterialData">
            <summary>
            初始化材质列表数据
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.SwitchMaterial(System.Int32)">
            <summary>
            切换材质
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.SetShadowMode(UnityEngine.Rendering.ShadowCastingMode,System.Boolean)">
            <summary>
            设置阴影模式
            </summary>
            <param name="cast_mode"></param>
            <param name="receive_shadow"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.GetRendersByLOD(MUEngine.GOEActorElemLodLevel,System.Action{System.Boolean,MUEngine.GOEActorElemLodLevel,System.Collections.Generic.List{UnityEngine.Renderer}})">
            lod相关逻辑
            <summary>
            获得renders
            </summary>
            <param name="lod_lvl"></param>
            <param name="callback"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.mMeshExportInfo">
            <summary>
            角色mesh导出信息
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.mHighMaterialData">
            <summary>
            高模材质列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.mLodMaterialData">
            <summary>
            低模材质列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.mResReady">
            <summary>
            资源是否准备完毕
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.mMeshUpdateCallback">
            <summary>
            mesh有更新的回调
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.mMeshLoadedCallback">
            <summary>
            第一个可用mesh加载上来的回调
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentSkinnedSubMesh.mSelfCallback">
            <summary>
            父的加载indicator
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorComponentStaticSubMesh">
            <summary>
            static mesh，挂到挂点上的mesh
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentStaticSubMesh.CreateRenderInfo(System.Action)">
            <summary>
            创建渲染信息
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentStaticSubMesh.InitMaterialData">
            <summary>
            初始化材质数据
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentStaticSubMesh.SwitchMaterial(System.Int32)">
            <summary>
            切换材质
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentStaticSubMesh.SetShadowMode(UnityEngine.Rendering.ShadowCastingMode,System.Boolean)">
            <summary>
            设置阴影信息
            </summary>
            <param name="cast_mode"></param>
            <param name="receive_shadow"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentStaticSubMesh.GetRendersByLOD(MUEngine.GOEActorElemLodLevel,System.Action{System.Boolean,MUEngine.GOEActorElemLodLevel,System.Collections.Generic.List{UnityEngine.Renderer}})">
            <summary>
            获得某个等级的lod的所有render
            </summary>
            <param name="lod_level"></param>
            <param name="callback"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentStaticSubMesh.mHighRenderList">
            <summary>
            render列表
            </summary>
        </member>
        <member name="T:MUEngine.Implement.IGOEActorComponentSubMesh">
            <summary>
            子mesh接口
            </summary>
        </member>
        <member name="P:MUEngine.Implement.IGOEActorComponentSubMesh.IsResReady">
            <summary>
            资源是否准备完毕
            </summary>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorComponentSubMesh.WalkRenderers``1(MUEngine.GOEActorElemLodLevel,System.Action{UnityEngine.Renderer,``0},``0)">
            <summary>
            遍历renders
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lod_lvl"></param>
            <param name="callback"></param>
            <param name="val"></param>    
        </member>
        <member name="M:MUEngine.Implement.IGOEActorComponentSubMesh.SwitchMaterial(System.Int32)">
            <summary>
            切换材质
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorComponentSubMesh.SetShadowMode(UnityEngine.Rendering.ShadowCastingMode,System.Boolean)">
            <summary>
            设置阴影等级
            </summary>
            <param name="cast_mode"></param>
            <param name="receive_shadow"></param>
        </member>
        <member name="M:MUEngine.Implement.MUNVChangePlayerComponent.SetData(MUEngine.Implement.MUNVChangeACTComponent)">
            <summary>
            传入设置数据，返回数据Idx，用于Act销毁特定数据
            </summary>
            <returns></returns>
        </member>
        <member name="F:MUEngine.Implement.MUChangeMaterialBase.isBlend">
            <summary>
            是否半透明，新的透明做法是叠加上去的材质球
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUChangeMaterialBase.isAdd">
            <summary>
            是否是add，nv这种blend one one的，直接在sharedMaterials里面加材质就行
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUChangeMaterialBase.isUseAsDefaultMaterial">
            <summary>
            是否作为默认材质，也即其他效果用完后是否还原会这个材质，如换色，捏脸
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUChangeMaterialBase.needCacheMaterial">
            <summary>
            用完之后是否需要缓存。如受击等高频使用的需要缓存，低频使用的不要缓存，要释放
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterialBase.Init(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,MUEngine.Implement.MUChangeMaterialType,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Boolean,System.Boolean)">
            <summary>
            初始化换材质逻辑类
            </summary>
            <param name="r">Renderer组件</param>
            <param name="index">需要改的材质在Renderer的sharedMaterial中的id</param>
            <param name="_changeMaterialType">类型</param>
            <param name="isAdd">此修改类型是直接修改材质shader，还是在sharedMaterial中加一个add的材质球</param>
            <param name="_needCacheMaterial">是否需要缓存，高频缓存，低频不缓存</param>
            <param name="_isUseAsDefaultMaterial">是否作为默认材质，基础修改如换色会作为默认材质</param>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterialBase.OnUpdate(System.Single)">
            <summary>
            update
            </summary>
            <param name="deltatime"></param>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterialBase.RefreshLifeTime(System.Single)">
            <summary>
            刷新生命周期
            </summary>
            <param name="lifeCircle"></param>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterialBase.InstantiateMaterial">
            <summary>
            不同的类型各自实例化材质球的逻辑，如UI材质队列是从脚本里取材质来实例化，其他大部分都是实例化当前的sharedMaterial
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterialBase.DoClear">
            <summary>
            清除的逻辑
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterialBase.DoChange">
            <summary>
            所有互斥关系，子类重写这个。比如溶解的时候先清除NV和HIT等等
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Discoloration.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Default.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_ChangeMat.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Dissolve.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_HighLightFace.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Hit.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Blend.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Lurk.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Outline.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_NV.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUChangeMaterial_Reborn.GetInstance(MUEngine.Implement.MUActorChangeMaterialMgr,UnityEngine.Renderer,System.Int32,System.Single)">
            <summary>
            静态方法不能抽象，所有子类自己写吧。这里主要的意义在于定义不同类型调用init的参数
            </summary>
            <param name="r"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUActorChangeMaterialMgr.ResetProperty">
            <summary>
            Reset properties for reuse.
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActorChangeMaterialMgr.CheckNull">
            <summary>
            检查currentChangeMaterialList和cacheMaterial中以及Renderer上的sharedMaterials是否有空的，并清除
            </summary>
        </member>
        <member name="M:MUEngine.Implement.PartLoadGroup.AddPart(MUEngine.EPlayerElement)">
            <summary>
            添加一个部位
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.Implement.PartLoadGroup.RemovePart(MUEngine.EPlayerElement)">
            <summary>
            删除一个部位
            </summary>
            <param name="part"></param>
        </member>
        <member name="F:MUEngine.Implement.PartLoadGroup.mAllLoaded">
            <summary>
            所有都加载完毕
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorResLoadStatisticComponent.OnRemoveMesh(MUEngine.EPlayerElement)">
            <summary>
            part被remove的回调
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorResLoadStatisticComponent.OnAddMesh(MUEngine.EPlayerElement)">
            <summary>
            添加part的回调
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorResLoadStatisticComponent.BeginPartLoadStatistic(System.Action)">
            <summary>
            开始统计
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorResLoadStatisticComponent.EndPartLoadStatistic">
            <summary>
            结束统计
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorResLoadStatisticComponent.mPartLoadStatisticsBegin">
            <summary>
            部位加载统计开始标记
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEPartEffLayerCtrlEntityComp">
            <summary>
            控制特效层级的组件
            </summary>
        </member>
        <member name="F:MUEngine.Implement.PartVisibleFlag.LogicPartVis">
            <summary>
            当前部位客户端要求的显隐
            </summary>
        </member>
        <member name="F:MUEngine.Implement.PartVisibleFlag.GroupCreate">
            <summary>
            整组加载时的显隐标记
            </summary>
        </member>
        <member name="F:MUEngine.Implement.PartVisibleFlag.WeaponVisibleACT">
            <summary>
            act
            </summary>
        </member>
        <member name="F:MUEngine.Implement.PartVisibleFlag.Story">
            <summary>
            剧情
            </summary>
        </member>
        <member name="F:MUEngine.Implement.PartVisibleFlag.PartVisibleFlagsMax">
             <summary>
            在此之上的都是part visible的bit
             </summary>
        </member>
        <member name="F:MUEngine.Implement.PartVisibleFlag.PartEffect">
            <summary>
            部位特效
            </summary>
        </member>
        <member name="M:MUEngine.Implement.PartVisibleExecutor.ApplyVisible(MUEngine.EPlayerElement,System.Boolean)">
            <summary>
            应用visible到part上
            </summary>
            <param name="part"></param>
            <param name="vis"></param>
        </member>
        <member name="T:MUEngine.Implement.GOEPartRenderVisServiceComp">
            <summary>
            角色某个部位的显隐组件
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEPartRenderVisServiceComp.OnSetEntityRenderVisible(System.Boolean)">
            <summary>
            角色entity的 render visible发生变化时调用
            </summary>
            <param name="vis"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEPartRenderVisServiceComp.ClearPartHandler(MUEngine.EPlayerElement)">
            <summary>
            移除某个部位下的所有handler
            </summary>
            <param name="part"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEPartRenderVisServiceComp.mVisibleFlags">
            <summary>
            部位的显隐flag
            
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEPartRenderVisServiceComp.mEntityVis">
            <summary>
            entity的visible
            </summary>
        </member>
        <member name="P:MUEngine.Implement.ILayerHandler.Part">
            <summary>
            设置part
            </summary>
        </member>
        <member name="M:MUEngine.Implement.ILayerHandler.SetLayer(System.Int32)">
            <summary>
            设置layer
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:MUEngine.Implement.ILayerHandler.SetOrderInLayer(System.Int32)">
            <summary>
            设置order in layer
            </summary>
            <param name="order_inlayer"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.AddPlayerComponent(MUEngine.EPlayerElement,System.String)">
            <summary>
            添加部位
            </summary>
            <param name="type"></param>
            <param name="resName"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.RemovePlayerComponent(MUEngine.EPlayerElement)">
            <summary>
            移除部位
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.AddComponentEffect(MUEngine.EPlayerElement,System.String,System.String)">
            <summary>
            添加装备特效
            </summary>
            <param name="type"></param>
            <param name="res_name"></param>
            <param name="bd_pt"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.DelComponentEffect(MUEngine.EPlayerElement,System.String)">
            <summary>
            删除装备特效
            </summary>
            <param name="type"></param>
            <param name="res_name"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.ClearComponentEffect(MUEngine.EPlayerElement)">
            <summary>
            删除装备特效
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.ClearComponentEffectByBindPointName(MUEngine.EPlayerElement,System.String)">
            <summary>
            根据挂点 删除装备特效
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.RegistLayerHandler(MUEngine.Implement.ILayerHandler)">
            <summary>
            注册layer handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMeshManageServiceComp.UnregistLayerHandler(MUEngine.Implement.ILayerHandler)">
            <summary>
            注销layer handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMeshManageServiceComp.mLayerMgr">
            <summary>
            layer管理器
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMeshManageServiceComp.mEffectMgr">
            <summary>
            特效管理器
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActorEffectMgr.DelComponentEffect(MUEngine.EPlayerElement,System.String)">
            <summary>
            删除组件特效
            </summary>
            <param name="type"></param>
            <param name="res_name"></param>
        </member>
        <member name="M:MUEngine.Implement.MUActorEffectMgr.ClearComponentEffect(MUEngine.EPlayerElement)">
            <summary>
            清空某个部位的所有特效
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.Implement.MUActorEffectMgr.ClearComponentEffectByBindPointName(MUEngine.EPlayerElement,System.String)">
            <summary>
            根据挂点 清空某个部位的所有特效
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.Implement.MUActorEffectMgr.RegistEffectID(MUEngine.EPlayerElement,System.Int32,System.String)">
            <summary>
            注册特效ID
            </summary>
            <param name="part"></param>
            <param name="id"></param>
            <param name="bindPointName">挂点名称</param>
        </member>
        <member name="M:MUEngine.Implement.MUActorEffectMgr.UnregistEffectID(MUEngine.EPlayerElement,System.Int32)">
            <summary>
            注销特效ID
            </summary>
            <param name="part"></param>
            <param name="id"></param>
        </member>
        <member name="T:MUEngine.Implement.MUActorLayerMgr">
            <summary>
            角色mesh layer管理器
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActorLayerMgr.RegistLayerHandler(MUEngine.Implement.ILayerHandler)">
            <summary>
            注册layer handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.Implement.MUActorLayerMgr.UnregistLayerHandler(MUEngine.Implement.ILayerHandler)">
            <summary>
            注销layer handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="F:MUEngine.Implement.MUActorLayerMgr.mLayer">
            <summary>
            所有角色身上的mesh所处的layer,-1为不动
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUActorLayerMgr.mOrderInLayer">
            <summary>
            所有
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorElementColorNewLogic">
            <summary>
            颜色修改逻辑
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementColorNewLogic.IsSupportColor">
            <summary>
            当前部位是否支持着色
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementColorNewLogic.ApplyColor(UnityEngine.Color[])">
            <summary>
            更改颜色
            </summary>
            <param name="clrs"></param>
        </member>
        <member name="T:MUEngine.Implement.GOEActorMakeFaceLogic">
            <summary>
            捏脸管理器
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorMakeFaceLogic.MakeFace(FaceMaker.FaceType[],System.Single[],FaceMaker.FaceType)">
            <summary>
            执行捏脸
            </summary>
            <param name="tpl_name"></param>
            <param name="face_types"></param>
            <param name="strs"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorMakeFaceLogic.ChangeFaceTex(FaceMaker.FaceTexDataKey[],UnityEngine.Color[],System.Int32)">
            <summary>
            换肤
            </summary>
            <param name="keys"></param>
            <param name="clrs"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorMakeFaceLogic.ChangeSkinColor(System.Single,UnityEngine.Color)">
            <summary>
            换肤色
            </summary>
            <param name="intensity"></param>
            <param name="clr"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorMakeFaceLogic.mHighMesh">
            <summary>
            当前是否是高模
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorElementMakeFaceComponent">
            <summary>
            element make face componente
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorSelfHoldRenders.DisableAllShadows">
            <summary>
            禁用所有高级阴影
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorSelfHoldRenders.GetRendersByLOD(MUEngine.GOEActorElemLodLevel,System.Action{System.Boolean,MUEngine.GOEActorElemLodLevel,System.Collections.Generic.List{UnityEngine.Renderer}})">
            <summary>
            获得lod对应的renders
            </summary>
            <param name="lod_level"></param>
            <param name="callback"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorSelfHoldRenders.mSelfHoldRenderers">
            <summary>
            当前角色所有自有模型render
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorSelfHoldRenders.mSelfHoldOtherRenders">
            <summary>
            当前角色自有模型render，特效部分
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorStaticSubMeshAniPlayer">
            <summary>
            sub mesh动画播放器
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOERootObjVisComponent">
            <summary>
            通过显隐根节点的方式来显隐当前entity
            </summary>
        </member>
        <member name="P:MUEngine.Implement.GOERootObjVisComponent.AutoDestroyOnObj">
            <summary>
            当object被销毁时，当前component也一并被销毁
            </summary>
        </member>
        <member name="P:MUEngine.Implement.GOESelfHoldVisComponent.AutoDestroyOnObj">
            <summary>
            当object被销毁时，当前component也一并被销毁
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOERendererVisComponent">
            <summary>
            跟随主entity显隐而显隐的组件
            </summary>
        </member>
        <member name="P:MUEngine.Implement.GOERendererVisComponent.AutoDestroyOnObj">
            <summary>
            当object被销毁时，当前component也一并被销毁
            </summary>
        </member>
        <member name="M:MUEngine.Implement.AnimatorOverrideDebug.BuildOverrides">
            <summary>
            获取override数据
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorAnimModuleCache">
            <summary>
            动画模块缓存
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimModuleCache.RequireAnimCacheData">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimModuleCache.RecycleAnimCacheData(MUEngine.Implement.GOEActorAnimOpCacheData)">
            <summary>
            回收
            </summary>
            <param name="dat"></param>
        </member>
        <member name="T:MUEngine.Implement.GOEActorComponentsMgr">
            <summary>
            角色部位管理器
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.OnDestroy">
            <summary>
            销毁回调
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.SaveSelfHoldMeshes">
            <summary>
            记录所有的自有mesh
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.AddPlayerComponent(MUEngine.EPlayerElement,System.String)">
            <summary>
            设置角色装备
            </summary>
            <param name="type">position</param>
            <param name="resName">targe name</param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.GetPlayerComponent(MUEngine.EPlayerElement)">
            <summary>
            获得角色装备
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.RemovePlayerComponent(MUEngine.EPlayerElement)">
            <summary>
            移除角色装备
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.ChangeSelfHoldMeshColors(UnityEngine.Color[])">
            <summary>
            设置自有mesh的身体颜色
            </summary>
            <param name="color"></param>
            <param name="indices"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.ApplyMaterialToAllParts">
            <summary>
            根据当前索引重刷材质，不论部位
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.SetMaterialByIdx(System.Int32)">
            <summary>
            根据索引设置材质，不论部位
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorComponentsMgr.SetShadowLevel(MUEngine.ShadowLevel)">
            <summary>
            设置阴影质量
            0: 无
            1：最高
            2：最低
            </summary>
            <param name="level"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentsMgr.mOnComponentsLoadedFunc">
            <summary>
            mesh加载完毕回调
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentsMgr.mSelfHoldMaterials">
            <summary>
            当前角色所有自有模型材质(不包括加载上来的装备)
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentsMgr.VisibleFlag.RenderVisible">
            <summary>
            当前整体的可见性
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentsMgr.VisibleFlag.CreateVisible">
             <summary>
            在创建角色，mesh加载完毕之前，暂时让模型隐藏 
             </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorComponentsMgr.mShadowController">
            <summary>
            可见性标记
            </summary>
        </member>
        <member name="T:MUEngine.Implement.GOEActorElementLoader">
            <summary>
            角色模型加载器
            </summary>
        </member>
        <member name="P:MUEngine.Implement.GOEActorElementLoader.IsLoading">
            <summary>
            角色装备是否正在加载中
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.AddPlayerComponent(MUEngine.EPlayerElement,System.String)">
            <summary>
            设置角色装备
            </summary>
            <param name="type">position</param>
            <param name="resName">targe name</param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.GetPlayerComponent(MUEngine.EPlayerElement)">
            <summary>
            获得当前已经加载完毕的角色装备
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.AddPlayerComponentImpl(MUEngine.EPlayerElement,System.String)">
            <summary>
            设置角色装备
            </summary>
            <param name="type"></param>
            <param name="resName"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.CheckNeedLoadRes(MUEngine.EPlayerElement,System.String)">
            <summary>
            检查当前是否需要重新加载资源
            </summary>
            <param name="type"></param>
            <param name="resName"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.CheckLoadedResMatch(MUEngine.EPlayerElement,System.String)">
            <summary>
            检查已经加载完毕的装备名字是否匹配
            </summary>
            <param name="type"></param>
            <param name="resName"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.RemovePlayerComponent(MUEngine.EPlayerElement)">
            <summary>
            移除角色装备
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.SetMaterialByIdx(System.Int32)">
            <summary>
            切换材质，所有部位
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.SetShadowLevel(MUEngine.ShadowLevel)">
            <summary>
            设置阴影质量
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.ApplyShadowLevel(MUEngine.EPlayerElement)">
            <summary>
            应用阴影
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorElementLoader.WalkElements_WithLoading(System.Action{MUEngine.Implement.MUActorElement})">
            <summary>
            遍历当前所有模型
            如果在loading队列中存在的部位，则对应部位的已加载完毕的模型则不再访问
            因为马上会被loading队列中的部位替换掉
            </summary>
            <param name="func"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorElementLoader.mPlayerComponentList">
            <summary>
            已加载完毕模型列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorElementLoader.mLoadingElements">
            <summary>
            角色模型加载列表，一个类型的部位一个
            列表中的内容全部都是加载中的模型
            </summary>        
        </member>
        <member name="F:MUEngine.Implement.GOEActorElementLoader.mMaterialIdx">
            <summary>
            当前使用材质
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorElementLoader.mShadowLevel">
            <summary>
            阴影质量
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorElementLoader.mLayer">
            <summary>
            模型mesh的layer
            </summary>
        </member>
        <member name="F:MUEngine.Implement.GOEActorElementLoader.mOnComponentsLoadedFunc">
            <summary>
            只要有一个mesh加载完毕，就会触发这个回调
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUActorElement.ComponentBindNames">
            <summary>
            部位名 对应part
            </summary>
        </member>
        <member name="P:MUEngine.Implement.MUActorElement.ParentEntity">
            <summary>
            父对象
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActorElement.InitRenderInfo">
            <summary>
            init mesh Render, gameobj and parent obj
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActorElement.UpdateRenderStateOnLoadDone">
            <summary>
            设置渲染状态
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActorElement.SetMaterialByIdx(System.Int32)">
            <summary>
            根据索引选择一个材质
            </summary>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.Implement.MUActorElement.SetShadowLevel(MUEngine.ShadowLevel)">
            <summary>
            设置阴影质量
            </summary>
            <param name="lvl"></param>
        </member>
        <member name="M:MUEngine.Implement.MUActorElement.updateShadowLevel">
            <summary>
            设置阴影等级
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActorElement.OnSubMeshUpdated">
            <summary>
            子mesh发生变化时的回调
            </summary>
        </member>
        <member name="P:MUEngine.Implement.IGOEActorAnimPlayer.OnAniEventFunc">
            <summary>
            动画事件回调函数
            </summary>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.OnEntityLoadDone(UnityEngine.Animator,MUEngine.Entity,System.Action)">
            <summary>
            角色加载完毕时调用
            </summary>
            <param name="ani"></param>
            <param name="actor"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.OnDestroy">
            <summary>
            角色被销毁时调用
            </summary>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.SetLayerWeight(System.Int32,System.Single)">
            <summary>
            设置layer weight
            </summary>
            <param name="layer"></param>
            <param name="weight"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.PreloadAnim(System.Int32,System.Boolean,System.Action{System.Boolean,UnityEngine.AnimationClip[]},System.Boolean)">
            <summary>
            预加载动画
            </summary>
            <param name="trigger_hash"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.PreloadStoryAnim(System.String,System.Action{UnityEngine.AnimationClip})">
            <summary>
            预加载剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.PlayAnimByAnimator(System.Int32)">
            <summary>
            播放动画
            </summary>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.CancelAction(System.Single)">
            <summary>
            撤销动作
            </summary>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.ResetAnimator">
            <summary>
            重置animator
            </summary>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.StoryPlay(System.String,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="normalized_time"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.StoryPlayInFixedTime(System.String,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.StoryCrossFadeInFixedTime(System.String,System.Single,System.Single)">
            <summary>
            播放剧情动画
            </summary>
            <param name="state_name"></param>
            <param name="transition_duration"></param>
            <param name="fixed_time"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.OnSetAnimatorEnable(System.Boolean)">
            <summary>
            设置显示
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.SetAnimatorEnabled(System.Boolean,MUEngine.Implement.ActorAnimatorEnableFlag)">
            <summary>
            设置animator是否禁用
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAnimPlayer.SetAnimatorPauseTime(System.Single)">
            <summary>
            设置animator停止时间
            </summary>
            <param name="enable"></param>
        </member>
        <member name="T:MUEngine.Implement.ActorAnimatorEnableFlag">
            <summary>
            animator禁用标记
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ActorAnimatorEnableFlag.RenderVisibleEnable">
            <summary>
            render visible导致的animator被disable
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ActorAnimatorEnableFlag.AnimationClipController">
            <summary>
            animation clip controller导致的animator被disable
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ActorAnimatorEnableFlag.MUActAnimation">
            <summary>
            MUActAnimation导致的animator禁用
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ActorAnimatorEnableFlag.MUActTimePause">
            <summary>
            定时暂停
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ActorAnimatorEnableFlag.CustomDisable">
            <summary>
            用户自定义disable
            </summary>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAni.GetNeedLoadAnimations(MUEngine.Implement.IActorAnimatorTriggerDataRuntime)">
            <summary>
            获得需要加载的动画
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.IGOEActorAni.Play(UnityEngine.Animator)">
            <summary>
            播放动画
            </summary>
            <param name="ani"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEActorTriggerAniDat.GetNeedLoadAnimations(MUEngine.Implement.IActorAnimatorTriggerDataRuntime)">
            <summary>
            获得需要加载的动画
            </summary>
            <param name="trigger_dat"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.GOEActorStateAniDat.GetNeedLoadAnimations(MUEngine.Implement.IActorAnimatorTriggerDataRuntime)">
            <summary>
            获得需要加载的动画
            </summary>
            <param name="trigger_dat"></param>
            <returns></returns>
        </member>
        <member name="T:MUEngine.Implement.GOEActorResourceLoadRegForDebug">
            <summary>
            调试用，用于注册哪些角色资源需要通过resources.load方式加载
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEActorAnimationLoader.LoadAniList(System.String[],System.Boolean,System.Action{System.Boolean,UnityEngine.AnimationClip[]},System.Boolean)">
            <summary>
            加载动画
            </summary>
            <param name="aniname"></param>
        </member>
        <member name="F:MUEngine.Implement.GOEActorAnimationLoader.mCache">
            <summary>
            加载上来的动画缓存
            </summary>
        </member>
        <member name="T:MUEngine.Implement.AnimationClipCache">
            <summary>
            动画缓存
            </summary>
        </member>
        <member name="M:MUEngine.Implement.AnimationClipCache.LoadAni(System.String,System.Boolean,System.Action{UnityEngine.AnimationClip})">
            <summary>
            加载动画
            </summary>
            <param name="ani_name"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.AnimationClipCache.LoadNewAni(System.String,System.Boolean,System.Action{UnityEngine.AnimationClip})">
            <summary>
            加载一个新动画
            </summary>
            <param name="ani_name"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.AnimationClipCache.IsInTransition">
            <summary>
            当前是否正在做状态转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.AnimationClipCache.PriorityUp(System.String)">
            <summary>
            提升在缓存中的优先级
            </summary>
            <param name="ani_name"></param>
        </member>
        <member name="M:MUEngine.Implement.AnimationClipCache.IsInLoadingList(System.String)">
            <summary>
            动画是否在加载队列中
            </summary>
            <param name="ani_name"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.AnimationClipCache.FindAniInLoadingList(System.String)">
            <summary>
            从加载队列中搜索动画
            </summary>
            <param name="ani_name"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.AnimationClipCache.ClearGarbage">
            <summary>
            清空垃圾箱
            </summary>
        </member>
        <member name="F:MUEngine.Implement.AnimationClipCache.mAni">
            <summary>
            
            </summary>
        </member>
        <member name="P:MUEngine.Implement.AniLoadingData.AniName">
            <summary>
            动画名
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActComponent.IsSupportEntity">
            <summary>
            检查当前act组件是否适配当前entity
            </summary>
            <returns></returns>
        </member>
        <member name="F:MUEngine.Implement.MUActSound.mNeedTargetActor">
            <summary>
            需要目标角色才能触发音效
            </summary>
        </member>
        <member name="T:MUEngine.Implement.MUACTTempData">
            <summary>
            缓存常用数据，避免重复加载（临时：先试试效果）
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.#ctor(MUEngine.Implement.MUEntityAct)">
            <summary>
            拷贝构造函数，只允许加载完毕的act执行拷贝构造函数
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.Replay">
            <summary>
            重新播放。本函数只在编辑器模式下使用
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.EditorStop">
            <summary>
            停止播放。本函数只在编辑器模式下使用
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.SetLocalTime(System.Single)">
            <summary>
            设置局部时间。本函数只在编辑器模式下使用
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.play">
            <summary>
            ACT资源加载完毕后执行播放
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.BeginPlay">
            <summary>
            开启播放act流程
            </summary>
            <param name="act_name"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.Pause">
            暂停act相关
             <summary>
             暂停act
             </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.Restart">
            <summary>
            恢复act播放
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAct.PauseWithTime(System.Single)">
            <summary>
            暂停act
            </summary>
            <param name="pause_time"></param>
        </member>
        <member name="T:MUEngine.Implement.MUEntityAct.PauseFlag">
            <summary>
            act暂停标记类型
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct.PauseFlag.ExternPause">
            <summary>
            外部通知暂停act
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct.PauseFlag.PauseWithTime">
            <summary>
            暂停一段时间 
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct.mIsPlaying">
            <summary>
            当前是否正在播放
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct.mListTarget">
            <summary>
            目标列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct._listComponent">
            <summary>
            act组件列表
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct.mPauseFlag">
            <summary>
            act暂停标记，0为不暂停
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct.mIgnoreTimePause">
            <summary>
            忽略带有计时的act暂停
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityAct.mACTLoader">
            <summary>
            act加载器
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActLoader.PreloadRuntimeResource(System.Action)">
            <summary>
            加载运行时资源
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUActLoader.ProcLoadRuntimeRes">
            <summary>
            加载运行时资源
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAttachComponent.OnLoadObj">
            <summary>
            将所有attach，在资源已经加载完毕之后绑定在骨骼上
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityAttachComponent.WalkAttaches(System.Action{MUEngine.Entity})">
            <summary>
            遍历attach
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityBindChain.setChainRotation">
            <summary>
            锁链挂点看向柱子位置，使锁链连接至柱子
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityBindChain.setChainRenderMaterial">
            <summary>
            设置锁链的shader状态
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityDropTo.StartDropTo(UnityEngine.Vector3,System.Single,System.Action,System.Single)">
            <summary>
            开始跳跃
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityEffectIndicationComponent.AddEffectIndication(System.String,System.String,System.Single,System.Boolean,System.Int32,System.Single)">
            <summary>
            add a circle or sector of indication effect
            </summary>
            <param name="name"></param>
            <param name="BindPoint"></param>
            <param name="time"></param>
            <param name="isCircle"></param>
            <param name="angel"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityEffectIndicationComponent.AddEffectIndication(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            add a rectangle of indication effect
            </summary>
            <param name="name"></param>
            <param name="BindPoint"></param>
            <param name="time"></param>
            <param name="width"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityForceFloat.StartFloatTo(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            开始浮空
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityJumpAndFlyTo.StartJumpFlyTo(MUEngine.Entity,System.Single,UnityEngine.Vector3,System.Single,System.Single,System.Action)">
            <summary>
            开始跳跃
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEEntityJumpMove.StartJumpMove(System.Single,System.Single,System.Single,UnityEngine.Vector3,System.Action{UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3},System.Action{UnityEngine.Vector3},System.Action{MUEngine.Entity,System.Int32})">
            <summary>
            开始跳跃
            </summary>
            <param name="speedY"></param>
            <param name="g"></param>
            <param name="speed"></param>
            <param name="dir"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEEntityJumpMove.ChangeJumpDir(UnityEngine.Vector3,System.Action{UnityEngine.Vector3,UnityEngine.Vector3})">
            <summary>
            跳跃过程中改变方向
            </summary>
            <param name="dir"></param>
            <param name="jumpDirChange"></param>
        </member>
        <member name="M:MUEngine.Implement.GOEEntityJumpMove.ChangeJumpSpeed(System.Single)">
            <summary>
            修改水平速度
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEEntityJumpMove.GetTheoryDownPosition">
            <summary>
            获取理论到达的位置
            </summary>
        </member>
        <member name="M:MUEngine.Implement.GOEEntityJumpMove.TryGetReasonablePosition">
            <summary>
             获得跳跃停止的位置
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityJumpTo.StartJumpTo(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            开始跳跃
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMaterialComponent.InitAttachMeshMaterialImpl">
            <summary>
            初始化自有材质
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMaterialComponent.mAttachMeshMaterials">
            <summary>
            当前角色所有自有模型材质(主要是加载上来的装备)
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveCage.ModifyActorPosByCage(UnityEngine.Vector3)">
            <summary>
            当玩家所在位置超出cage范围后，强行拉回范围内
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveCage.setCage(UnityEngine.Vector3,System.Single)">
            <summary>
            设置cage状态
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveCage.hasCage">
            <summary>
            是否处于cage状态
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveCage.removeCage">
            <summary>
            移除cage状态
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo.mIsMoving">
            <summary>
            当前是是否正在移动
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo.isPathfinding">
            <summary>
            当前是否正在寻路移动
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.checkNeedRePosition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            检查是否需要更新遥杆路径
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.checkSamePosition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            判断路径点是否为同一个点
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo._pathIndex">
            <summary>
            当前路点组的索引
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo._JumpToPos">
            <summary>
            跳跃终点
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo._LinkPos">
            <summary>
            跳跃起点
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.GetPaths(UnityEngine.Vector3@)">
            <summary>
            根据角色当前位置进行寻路，生成路点组，并设置到寻路起始位置
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.MoveTo(System.Collections.Generic.List{UnityEngine.Vector3},System.Action)">
            <summary>
            根据路点移动到某个位置
            </summary>
            <param name="path"></param>
            <param name="onReach"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.MovePos(UnityEngine.Vector3,UnityEngine.Vector3,System.Action)">
            <summary>
            AddPosMove
            </summary>
            <param name="startP"></param>
            <param name="endP"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.endMoveByNextMove">
            <summary>
            停止当前寻路
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo._keepFace">
            <summary>
            在寻路移动时，保持朝向面向某个方向，一直朝向运动方向
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.updateFlags">
            <summary>
            check once per 150ms
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo._currentTarget">
            <summary>
            当前移动目标
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityMoveTo._nodeIndex">
            <summary>
            当前路径正在进行的节点索引
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.clearData">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.CallCamera">
            <summary>
            更新camera朝向
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.UpdatePathNodeMoveDir">
            <summary>
            更新移动状态，move dir方式
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.checkSwingPosition(UnityEngine.Vector3)">
            <summary>
            检查是否摇摆
            </summary>
            <param name="endp"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.CheckPosDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            检查两个位置是否足够远
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityMoveTo.checkMoveDirCollision(UnityEngine.Vector3@)">
            <summary>
            检查移动方向上是否有阻挡
            </summary>
            <returns></returns>
        </member>
        <member name="F:MUEngine.Implement.MUEntityPhysicsComponent.mEnableCollid">
            <summary>
            物理相关
            </summary>
        </member>
        <member name="T:MUEngine.Implement.MUEntityRelateEffectComponent">
            <summary>
            Entity关联的场景特效，用于确保Entity在变身、销毁、隐藏和其它一些情况时，关联的场景特效能重刷关联状态
            </summary>
        </member>
        <member name="P:MUEngine.Implement.MUEntityRenderVisServiceComp.LogicVisible">
            <summary>
            逻辑visible
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityRenderVisServiceComp.LockRenderVisible(System.String,System.Boolean)">
            <summary>
            锁定render visible
            </summary>
            <param name="lock_name"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityRenderVisServiceComp.UnlockRenderVisible(System.String)">
            <summary>
            解锁render visible
            </summary>
            <param name="lock_name"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityRenderVisServiceComp.SetRenderVisibleWithFlag(MUEngine.EntityVisibleFlag,System.Boolean)">
            <summary>
            根据flag设置角色render visible
            </summary>
            <param name="flag"></param>
            <param name="value"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityRenderVisServiceComp.GetRenderVisibleWithFlag(MUEngine.EntityVisibleFlag)">
            <summary>
            获得某一位下是否可见
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityRenderVisServiceComp.IsACTEnable">
            <summary>
            ACT是否允许被放行
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityRenderVisServiceComp.RegistRenderVisibleHandler(MUEngine.IEntityRenderVisibleHandler)">
            <summary>
            注册render visible handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityRenderVisServiceComp.UnregistRenderVisibleHandler(MUEngine.IEntityRenderVisibleHandler)">
            <summary>
            注销render visible handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="F:MUEngine.Implement.MUEntityRenderVisServiceComp.mRenderVisibleMask">
            <summary>
            render visible标记
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityRenderVisServiceComp.mEnableMaskForAnimator">
            <summary>
            render visible为假时，animator.enable的放行条件
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityRenderVisServiceComp.mInternalEnableMaskForAnimator">
             <summary>
             render visible为假时，animator.enable的放行条件
            如果隐藏原因只在mask中的话，就要允许状态机继续运行
             </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityRenderVisServiceComp.mEnableMaskForACT">
            <summary>
            render visible为假时，act播放的放行条件
            </summary>
        </member>
        <member name="F:MUEngine.Implement.MUEntityRenderVisServiceComp.mVisHandlers">
            <summary>
            可见性处理器
            </summary>
        </member>
        <member name="P:MUEngine.Implement.MUEntityRotation.IsRotationSpeedUniform">
            <summary>
            是否匀速旋转
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityShadowComponent.SetShadowVisible(System.Boolean)">
            <summary>
            设置影子可见性
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityShadowComponent.GetShadowLevel">
            <summary>
            获取当前阴影等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Implement.MUEntityShadowComponent.SetShadowLevel(System.Int32)">
            <summary>
            设置阴影等级
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:MUEngine.Implement.MUEntityShadowComponent.RefreshShadowLevel">
            <summary>
            强制刷新阴影等级
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUEntityShadowComponent.OnSetShadowLevel(MUEngine.ShadowLevel)">
            <summary>
            设置阴影
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ActorEntityObject.mOnAniEvent">
            <summary>
            动画事件回调
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ElementEntityObject.mPartType">
            <summary>
            当前部位类型
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ElementEntityObject.mUsingMaterialIdx">
            <summary>
            当前部位使用的材质索引
            </summary>
        </member>
        <member name="F:MUEngine.Implement.ElementEntityObject.mShadowLevel">
            <summary>
            阴影质量，默认为低
            </summary>
        </member>
        <member name="F:MUEngine.Implement.FakeEntityObject.mLastPlayTrigger_hash">
            <summary>
            动画播放器
            </summary>
        </member>
        <member name="T:MUEngine.Implement.EntityObject">
            <summary>
            ALL Properties in Entity
            </summary>
        </member>
        <member name="F:MUEngine.Implement.EntityObject.IgnoreParentRotation">
            <summary>
            忽略parent的旋转
            </summary>
        </member>
        <member name="T:MUEngine.Implement.ClientHeightMap">
            <summary>
            项目中未使用
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUQualityMgr.SetAliasing(System.Int32)">
            <summary>
            0 disable , 2 2xMuti, 4 4xMuti
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:MUEngine.Implement.MUQualityMgr.InitDefaultUnitySetting">
            <summary>
            初始化默认参数
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUQualityMgr.PerfectQuality">
            <summary>
            完美
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUQualityMgr.HeightQuality">
            <summary>
            高配
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUQualityMgr.MidQuality">
            <summary>
            中配
            </summary>
        </member>
        <member name="M:MUEngine.Implement.MUQualityMgr.LowQuality">
            <summary>
            低配
            </summary>
        </member>
        <member name="P:MUEngine.MUAudioMgr.SwitchEffect">
            <summary>
            音效类开关
            </summary>
        </member>
        <member name="P:MUEngine.MUAudioMgr.SwitchBgm">
            <summary>
            背景音开关
            </summary>
        </member>
        <member name="M:MUEngine.MUAudioMgr.SetAllSilenceSwitch(System.Boolean)">
            <summary>
            设置总开关
            </summary>
            <param name="bSwitch">开关</param>
        </member>
        <member name="P:MUEngine.MUAudioMgr.EffectVolume">
            <summary>
            音效类音量
            </summary>
        </member>
        <member name="P:MUEngine.MUAudioMgr.BgmVolume">
            <summary>
            背景音乐音量
            </summary>
        </member>
        <member name="M:MUEngine.MUAudioMgr.AddSound(System.String,UnityEngine.GameObject,System.Boolean,System.Boolean,MUEngine.AudioType,System.Boolean,System.Boolean)">
            <summary>
            添加新声音
            </summary>
            <param name="name">音频名</param>
            <param name="obj">obj</param>
            <param name="loop">是否循环</param>
            <param name="removeAtEnd">结束后自动销毁</param>
            <param name="type">类型</param>
            <param name="notFade">淡入淡出</param>
            <param name="spatialize"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUAudioMgr.Check3DDistance(UnityEngine.GameObject)">
            <summary>
            距离某个obj的3D距离判定
            </summary>
            <param name="obj">obj</param>
            <returns>判定结果</returns>
        </member>
        <member name="M:MUEngine.MUAudioMgr.GetVolumeByType(MUEngine.AudioType)">
            <summary>
            根据类型获取音量
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUAudioMgr.GetSoundCount(MUEngine.AudioType)">
            <summary>
            根据类型获取声音个数
            </summary>
            <param name="type">类型</param>
            <returns>个数</returns>
        </member>
        <member name="M:MUEngine.MUAudioMgr.GetSameEffectSoundNameCount(System.String)">
            <summary>
            获取相同名字的声音个数
            </summary>
            <param name="name">名字</param>
            <returns>个数</returns>
        </member>
        <member name="M:MUEngine.MUAudioMgr.AddSameEffectSoundName(System.String)">
            <summary>
            按名字给声音分类
            </summary>
            <param name="name">名字</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.RemoveSameEffectSoundName(System.String)">
            <summary>
            按名字给声音分类
            </summary>
            <param name="name">名字</param>
        </member>
        <member name="F:MUEngine.MUAudioMgr.IsMute">
            <summary>
            停止播放声音
            </summary>
        </member>
        <member name="M:MUEngine.MUAudioMgr.PlayAudio">
            <summary>
            开始播放声音
            </summary>
        </member>
        <member name="M:MUEngine.MUAudioMgr.ResumeAudio(UnityEngine.AudioSource)">
            <summary>
            恢复播放声音
            </summary>
            <param name="audioSource">音源</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.ResumeAudioAfterPause(UnityEngine.AudioSource)">
            <summary>
            暂停之后恢复播放声音
            </summary>
            <param name="audioSource"></param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.CreateListenerObj3d">
            <summary>
            创建3d音效“听众”
            </summary>
        </member>
        <member name="M:MUEngine.MUAudioMgr.GetListnerObj3d">
            <summary>
            取得3d音效“听众”
            </summary>
        </member>
        <member name="M:MUEngine.MUAudioMgr.CreateSpaceAudioRootObj">
            <summary>
            创建点音源Obj
            </summary>
        </member>
        <member name="M:MUEngine.MUAudioMgr.SwitchListenerFollowCamera(System.Boolean)">
            <summary>
            提供给剧情编辑器用的开关，控制“ListenerObj3d”跟随人还是跟随相机
            </summary>
            <param name="bSwitch">开关</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.SetListenerObj3dPos(UnityEngine.Vector3)">
            <summary>
            设置"ListenerObj3d"位置
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.StopAudioByType(MUEngine.AudioType)">
            <summary>
            停止某个类型音乐播放
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.PlayAudioByType(MUEngine.AudioType)">
            <summary>
            开始某个类型音乐播放
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.PauseAudioByType(MUEngine.AudioType)">
            <summary>
            暂停某个类型音乐
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.ResumeAudioByType(MUEngine.AudioType)">
            <summary>
            恢复某个类型音乐
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.SetVolume(MUEngine.AudioType,System.Single)">
            <summary>
            音量设置
            </summary>
            <param name="type">类型</param>
            <param name="volume">音量</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.SetSoundAttenuation(UnityEngine.AudioSource,System.Single,System.Single,System.Int32)">
            <summary>
            声音衰减设置
            </summary>
            <param name="aus">声音对象</param>
            <param name="minDist">最小距离</param>
            <param name="maxDist">最大距离</param>
            <param name="rolloffMode">衰减模式（线性，对数）</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.SetSoundVolume(UnityEngine.AudioSource,System.Single)">
            <summary>
            音量设置
            </summary>
            <param name="aus">声音对象</param>
            <param name="vol">音量</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.GetAudioClipLength(UnityEngine.AudioSource)">
            <summary>
            获取声音长度
            </summary>
            <param name="aus">声音对象</param>
        </member>
        <member name="M:MUEngine.MUAudioMgr.PlaySound(UnityEngine.AudioSource)">
            <summary>
            播放声音
            </summary>
            <param name="aus">声音对象</param>
        </member>
        <member name="M:MUEngine.IMUActorElement.Load">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="T:MUEngine.IMUAudioMgr">
            <summary>
            MUAudioMgr的约束接口，其中的属性与方法会被其它依赖于引擎的库所调用
            修改各自项目中的MUAudioMgr时，需要注意不要更改该接口中列出的属性和方法
            </summary>
        </member>
        <member name="P:MUEngine.IMUAudioMgr.SwitchEffect">
            <summary>
            是否启用音效
            </summary>
        </member>
        <member name="P:MUEngine.IMUAudioMgr.EffectVolume">
            <summary>
            音效类音频的音量
            </summary>
        </member>
        <member name="P:MUEngine.IMUAudioMgr.SwitchBgm">
            <summary>
            是否启用背景音乐
            </summary>
        </member>
        <member name="P:MUEngine.IMUAudioMgr.BgmVolume">
            <summary>
            背景音乐音量
            </summary>
        </member>
        <member name="T:MUEngine.IMUPostEffect">
            <summary>
            全屏后效通用接口
            </summary>
        </member>
        <member name="P:MUEngine.IMUPostEffect.Enabled">
            <summary>
            是否激活
            </summary>
        </member>
        <member name="P:MUEngine.IMUPostEffect.EffectMaterial">
            <summary>
            用于此后效的材质
            </summary>
        </member>
        <member name="M:MUEngine.IMUPostEffect.Initialize(LightFaceEffect)">
            <summary>
            初始化后效
            </summary>
            <param name="lfe">摄像机上的LightfaceEffect</param>
        </member>
        <member name="M:MUEngine.IMUPostEffect.UpdateMaterialParameter">
            <summary>
            设置材质参数
            </summary>
        </member>
        <member name="M:MUEngine.IMUPostEffect.Update(LightFaceEffect)">
            <summary>
            更新后效
            </summary>
            <param name="lfe">摄像机上的LightfaceEffect</param>
        </member>
        <member name="T:MUEngine.MUNotToLuaAttribute">
            <summary>
            用于标记不导出到Lua的特性标签
            </summary>
        </member>
        <member name="F:MUEngine.MUQualityDefault.ShadowDistances">
            <summary>
            阴影距离
            </summary>
        </member>
        <member name="F:MUEngine.MUQualityDefault.Anisotropic">
            <summary>
            Anisotropic Textures
            </summary>
        </member>
        <member name="F:MUEngine.MUQualityDefault.AliasingPC">
            <summary>
            Anti Aliasing
            手机暂时关闭
            </summary>
        </member>
        <member name="F:MUEngine.MUQualityDefault.BlendWeights">
            <summary>
            动作混合骨骼数量
            </summary>
        </member>
        <member name="F:MUEngine.MUQualityDefault.BillBoardsFaceCameras">
            <summary>
            BillBoards Face Camera
            </summary>
        </member>
        <member name="F:MUEngine.MUQualityDefault.CustomizeScreen">
            <summary>
            自定义分辨率，如果设置都按照此设置分辨率
            </summary>
        </member>
        <member name="M:MUEngine.MUQualityConfig.CanAddEffectLow">
            <summary>
            根据低优先级上限数和当前场景特效数返回特效是否能添加，预留总上限的10%给高优先级用
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUQualityConfig.SetMaxEffTabValue(System.Int32,MUEngine.QualityType,MUEngine.Implement.QualityState)">
            <summary>
            重设特效上限在某一清晰度，某一帧率的值
            </summary>
            <param name="value">新上限</param>
            <param name="type1">所在清晰度</param>
            <param name="type2">所在帧率</param>
        </member>
        <member name="M:MUEngine.MUQualityConfig.SetMaxEffTab(System.Int32[][])">
            <summary>
            重设特效上限整表
            </summary>
            <param name="newTab">新表</param>
        </member>
        <member name="P:MUEngine.IPartAniHandler.Part">
            <summary>
            部位
            </summary>
        </member>
        <member name="M:MUEngine.IPartAniHandler.PlayAnim(System.Int32)">
            <summary>
            播放trigger动画
            </summary>
            <param name="trigger_hash"></param>
        </member>
        <member name="M:MUEngine.IPartAniHandler.SetAnimatorInt(System.Int32,System.Int32)">
            <summary>
            设置 inttrigger
            </summary>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.IPartAniHandler.SetAnimatorBool(System.Int32,System.Boolean)">
            <summary>
            设置bool trigger
            </summary>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.IPartAniHandler.SetAnimatorFloat(System.Int32,System.Single)">
            <summary>
            设置float trigger
            </summary>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.GOEActorSubMeshAniData.SetAnimatorInt(System.Int32,System.Int32)">
            <summary>
            设置int参数
            </summary>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="F:MUEngine.GOEActorSubMeshAniData.mTriggerHashList">
            <summary>
            一次性动画trigger
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorSubMeshAniData.mIntTriggerMap">
            <summary>
            int trigger 列表
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorSubMeshAniData.mFloatTriggerMap">
            <summary>
            float trigger列表
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorSubMeshAniData.mBoolTriggerMap">
            <summary>
            bool trigger列表
            </summary>
        </member>
        <member name="M:MUEngine.PartAniPlayer.RegistPartAniHandler(MUEngine.IPartAniHandler)">
            <summary>
            注册part ani handler
            </summary>
            <param name="partani_handler"></param>
        </member>
        <member name="M:MUEngine.PartAniPlayer.UnregistPartAniHandler(MUEngine.IPartAniHandler)">
            <summary>
            注销part ani handler
            </summary>
            <param name="partani_handler"></param>
        </member>
        <member name="M:MUEngine.PartAniPlayer.PlayPartAnim(MUEngine.EPlayerElement,System.Int32)">
            <summary>
            播放某个部位的ani
            </summary>
            <param name="part"></param>
            <param name="trigger_hash"></param>
        </member>
        <member name="F:MUEngine.PartAniPlayer.mSubMeshAniDataMap">
            <summary>
            某个部位的动画播放请求
            </summary>
        </member>
        <member name="F:MUEngine.PartAniPlayer.mPlayPartAniEnabled">
            <summary>
            当前是否可以给某个部位设置动画
            </summary>
        </member>
        <member name="T:MUEngine.BitBoolAnd">
            <summary>
            一组bool，同时为真才为真
            即：每一个bit位，0为真，1位假
            </summary>
        </member>
        <member name="M:MUEngine.BitBoolAnd.IsTrue(System.Int32)">
            <summary>
            是否所有bool都为true
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.BitBoolAnd.IsTrue(System.Int32,System.Int32)">
            <summary>
            某个标记的bool是否为true
            </summary>
            <param name="flag"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.BitBoolAnd.IsTrueByMask(System.Int32,System.Int32)">
            <summary>
            mask下的几个bit代表的bool都为真时，返回真
            </summary>
            <param name="flag"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:MUEngine.BitBoolOr">
            <summary>
            一组bool，有一个为真则为真
            即：每一个bit位，1位真，0位假
            </summary>
        </member>
        <member name="M:MUEngine.BitSetLogic.SetBitLess(System.Int32,System.Int32)">
            <summary>
            小于bit的位全部设置为1
            </summary>
            <param name="val"></param>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="T:MUEngine.FixGroupFuncCallback">
            <summary>
            回调函数组
            </summary>
        </member>
        <member name="M:MUEngine.FixGroupFuncCallback.AddFunc">
            <summary>
            添加一个回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GroupFuncCallbackFactory.CreateFixGroupCallbackMax10(System.Action)">
            <summary>
            创建最大支持10个回调的group func
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GroupFuncCallbackFactory.CreateFixGroupCallbackMax20(System.Action)">
            <summary>
            创建最大支持20个回调的group func
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GroupFuncCallbackFactory.ReleaseGroupCallback(MUEngine.IGroupFuncCallback)">
            <summary>
            销毁
            </summary>
            <param name="func"></param>
        </member>
        <member name="F:MUEngine.GroupFuncCallbackFactory.mFuncMax10Allocator">
            <summary>
            最大支持10个回调的对象分配器
            </summary>
        </member>
        <member name="F:MUEngine.GroupFuncCallbackFactory.mFuncMax20Allocator">
            <summary>
            最大支持20个回调的对象分配器
            </summary>
        </member>
        <member name="T:MUEngine.TCachedMemoryAllocator`1">
            <summary>
            带缓存的内存分配器，超出最大数量也依然能分配，但是最大数量之内的可以反复利用
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MUEngine.TFixedArray`1">
            <summary>
            定长数组
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MUEngine.TFixedArray`1.RemoveAt(System.Int32)">
            <summary>
            删除某个位置的元素
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:MUEngine.TFixedArray`1.Remove(`0)">
            <summary>
            删除特定元素
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceTexLogic.OnChangeFaceTexBuildDone(MUEngine.BorrowRenderTexture,UnityEngine.Material,UnityEngine.Material)">
            <summary>
            纹理生成完毕
            </summary>
            <param name="tex"></param>
            <param name="cpytex_mat"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceVertLogic.BeginMakeFace(System.String,FaceMaker.FaceType[],System.Single[],FaceMaker.FaceType)">
            <summary>
            开始捏脸流程
            </summary>
            <param name="tpl_name"></param>
            <param name="face_types"></param>
            <param name="strs"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceVertLogic.LoadMakeFaceTemplate(System.String,System.Action{System.String,UnityEngine.Object})">
            <summary>
            加载make face资源
            </summary>
            <param name="tpl_name"></param>
            <param name="callback"></param>
        </member>
        <member name="F:MUEngine.GOEActorMakeFaceVertLogic.mRuntimeMesh">
            <summary>
            运行时的可变mesh
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorMakeFaceVertLogic.mResMesh">
            <summary>
            资源mesh
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorMakeFaceVertLogic.WireFrameMat">
            <summary>
            显示线框的材质球
            </summary>
        </member>
        <member name="F:MUEngine.WorkingRenderTextureDesc.RT">
            <summary>
            render texture
            </summary>        
        </member>
        <member name="F:MUEngine.WorkingRenderTextureDesc.mCallbackList">
            <summary>
            回调列表
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceBorrowRenderTexture.Init">
            <summary>
            创建纹理池
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorMakeFaceBorrowRenderTexture.mToBorrowRTList">
            <summary>
            真正用于贴在角色脸上的texture
            高精度的render texture都是凑近了看的，池里没有的时候尝试申请
            低精度的render texture是无所谓的，创建10张循环使用，不够了也不申请了
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceDataPool.RequireWorkingRenderTexture(System.Boolean,System.Action{UnityEngine.RenderTexture})">
            <summary>
            请求render texture
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="depth"></param>
            <param name="callback"></param>
        </member>
        <member name="F:MUEngine.GOEActorMakeFaceDataPool.mWorkingRTList">
            <summary>
            render texture池
            实际上我还没想好什么时候删它
            </summary>
        </member>
        <member name="T:MUEngine.GroupFuncCallback">
            <summary>
            回调函数组
            </summary>
        </member>
        <member name="M:MUEngine.TreeFuncCallback.CreateSubFunc(System.Boolean,System.String)">
            <summary>
            创建一个子indicator
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GOEActorMountMgr.OnLoadDone">
            <summary>
            角色加载完毕
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorMountMgr.AttachPlayer(MUEngine.MUActorEntity,System.String)">
            当前角色是坐骑
             <summary>
             挂接坐骑
             如果自己是坐骑，挂接其他玩家
             </summary>
             <param name="mount_entity"></param>
        </member>
        <member name="M:MUEngine.GOEActorMountMgr.RemovePlayer(MUEngine.MUActorEntity)">
            <summary>
            如果自己是坐骑，从自己身上移除其他玩家
            </summary>
            <param name="actor_entity"></param>
        </member>
        <member name="M:MUEngine.GOEActorMountMgr.OnAttachParentMount(MUEngine.MUActorEntity)">
            <summary>
            当前角色连接到马上
            </summary>
            <param name="parent_mount"></param>
        </member>
        <member name="T:MUEngine.GOEActorHighShadowController">
            <summary>
            角色阴影控制器
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorHighShadowController.SetShadowLevel(MUEngine.ShadowLevel)">
            <summary>
            设置阴影等级
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:MUEngine.GOEActorHighShadowController.SetShadowVisible(System.Boolean)">
            <summary>
            设置影子可见性
            </summary>
            <param name="visible"></param>
        </member>
        <member name="T:MUEngine.StepSoundPlayer">
            <summary>
            脚步声播放
            </summary>
        </member>
        <member name="T:MUEngine.StepSoundPlayer.ActorType">
            <summary>
            角色类型
            </summary>
        </member>
        <member name="M:MUEngine.ICCDFunc.DoFunc(System.Single[])">
            <summary>
            值域[0,+)，并且目标点值为0
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.CCDFunction.GetCurResult">
            <summary>
            获得当前计算结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:MUEngine.CCDSolver">
            <summary>
            梯度下降法
            </summary>
        </member>
        <member name="M:MUEngine.MUBoneTransform.From(UnityEngine.Transform)">
            <summary>
            通过transform获取srt
            </summary>
            <param name="trans"></param>
        </member>
        <member name="M:MUEngine.MUBoneTransform.ToMat">
            <summary>
            转换为矩阵
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUBoneTransform.ToEulerAngles">
            <summary>
            旋转部分转换为欧拉角
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUBoneTransform.SetEulerAngles(UnityEngine.Vector3)">
            <summary>
            设置欧拉角旋转
            </summary>
            <param name="rot"></param>
        </member>
        <member name="M:MUEngine.GOEActorAniComponent.RegistPartAniHandler(MUEngine.IPartAniHandler)">
            <summary>
            注册part ani handler
            </summary>
            <param name="partani_handler"></param>
        </member>
        <member name="M:MUEngine.GOEActorAniComponent.UnregistPartAniHandler(MUEngine.IPartAniHandler)">
            <summary>
            注销part ani handler
            </summary>
            <param name="partani_handler"></param>
        </member>
        <member name="M:MUEngine.GOEActorAniComponent.PlayPartAnim(MUEngine.EPlayerElement,System.Int32)">
            <summary>
            播放某个部位的ani
            </summary>
            <param name="part"></param>
            <param name="trigger_hash"></param>
        </member>
        <member name="M:MUEngine.GOEActorAniComponent.SetAmimatorBool(System.Int32,System.Boolean)">
            <summary>
            set bool parameters 
            </summary>
            <param name="bname"></param>
            <param name="bstate"></param>
        </member>
        <member name="M:MUEngine.GOEActorAniComponent.SetAnimatorFloat(System.Int32,System.Single)">
            <summary>
            播放部位动画
            </summary>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.GOEActorColorComponent.ChangeColors(MUEngine.EPlayerElement,UnityEngine.Color[],System.Int32[])">
            <summary>
            修改颜色
            </summary>
            <param name="part"></param>
            <param name="clrs"></param>
            <param name="indices"></param>
        </member>
        <member name="M:MUEngine.GOEActorColorComponent.ApplyClrToAllHandlers(MUEngine.EPlayerElement)">
            <summary>
            应用颜色到某个部位的所有handlers上
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.GOEActorColorComponent.CollectHandlersByPart(MUEngine.EPlayerElement,System.Collections.Generic.List{MUEngine.IGOEActorMeshColorHandler})">
            <summary>
            根据部位获得所有handlers
            </summary>
            <param name="part"></param>
            <param name="ctrls"></param>
        </member>
        <member name="F:MUEngine.GOEActorColorComponent.mClrDict">
            <summary>
            颜色dict
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorColorComponent.mColorEnable">
            <summary>
            当前是否可以给这个部位设置颜色
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorColorComponent.mMeshClrHandlers">
            <summary>
            所有的mesh clr handlers
            </summary>
        </member>
        <member name="T:MUEngine.ActorLodStrategy">
            <summary>
            lod策略
            </summary>
        </member>
        <member name="F:MUEngine.ActorLodStrategy.OneTime">
            <summary>
            一次性填充所有lod
            </summary>
        </member>
        <member name="F:MUEngine.ActorLodStrategy.DeferredLoad">
            <summary>
            逐步加载
            </summary>
        </member>
        <member name="M:MUEngine.IActorMeshLodHandler.GetRendersByLOD(MUEngine.GOEActorElemLodLevel,System.Action{System.Boolean,MUEngine.GOEActorElemLodLevel,System.Collections.Generic.List{UnityEngine.Renderer}})">
            <summary>
            获得某个等级的lod的所有render
            </summary>
            <param name="lod_level"></param>
            <param name="callback"></param>
        </member>
        <member name="P:MUEngine.LODMeshInfo.RealLod">
            <summary>
            当前mesh的真实lod
            </summary>
        </member>
        <member name="T:MUEngine.ILODRenderAllocateStrategy">
            <summary>
            lod render分配策略接口
            </summary>
        </member>
        <member name="M:MUEngine.ILODRenderAllocateStrategy.Init(MUEngine.ILODMeshStrategyCallback)">
            <summary>
            注册回调
            </summary>
        </member>
        <member name="M:MUEngine.ILODRenderAllocateStrategy.SwitchTo(MUEngine.GOEActorElemLodLevel)">
            <summary>
            切换lod
            </summary>
            <param name="lod_lvl"></param>
        </member>
        <member name="M:MUEngine.GOEActorLODMeshOneTimeLoadStrategy.Init(MUEngine.ILODMeshStrategyCallback)">
            <summary>
            注册回调
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorLODMeshOneTimeLoadStrategy.SwitchTo(MUEngine.GOEActorElemLodLevel)">
            <summary>
            切换lod
            </summary>
            <param name="lod_lvl"></param>
        </member>
        <member name="T:MUEngine.GOEActorLODMeshDeferredLoadStrategy">
            <summary>
            负责从handler获取不同lod级别的mesh
            并且通知lod的mesh发生了改变
            逐步获取lod的策略
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorLODMeshDeferredLoadStrategy.mHandler">
            <summary>
            mesh handler
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorLODMeshDeferredLoadStrategy.mCallback">
            <summary>
            当lod mesh发生变动时通知
            </summary>
        </member>
        <member name="M:MUEngine.SingleMeshRenderContainer.OnLODMeshUpdated(MUEngine.GOEActorElemLodLevel,UnityEngine.Renderer[])">
            <summary>
            当前mesh某个lod的render更新了
            </summary>
            <param name="lod_lvl"></param>
            <param name="renders"></param>
        </member>
        <member name="M:MUEngine.GOEActorLODComponent.GetCurrentLOD(UnityEngine.LOD[])">
            <summary>
            获得当前的lod级别
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GOEActorLODComponent.ForceLOD(System.Int32)">
            <summary>
            强制限制当前的某个lod
            </summary>
            <param name="lod"></param>
        </member>
        <member name="M:MUEngine.GOEActorLODComponent.RegistLodHandler(MUEngine.IActorMeshLodHandler)">
            <summary>
            注册lod handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.GOEActorLODComponent.UnregistLodHandler(MUEngine.IActorMeshLodHandler)">
            <summary>
            解除注册lod handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.GOEActorLODComponent.OnRegistLodHandler(MUEngine.IActorMeshLodHandler)">
            <summary>
            注册lod handler
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GOEActorLODComponent.OnUnregistLODHandler(MUEngine.IActorMeshLodHandler)">
            <summary>
            注销lod handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.GOEActorLODComponent.OnLODRenderChanged(MUEngine.GOEActorElemLodLevel,UnityEngine.Renderer[],UnityEngine.Renderer[])">
            <summary>
            某个lod 的render列表发生了变化
            </summary>
            <param name="lod_lvl"></param>
            <param name="old_renders"></param>
            <param name="new_renders"></param>
        </member>
        <member name="F:MUEngine.GOEActorLODComponent.mRenderContainers">
            <summary>
            每个mesh对应的所有render
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorLODComponent.mReleased">
            <summary>
            当前是否已经销毁
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorLODComponent.mMaxCountDown">
            <summary>
            更新lod倒计时
            </summary>
        </member>
        <member name="M:MUEngine.IGOEActorMakeFaceHandler.IsOpAvailable(MUEngine.GOEActorMakeFaceOpCode)">
            <summary>
            某个操作是否允许
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.IGOEActorMakeFaceHandler.ChangeSkinColor(System.Single,UnityEngine.Color)">
            <summary>
            换肤色
            </summary>
            <param name="intensity"></param>
            <param name="clr"></param>
        </member>
        <member name="M:MUEngine.IGOEMakeFaceCompInterface.SetFaceTextureCompactDiv(System.Int32)">
            <summary>
            设置脸部贴花精度除数
            </summary>
            <param name="div"></param>
        </member>
        <member name="T:MUEngine.GOEActorMakeFaceComponent">
            <summary>
            make face接口
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.ChangeFace(System.String,System.String,System.Int32)">
            <summary>
            捏脸接口
            </summary>
            <param name="face_types"></param>
            <param name="strs"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.MakeFace(System.Int32[],System.Single[],System.Int32)">
            <summary>
            捏脸
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.ChangeFaceTex(System.String,System.String,System.String)">
            <summary>
            改变脸部纹理
            </summary>
            <param name="tex_types"></param>
            <param name="ids"></param>
            <param name="clrs"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.ChangeSkinColor(System.Single,UnityEngine.Color)">
            <summary>
            修改脸部皮肤颜色
            </summary>
            <param name="intensity"></param>
            <param name="clr"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.OnRemoveMesh(MUEngine.EPlayerElement)">
            <summary>
            当前部位被干掉了，清空对应操作
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.RegistMakeFaceHandler(MUEngine.IGOEActorMakeFaceHandler)">
            <summary>
            注册handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.UnregistMakeFaceHandler(MUEngine.IGOEActorMakeFaceHandler)">
            <summary>
            注销handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.ApplyMakeFace2Handler(MUEngine.IGOEActorMakeFaceHandler)">
            <summary>
            应用捏脸效果
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorMakeFaceComponent.SetFaceTextureCompactDiv(System.Int32)">
            <summary>
            设置脸部贴花输出纹理的尺寸比例
            </summary>
            <param name="times"></param>
        </member>
        <member name="F:MUEngine.GOEActorMakeFaceComponent.mEnableMakeFace">
            <summary>
            当前是否可以捏脸
            </summary>
        </member>
        <member name="T:MUEngine.GOEActorFaceTo">
            <summary>
            角色面部朝向
            </summary>
        </member>
        <member name="M:MUEngine.GOEActorUtils.CollectionMinus``2(``0[],``1[],System.Func{``0,``1,System.Boolean})">
            <summary>
            集合减法
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="coll1"></param>
            <param name="coll2"></param>
            <param name="compare_func"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GOEActorUtils.CollectionUnion``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            集合求并集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll1"></param>
            <param name="coll2"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.GOEActorUtils.CollectionUnion``1(``0[],``0[],System.Func{``0,``0,System.Boolean})">
            <summary>
            集合求并集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll1"></param>
            <param name="coll2"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.LODGroupExtensions.GetWorldSpaceSize(UnityEngine.LODGroup)">
            <summary>
            获取世界空间尺寸
            </summary>
            <param name="lodGroup"></param>
            <returns></returns>
        </member>
        <member name="T:MUEngine.EPlayerElement">
            <summary>
            角色部位
            </summary>
        </member>
        <member name="T:MUEngine.GOEActorElemLodLevel">
            <summary>
            角色模型lod等级
            遍历某个模型的render时用
            模型可能包括多个render，高模低模，以及特效等其他渲染物
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorElemLodLevel.High">
            <summary>
            高模
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorElemLodLevel.Low">
            <summary>
            低模
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorElemLodLevel.VeryLow">
            <summary>
            超低模
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorElemLodLevel.LodCount">
            <summary>
            lod数量
            </summary>
        </member>
        <member name="F:MUEngine.GOEActorElemLodLevel.All">
            <summary>
            全部（包括高模，低模和其他附加的渲染物，比如特效）
            </summary>
        </member>
        <member name="T:MUEngine.HeadQuality">
            <summary>
            角色头部品质级别
            </summary>
        </member>
        <member name="P:MUEngine.MUActorEntity.HeadQualityLevel">
            <summary>
            头部渲染品质级别
            </summary>
        </member>
        <member name="P:MUEngine.MUActorEntity.EnableCustomLodControl">
            <summary>
            使用自定义lod group来控制角色lod
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.OnAnimCallback(System.String)">
            <summary>
            动画事件回调
            </summary>
            <param name="aniname"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.DestoryObject">
            <summary>
            角色被回收时的回调
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.OnSetAnimatorEnable(System.Boolean)">
            <summary>
            设置animator可用性
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.HeadFaceToTarget(System.String,System.String,UnityEngine.Transform,System.Single)">
            <summary>
            角色头转向某个方向
            </summary>
            <param name="head_bonename"></param>
            <param name="eye_bonename"></param>
            <param name="target"></param>
            <param name="maxDistance">摄像机超出距离后不再停用转头</param>
        </member>
        <member name="M:MUEngine.MUActorEntity.HeadEyeToTarget(System.String,System.String,System.Single)">
            <summary>
            眼睛转动，基于ActorFaceTo，不能单独使用
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.HeadBodyToTarget(System.String)">
            <summary>
            上半身转动，基于ActorFaceTo，不能单独使用
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetupFaceToLimit(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            设置转头参数
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.IsNowFaceTo">
            <summary>
            当前是否在转头
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.LockFaceTo(System.Boolean)">
            <summary>
            给其它一些可能影响到转头的系统用，临时过滤掉转头
            </summary>
            <param name="bLock"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.AddResourceLoadRegForDebug(System.String,System.String)">
            <summary>
            添加资源加载替换的注册
            </summary>
            <param name="res_name"></param>
            <param name="filepath"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.AddPlayerComponent(System.Int32,System.String)">
            <summary>
            change mesh, material
            </summary>
            <param name="type">position</param>
            <param name="resName">targe name</param>
        </member>
        <member name="P:MUEngine.MUActorEntity.IsReceiveShadow">
            <summary>
            角色是否接收阴影
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.ForceLOD(System.Int32)">
            lod相关
             <summary>
             强制设置lod
             </summary>
             <param name="lod"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetLodGroupEnable(System.Boolean)">
            <summary>
            设置lod group enable状态
            </summary>
            <param name="lod_enable"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeFace(System.String,System.String,System.Int32)">
            <summary>
            捏脸接口
            </summary>
            <param name="face_types"></param>
            <param name="strs"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetMakeFaceTexQualityDiv(System.Int32)">
            <summary>
            设置脸部贴花的输出贴图精度除数
            </summary>
            <param name="div"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.GetMakeFaceComponent(System.Boolean)">
            <summary>
            获得捏脸组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeHairColor(System.String,System.String,System.String,System.String)">
            <summary>
            修改头发颜色
            </summary>
            <param name="clr1"></param>
            <param name="clr2"></param>
            <param name="clr3"></param>
            <param name="clr4"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeHairColor(UnityEngine.Color[])">
             <summary>
            改变头发颜色
             </summary>
             <param name="clrs"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeBeardColor(System.String,System.String,System.String,System.String)">
            <summary>
            修改胡子颜色
            </summary>
            <param name="clr1"></param>
            <param name="clr2"></param>
            <param name="clr3"></param>
            <param name="clr4"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeBeardColor(UnityEngine.Color[])">
             <summary>
            改变胡子颜色
             </summary>
             <param name="clrs"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeSelfHoldMeshColor(System.String,System.String,System.String,System.String)">
            <summary>
            修改角色自有mesh的颜色
            </summary>
            <param name="clr1"></param>
            <param name="clr2"></param>
            <param name="clr3"></param>
            <param name="clr4"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeSelfHoldMeshColor(UnityEngine.Color[])">
            <summary>
            改变自有mesh的颜色
            </summary>
            <param name="clrs"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.AddComponentEffect(MUEngine.EPlayerElement,System.String,System.String)">
            <summary>
            添加装备特效
            </summary>
            <param name="type"></param>
            <param name="res_name"></param>
            <param name="bd_pt"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.DelComponentEffect(MUEngine.EPlayerElement,System.String)">
            <summary>
            删除装备特效
            </summary>
            <param name="type"></param>
            <param name="res_name"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ClearComponentEffect(MUEngine.EPlayerElement)">
            <summary>
            删除装备特效
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ClearComponentEffectByBindPointName(MUEngine.EPlayerElement,System.String)">
            <summary>
            根据挂点 删除装备特效
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetComponentVisible(MUEngine.EPlayerElement,System.Boolean)">
            <summary>
            设置挂点显隐
            </summary>
            <param name="ele_type"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.RemovePlayerComponent(MUEngine.EPlayerElement)">
            <summary>
            remove some parts of the equipment.
            body's mesh can only be replaced.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeComponentColor(System.Int32,UnityEngine.Color,System.Int32)">
            <summary>
            修改装备颜色
            </summary>
            <param name="type"></param>
            <param name="color"></param>
            <param name="index"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeComponentColorStr(System.Int32,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="hexStr"></param>
            <param name="idx"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.RefreshComponentColor(MUEngine.EPlayerElement)">
            <summary>
            刷新某个部位的颜色
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.OnSetMaterialByIdx(System.Int32)">
            <summary>
            设置材质
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetEffectOrderInLayer(System.Int32)">
            <summary>
            设置角色身上特效的order in layer，UI专用
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:MUEngine.MUActorEntity.ClientDetour">
            <summary>
            客户端寻路
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.ForceFloat(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            强制角色浮空，包括三段位移：升空，空中悬停和下落
            </summary>
            <param name="floatPos"></param>
            <param name="fallPos"></param>
            <param name="floatTime"></param>
            <param name="waitTime"></param>
            <param name="fallTime"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.ForceFloatEnd">
            <summary>
            强制角色浮空结束，将角色位置放置在浮空逻辑的落点
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.isMoving">
            <summary>
            获取角色当前是否处于移动状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUActorEntity.InitSoundInfo(System.Int32)">
            <summary>
            初始化声音数据
            </summary>
            <param name="actor_type"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.PlayAudio(System.String,System.Boolean)">
            <summary>
            播放声音
            </summary>
            <param name="name"></param>
            <param name="bLoop"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.StopAudio(System.String)">
            <summary>
            停止声音播放
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.AddEffectIndication(System.String,System.String,System.Single,System.Boolean,System.Int32,System.Single)">
            <summary>
            add a circle or sector of indication effect
            </summary>
            <param name="name"></param>
            <param name="BindPoint"></param>
            <param name="time"></param>
            <param name="isCircle"></param>
            <param name="angel"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUActorEntity.AddEffectIndication(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            add a rectangle of indication effect
            </summary>
            <param name="name"></param>
            <param name="BindPoint"></param>
            <param name="time"></param>
            <param name="width"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUActorEntity.AddEffectAlertRange(System.Single,System.Single,System.String)">
            <summary>
            增加一个警戒示意区域，如果原来有，会覆盖掉原来的
            </summary>
            <param name="radius">警戒半径</param>
            <param name="angle">警戒角度，默认为360</param>
            <param name="resName">警戒预制体资源，如果为null,会使用写死的默认资源 AlertRange.prefab</param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUActorEntity.RemoveEffectAlertRange">
            <summary>
            移除现有的警戒示意区域，即使不主动调用这个方法，随着Entity本身被回收，警戒资源也会被回收
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.AbortSmoothRotation">
            <summary>
            打断smooth
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.ChangeRuntimeController(UnityEngine.RuntimeAnimatorController)">
            <summary>
            assign controller in runtime
            </summary>
            <param name="controller">Animator controller</param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetAnimatorMask(System.Int32)">
            <summary>
            set layer weight by mask type
            author: gaoyuwei
            </summary>
            <param name="maskType"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetAmimatorBool(System.Int32,System.Boolean)">
            <summary>
            set bool parameters 
            </summary>
            <param name="bname"></param>
            <param name="bstate"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetAnimatorFloat(System.Int32,System.Single)">
            <summary>
            播放部位动画
            </summary>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetPartAnimatorInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            设置部位的 animator int
            </summary>
            <param name="part"></param>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetPartAnimatorFloat(System.Int32,System.Int32,System.Single)">
            <summary>
            设置部位的 animator float
            </summary>
            <param name="part"></param>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetPartAnimatorBool(System.Int32,System.Int32,System.Boolean)">
            <summary>
            设置部位的aniamator bool
            </summary>
            <param name="part"></param>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.PreloadAnim(System.Int32,System.Action{System.Boolean,UnityEngine.AnimationClip[]},System.Boolean)">
            <summary>
            预加载trigger相关的动画数据
            </summary>
            <param name="trigger_hash"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.PlayAnimByAnimator(System.Int32)">
            <summary>
            play act at base layer or mask layer
            </summary>
            <param name="trigger_hash"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.SetAnimatorEnable(System.Boolean,MUEngine.Implement.ActorAnimatorEnableFlag)">
            <summary>
            仅引擎内部调用，设置 animator可用性
            </summary>
            <param name="enable"></param>
            <param name="reason"></param>
        </member>
        <member name="M:MUEngine.MUActorEntity.CancelAction(System.Single)">
            <summary>
            撤销一次性动画
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.ResetAnimator">
            <summary>
            重置animator
            </summary>
        </member>
        <member name="P:MUEngine.MUActorEntity.OnCollision">
            <summary>
            人物碰撞上动态阻挡时处理
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.StartFootPrint(System.Int32,System.String,System.Single)">
            <summary>
            开启角色脚印，返回值为False说明输入的prafabName名字没找到或找不到主角
            </summary>
            <param name="Type">-1代表关闭脚印，0代表拖尾特效，1代表脚印, 2代表都有（第一个prefab是拖尾特效，第二个prefab是脚印）</param>
            <param name="PrefabName"></param>
            <param name="LifeTime">脚印gameobject的生命周期</param>
            <returns></returns>
        </member>
        <member name="P:MUEngine.MUActorEntity.CSMountEntity">
            <summary>
            坐骑实体
            </summary>
        </member>
        <member name="M:MUEngine.MUActorEntity.AddCollider(System.Single,System.Single)">
            <summary>
            添加Collider
            </summary>
        </member>
        <member name="F:MUEngine.MUActorEntity.STEPSOUND">
            <summary>
            动画事件逻辑
            </summary>
            <param name="event_name"></param>
        </member>
        <member name="T:MUEngine.AnimatorStateType">
            <summary>
            animator base layer state
            author: gao_yu_wei
            </summary>
        </member>
        <member name="T:MUEngine.AnimatorMaskType">
            <summary>
            mask type
            author: gao_yu_wei
            </summary>
        </member>
        <member name="F:MUEngine.AnimatorMaskType.none">
            <summary>
            base layer完全不被mask
            </summary>
        </member>
        <member name="F:MUEngine.AnimatorMaskType.up">
            <summary>
            base layer上半身被mask
            </summary>
        </member>
        <member name="F:MUEngine.AnimatorMaskType.over">
            <summary>
            base layer全身被mask
            </summary>
        </member>
        <member name="T:MUEngine.AnimatorLayerType">
            <summary>
            layer type
            author: gao_yu_wei
            </summary>
        </member>
        <member name="F:MUEngine.AnimatorLayerType.Base">
            <summary>
            基础动画层
            </summary>
        </member>
        <member name="F:MUEngine.AnimatorLayerType.Up">
            <summary>
            移动时会播放的上半身动作层
            </summary>
        </member>
        <member name="F:MUEngine.AnimatorLayerType.Over">
            <summary>
            站立时会播放的全身动作层
            </summary>
        </member>
        <member name="F:MUEngine.AnimatorLayerType.WholeOverLayer">
            <summary>
            无论移动还是站立都会播的全身动作层
            </summary>
        </member>
        <member name="T:MUEngine.MUActAssetManager">
            <summary>
            全局的act asset manager
            </summary>
        </member>
        <member name="T:MUEngine.IActCtrl">
            <summary>
            对外的act控制接口
            </summary>
        </member>
        <member name="M:MUEngine.IActCtrl.AddTarget(MUEngine.Entity)">
            <summary>
            添加目标
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:MUEngine.ACTController.IsACTValid">
            <summary>
            当前act是否还有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.ACTController.Stop">
            <summary>
            停止一个act
            </summary>
        </member>
        <member name="M:MUEngine.ACTController.Restart">
            <summary>
            重新开始act
            </summary>
        </member>
        <member name="F:MUEngine.ACTController.mTargetList">
            <summary>
            目标列表
            </summary>
        </member>
        <member name="F:MUEngine.ACTController.mTargetPos">
            <summary>
            目标位置
            </summary>
        </member>
        <member name="F:MUEngine.ACTController.mSkillCaster">
            <summary>
            技能释放方
            </summary>
        </member>
        <member name="T:MUEngine.MUEntityACTPlayerComponent">
            <summary>
            角色相关的act pool
            </summary>
        </member>
        <member name="M:MUEngine.MUEntityACTPlayerComponent.LoadAct(System.String,System.Action)">
            <summary>
            加载act，返回的是已经
            </summary>
            <param name="act_name"></param>
        </member>
        <member name="M:MUEngine.MUEntityACTPlayerComponent.PlayACT(System.String,System.Single,System.Int32)">
            <summary>
            播放act
            </summary>
        </member>
        <member name="T:MUEngine.EntityVisibleFlag">
            <summary>
            可见性标记，只有所有标记都为真的时候，才显示
            </summary>
        </member>
        <member name="F:MUEngine.EntityVisibleFlag.Custom">
            <summary>
            最普遍情况下的visible
            </summary>
        </member>
        <member name="F:MUEngine.EntityVisibleFlag.Logic">
            <summary>
            Logic Visible专用
            </summary>
        </member>
        <member name="F:MUEngine.EntityVisibleFlag.NormalVisible">
            <summary>
            角色的Visible标记
            </summary>
        </member>
        <member name="F:MUEngine.EntityVisibleFlag.ACTActorVisible">
            <summary>
            ACT专用
            </summary>
        </member>
        <member name="F:MUEngine.EntityVisibleFlag.CompParentVisible">
            <summary>
            角色本身的显隐对于角色组件的连带影响
            </summary>
        </member>
        <member name="F:MUEngine.EntityVisibleFlag.PlrComp">
            <summary>
            作为角色组件的显隐标记
            </summary>
        </member>
        <member name="F:MUEngine.EntityVisibleFlag.Story">
            <summary>
            剧情动画控制显隐
            </summary>
        </member>
        <member name="T:MUEngine.ShadowLevel">
            <summary>
            阴影质量
            </summary>
        </member>
        <member name="F:MUEngine.ShadowLevel.None">
            <summary>
            无阴影
            </summary>
        </member>
        <member name="F:MUEngine.ShadowLevel.Low">
            <summary>
            低档阴影
            </summary>
        </member>
        <member name="F:MUEngine.ShadowLevel.High">
            <summary>
            高阴影
            </summary>
        </member>
        <member name="T:MUEngine.Entity">
            <summary>
            Entity 不包含任何属性。
            </summary>
            <summary>
            Transform部分逻辑
            </summary>
        </member>
        <member name="F:MUEngine.Entity.m_EntityObj">
            <summary>
            所有entity属性在Obj中注册
            </summary>
        </member>
        <member name="M:MUEngine.Entity.SetShadowLevel(System.Int32)">
            <summary>
            设置阴影等级
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:MUEngine.Entity.GetShadowLevel">
            <summary>
            获得阴影等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Entity.SetShadowVisible(System.Boolean)">
            <summary>
            设置阴影可见性
            </summary>
            <param name="vis"></param>
        </member>
        <member name="M:MUEngine.Entity.RefreshShadowLevel">
            <summary>
            强制刷新阴影等级
            </summary>
        </member>
        <member name="M:MUEngine.Entity.OnSetShadowLevel(MUEngine.ShadowLevel)">
            <summary>
            应用阴影设置
            </summary>
        </member>
        <member name="P:MUEngine.Entity.IgnoreParentRotation">
            <summary>
            忽略parent的旋转
            </summary>
        </member>
        <member name="M:MUEngine.Entity.GetBindPoint(System.String)">
            <summary>
            获取绑点
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Entity.ApplyForce(System.Single,System.Single,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            为了演示 特殊处理
            </summary>
            <param name="vertical"></param>
            <param name="horizon"></param>
            <param name="localForceDir"></param>
            <param name="mass"></param>
            <param name="drag"></param>        
        </member>
        <member name="M:MUEngine.Entity.ApplyExplosionForce(System.Single,UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            应用explosion force
            </summary>
            <param name="force"></param>
            <param name="explosionPos"></param>
            <param name="explosionRadius"></param>
            <param name="upwardsModifier"></param>
            <param name="mass"></param>
            <param name="drag"></param>
        </member>
        <member name="M:MUEngine.Entity.FindBone(System.String)">
            <summary>
            搜索骨骼(挂点)
            </summary>
            <param name="bone_name"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Entity.SetMaterialByIdx(System.Int32)">
            <summary>
            根据索引切换材质
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MUEngine.Entity.OnSetMaterialByIdx(System.Int32)">
            <summary>
            切换材质
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MUEngine.Entity.ForceSetLayerForEffect(System.Int32)">
            <summary>
            当自己为特效时，设置所有节点的
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:MUEngine.Entity.AddRelateSceneEffect(MUEngine.Entity)">
            <summary>
            添加关联关系，传入为场景特效
            </summary>
            <param name="ent">关联到此Entity的场景特效</param>
        </member>
        <member name="M:MUEngine.Entity.RemoveRelateSceneEffect(MUEngine.Entity)">
            <summary>
            移除关联关系，传入为场景特效
            </summary>
            <param name="ent">关联到此Entity的场景特效</param>
        </member>
        <member name="M:MUEngine.Entity.ModelChange">
            <summary>
            Lua调用，当需要重刷关联场景特效时调用此接口（如变身、死亡、隐身等）
            </summary>
        </member>
        <member name="M:MUEngine.Entity.OnRelateEntityChange">
            <summary>
            关联组件调用，执行者应为场景特效，重新寻找新的关联者
            </summary>
        </member>
        <member name="M:MUEngine.Entity.WalkAttaches(System.Action{MUEngine.Entity})">
            <summary>
            遍历attach
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MUEngine.Entity.WalkAttaches``1(System.Action{MUEngine.Entity,``0},``0)">
            <summary>
            遍历attach
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.Entity.WalkAttaches``1(System.Action{MUEngine.Entity,``0},System.Func{MUEngine.Entity,System.Boolean},``0)">
            <summary>
            遍历attach
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback"></param>
            <param name="filter_func"></param>
            <param name="val"></param>
        </member>
        <member name="P:MUEngine.Entity.LogicVisible">
            <summary>
            逻辑visible
            </summary>
        </member>
        <member name="P:MUEngine.Entity.RenderVisible">
            <summary>
            用户自定义visible
            </summary>
        </member>
        <member name="P:MUEngine.Entity.ResultRenderVisible">
            <summary>
            角色可见性
            </summary>
        </member>
        <member name="M:MUEngine.Entity.LockRenderVisible(System.String,System.Boolean)">
            <summary>
            锁定render visible
            </summary>
            <param name="lock_name"></param>
            <param name="val"></param>
        </member>
        <member name="M:MUEngine.Entity.UnlockRenderVisible(System.String)">
            <summary>
            解锁render visible
            </summary>
            <param name="lock_name"></param>
        </member>
        <member name="M:MUEngine.Entity.SetRenderVisibleWithFlag(MUEngine.EntityVisibleFlag,System.Boolean)">
            <summary>
            根据flag设置角色render visible
            </summary>
            <param name="flag"></param>
            <param name="value"></param>
        </member>
        <member name="M:MUEngine.Entity.SetEnableFlagForAnimator(System.Int32)">
            <summary>
            设置animator放行条件
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:MUEngine.Entity.SetEnableFlagForACT(System.Int32)">
            <summary>
            设置ACT放行条件
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:MUEngine.Entity.GetRenderVisibleMask">
            <summary>
            获得render visible flag
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Entity.OnSetAnimatorEnable(System.Boolean)">
            <summary>
            触发设置animator可用性
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:MUEngine.Entity.AddEntityParam(System.Object,System.Object)">
            <summary>
            向GameObject添加必要的参数
            </summary>
            <param name="key"></param>
            <param name="param"></param>
        </member>
        <member name="M:MUEngine.Entity.SetBound(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            设置bound
            </summary>
            <param name="bx"></param>
            <param name="by"></param>
            <param name="bz"></param>
            <param name="mode">0：zero, 1:1/2h</param>
        </member>
        <member name="M:MUEngine.Entity.Intersect(UnityEngine.Bounds)">
            <summary>
            相交判断
            </summary>
            <param name="boundInScene"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Entity.AddHeadUI(MUEngine.IGameUIComponent,System.Int32,MUEngine.IGamePanel,UnityEngine.GameObject,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            添加头顶名字
            </summary>
            <param name="comp">名字控件</param>
            <param name="type">Canvas容器类型</param>
            <param name="parent">父节点</param>
            <param name="dist">显示距离，超过距离隐藏</param>
            <param name="scaleDist">开始近大远小的距离</param>
            <param name="scaleSpeed">近大远小的速度</param>
            <param name="minScale">最小大小</param>
            <param name="maxScale">最大大小</param>
            <param name="alphaSpeed">透明度变化速度</param>
            <param name="minAlpha">最小透明度</param>
            <param name="maxAlpha">最大透明度</param>
            <param name="delay">延迟时间显示</param>
        </member>
        <member name="M:MUEngine.Entity.RemoveHeadUI">
            <summary>
            删掉头顶名字
            </summary>
        </member>
        <member name="M:MUEngine.Entity.HeadUICloseToCamera(System.Boolean,System.Single)">
            <summary>
            靠近摄像机
            </summary>
            <param name="isClose">是否靠近</param>
            <param name="offsetDist">靠近的距离</param>
        </member>
        <member name="M:MUEngine.Entity.SetHeadUIHeightOffset(System.Single)">
            <summary>
            设置名字板高度偏移值
            </summary>
            <param name="offset">偏移值</param>
        </member>
        <member name="M:MUEngine.Entity.SetChildControlAllHide(System.Boolean)">
            <summary>
            设置是否所有子控件都隐藏了，判断依据在lua层，与游戏逻辑相关
            </summary>
            <param name="flag">标志</param>
        </member>
        <member name="M:MUEngine.Entity.SetHeadUIVisible(System.Boolean)">
            <summary>
            设置是否显示头顶名字板
            </summary>
            <param name="flag">标志</param>
        </member>
        <member name="M:MUEngine.Entity.SetAccuracyParam(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            设置头顶名字板刷新的精度
            </summary>
            <param name="pos">位置变化精度</param>
            <param name="scale">缩放变化精度</param>
            <param name="alpha">透明度变化精度</param>
            <param name="angle">朝向角度变化精度</param>
            <param name="interval">更新间隔精度</param>
        </member>
        <member name="M:MUEngine.Entity.SetHeadUIScale(System.Single)">
            <summary>
            设置头顶名字板缩放
            </summary>
            <param name="scale">缩放</param>
        </member>
        <member name="M:MUEngine.Entity.AddDamageUI(MUEngine.IGameUIComponent,MUEngine.IGamePanel,System.Single,System.Single)">
            <summary>
            添加伤害
            </summary>
            <param name="comp">伤害控件</param>
            <param name="parent">父节点</param>
            /// <param name="maxHeight">最大弹出高度</param>
            /// <param name="newHeight">超过最大高度，设置新的高度</param>
        </member>
        <member name="P:MUEngine.Entity.Angle">
            <summary>
            Y轴的旋转角度
            </summary>
        </member>
        <member name="M:MUEngine.MUFakeEntity.SetAnimatorFloat(System.Int32,System.Single)">
            <summary>
            播放部位动画
            </summary>
            <param name="trigger_hash"></param>
            <param name="val"></param>
        </member>
        <member name="F:MUEngine.MUFakeEntity.PLAYACT">
            <summary>
            动画事件逻辑
            </summary>
            <param name="event_name"></param>
        </member>
        <member name="M:MUEngine.MUGameScene.NearSurface(UnityEngine.Vector3@,System.Int32)">
            <summary>
            保证角色贴地面，先做射线，如果没有再去导航里取.
            </summary>
            <param name="pos"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUGameScene.GetEntityByGameObject(UnityEngine.GameObject)">
            <summary>
            根据GameObject查找实体
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUGameScene.ShowAllTerrainAsTemp(System.Action)">
            <summary>
            临时加载所有地型
            </summary>
            <param name="callback">加载完毕的回调</param>
        </member>
        <member name="M:MUEngine.MUGameScene.ShowTempTerrainAt(UnityEngine.Vector3,System.Action)">
            <summary>
            临时加载某一指定地点的地块
            </summary>
            <param name="position">需要加载地块的位置</param>
            <param name="callback">加载完毕的回调</param>
        </member>
        <member name="M:MUEngine.MUGameScene.ShowTempTerrainAt(System.Collections.Generic.List{UnityEngine.Vector3},System.Action)">
            <summary>
            临时加载指定地点的地块
            </summary>
            <param name="posList">所有需要加载地块的位置</param>
            <param name="callback">加载完毕的回调</param>
        </member>
        <member name="M:MUEngine.MUGameScene.ClearTempTerrain">
            <summary>
            清除所有临时加载的地型
            </summary>
        </member>
        <member name="M:MUEngine.MUGameScene.AddCreateRoleFocusEntity(System.Int32,MUEngine.Entity)">
            <summary>
            添加创角中的当前焦点Entity，保持列表是当前聚焦的角色
            </summary>
            <param name="type">类型 1-创角5角色，2-单选角色，3-角色捏脸</param>
            <param name="entity">角色Entity</param>
        </member>
        <member name="M:MUEngine.MUGameScene.getHeightByType(System.Single,System.Single,System.Single,MUEngine.Check_Height_Type)">
            <summary>
            根据类型（Check_Height_Type），获取高度
            </summary>
        </member>
        <member name="M:MUEngine.MUGameScene.getPositionFlags(System.Single,System.Single,System.Single)">
            <summary>
            获取某位置的Flag
            </summary>
        </member>
        <member name="M:MUEngine.MUGameScene.GetHeight(System.Single,System.Single,System.Single)">
            <summary>
            根据射线，获得当前点对应的地表高度
            </summary>
        </member>
        <member name="F:MUEngine.MURoot._Timer">
            <summary>
            计时器
            </summary>
        </member>
        <member name="F:MUEngine.MURoot._ApplicationPauseCallback">
            <summary>
            application pause 回调
            </summary>
        </member>
        <member name="M:MUEngine.MURoot.SetFlagToUpdateMgr(System.Int32)">
            <summary>
            设置标志位
            </summary>
            <param name="flag"></param>
        </member>
        <member name="P:MUEngine.MURoot.OnApplicationPauseCallback">
            <summary>
            应用暂停时的回调
            </summary>
        </member>
        <member name="T:MUEngine.MUSceneEntityContainer">
            <summary>
            场景Entity管理器
            </summary>
        </member>
        <member name="M:MUEngine.MUSceneEntityContainer.GetEntityByGameObject(UnityEngine.GameObject)">
            <summary>
            通过GameObject搜索Entity
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.MUSceneEntityContainer.GetEntityByID(System.Int32)">
            <summary>
            根据ID搜索entity
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MUEngine.Terrain.MUClusterArgs">
            <summary>
            地形物件聚类参数
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUClusterArgs.ObjectClusterRange">
            <summary>
            单个物件的聚类范围
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUClusterArgs.GroupMinArea">
            <summary>
            分组的最小面积（分组面积小于该值时，需要进一步合并）
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUClusterArgs.GroupMaxDistance">
            <summary>
            分组合并的最大距离（相距超过该值的分组不能互相合并）
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUClusterArgs.ObjectHeightLimit">
            <summary>
            单体物件高度限制（单体高度超过该值的物件不参与拆分）
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUClusterArgs.SetDefaultValue(MUEngine.Terrain.ETerrainObjectType)">
            <summary>
            设置默认参数
            </summary>
            <param name="objectType">物件类型</param>
        </member>
        <member name="T:MUEngine.Terrain.ETerrainObjectType">
            <summary>
            地形物件类型
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.ETerrainObjectType.Sundries">
            <summary>
            杂物
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.ETerrainObjectType.Grass">
            <summary>
            草
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.ETerrainObjectType.Tree">
            <summary>
            树
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.ETerrainObjectType.Effect">
            <summary>
            特效
            </summary>
        </member>
        <member name="T:MUEngine.Terrain.MUTerrainObject">
            <summary>
            场景地形物件
            </summary>
        </member>
        <member name="T:MUEngine.Terrain.MUTerrainObject.EAssetState">
            <summary>
            资源状态
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObject.EAssetState.Unload">
            <summary>
            未加载
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObject.EAssetState.Loading">
            <summary>
            正在加载
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObject.EAssetState.Loaded">
            <summary>
            已加载
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.AssetName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.AssetPath">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.ObjectType">
            <summary>
            物件类型
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.Position">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.Rotation">
            <summary>
            旋转
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.Scale">
            <summary>
            缩放
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.RendererIndexMap">
            <summary>
            Renderer在J4FUELightmapData中的关系映射表
            每两个数字为一组，前者表示Renderer在当前物件的所有Renderer数组中的索引，后者表示它在J4FUELightmapData中的索引
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.ModelArea">
            <summary>
            模型的面积
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.ModelMaxHeight">
            <summary>
            模型的单体最大高度
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.TheGameObject">
            <summary>
            对应的游戏对象
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.Owner">
            <summary>
            自身的持有者
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.OutOfSightTimeSpan">
            <summary>
            离开视野累计时长
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObject.AssetState">
            <summary>
            当前资源状态
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.#ctor">
            <summary>
            供序列化使用的构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.#ctor(MUEngine.Terrain.MUTerrainObjectMark,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="objMark">物件标记</param>
            <param name="assetPath">对应的资源路径</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.GetFormatedScale(UnityEngine.Vector3)">
            <summary>
            对缩放值进行格式化
            </summary>
            <param name="originScale">原始缩放</param>
            <returns>格式化后的缩放值</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.InitializeRendererMap(UnityEngine.GameObject)">
            <summary>
            初始化渲染器映射表
            </summary>
            <param name="gameObj">游戏对象</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.Load">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.RecordOutOfSight(System.Single)">
            <summary>
            记录物件已离开视野
            </summary>
            <param name="deltaTime">距上次更新的时间量</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.Unload">
            <summary>
            卸载资源
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObject.AssetLoadedHandler(System.String,UnityEngine.Object)">
            <summary>
            处理资源加载完毕事件
            </summary>
            <param name="name">资源名称</param>
            <param name="obj">加载得到的资源</param>
        </member>
        <member name="T:MUEngine.Terrain.MUTerrainObjectGroup">
            <summary>
            地形物件分组类
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.ObjectType">
            <summary>
            物件类型
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.AllMaterials">
            <summary>
            分组内包含的材质
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.AllGameObjects">
            <summary>
            分组内的游戏对象列表
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.Count">
            <summary>
            分组内的物件数量
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.AllObjectBounds">
            <summary>
            分组内的物件的包围盒信息
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.GroupBounds">
            <summary>
            分组整体的包围盒信息
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.MeshMaxHeight">
            <summary>
            组内模型的最大高度
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectGroup.GroupArea">
            <summary>
            分组的整体面积
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.#ctor(UnityEngine.GameObject,MUEngine.Terrain.ETerrainObjectType)">
            <summary>
            构造函数
            </summary>
            <param name="gameObj">物件的游戏对象</param>
            <param name="objType">物件类型</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.CreateGroups(MUEngine.Terrain.ETerrainObjectType,System.Collections.Generic.List{UnityEngine.GameObject},MUEngine.Terrain.MUClusterArgs)">
            <summary>
            对物件进行分组
            </summary>
            <param name="objType">物件类型</param>
            <param name="gameObjList">待分组物件的游戏对象</param>
            <param name="args">聚类参数</param>
            <returns>物件的聚类分组列表</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.DivideObjectsByMaterial(System.Collections.Generic.List{UnityEngine.GameObject},MUEngine.Terrain.ETerrainObjectType)">
            <summary>
            根据材质种类将物件划分成不同的分组
            </summary>
            <param name="gameObjList">待划分的物件</param>
            <returns>划分完成的分组列表</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.DivideObjectsByPosition(System.Collections.Generic.List{UnityEngine.GameObject},MUEngine.Terrain.ETerrainObjectType,MUEngine.Terrain.MUClusterArgs)">
            <summary>
            根据位置将物件划分成不同的分组
            </summary>
            <param name="gameObjList">待划分的物件</param>
            <param name="args">聚类参数</param>
            <returns>划分完成的分组列表</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.CheckCanAddByMaterial(UnityEngine.GameObject)">
            <summary>
            检测材质，判断物件是否可以添加到分组内
            </summary>
            <param name="toAddObj">待检测游戏对象</param>
            <returns>是否成功添加到了分组内</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.CheckCanAddByPosition(UnityEngine.GameObject,System.Single)">
            <summary>
            检测位置，判断物件是否可以添加到分组内
            </summary>
            <param name="toAddObj">待检测游戏对象</param>
            <param name="clusterRange">聚类范围</param>
            <returns>是否成功添加到了分组内</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.Merge(MUEngine.Terrain.MUTerrainObjectGroup)">
            <summary>
            将其它分组中的物件合并进来
            </summary>
            <param name="toMergeGroup">需要合并的分组</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.GetObjectBounds(UnityEngine.GameObject)">
            <summary>
            获取物件的包围盒信息
            </summary>
            <param name="gameObj">物件的游戏对象</param>
            <returns>物件的包围盒信息</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.GetMeshBounds(UnityEngine.MeshFilter)">
            <summary>
            获取Mesh的包围盒
            </summary>
            <param name="meshFilter">MeshFilter对象</param>
            <returns>Mesh的包围盒</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectGroup.RecalculateGroupBounds">
            <summary>
            重新计算分组整体的包围盒
            </summary>
            <returns>分组整体的包围盒</returns>
        </member>
        <member name="T:MUEngine.Terrain.MUTerrainObjectManager">
            <summary>
            场景地形物件管理器
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.Instance">
            <summary>
            当前场景的地形物件管理器实例
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.HugeObjectDisplayRange">
            <summary>
            超大型物件的显示范围（与区块间的距离小于该值后，开始显示超大型物件）
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.BigObjectDisplayRange">
            <summary>
            大型物件的显示范围（与区块间的距离小于该值后，开始显示大型物件）
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.MiddleObjectDisplayRange">
            <summary>
            中型物件的显示范围（与区块间的距离小于该值后，开始显示中型物件）
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.SmallObjectDisplayRange">
            <summary>
            小型物件的显示范围（与区块间的距离小于该值后，开始显示小型物件）
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.GrassClusterArgs">
            <summary>
            草的聚类参数
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.SundriesClusterArgs">
            <summary>
            杂物的聚类参数
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.TreeClusterArgs">
            <summary>
            树木的聚类参数
            </summary>
        </member>
        <member name="P:MUEngine.Terrain.MUTerrainObjectManager.AllObjects">
            <summary>
            地形中包含的所有物件
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.HEIGHT_THRESHOLD_HUGE">
            <summary>
            巨型物体临界高度
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.HEIGHT_THRESHOLD_BIG">
            <summary>
            大型物体临界高度
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.HEIGHT_THRESHOLD_MIDDLE">
            <summary>
            中型物体临界高度
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.AREA_THRESHOLD_HUGE">
            <summary>
            巨型物体临界占地面积
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.AREA_THRESHOLD_BIG">
            <summary>
            大型物体临界占地面积
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.AREA_THRESHOLD_MIDDLE">
            <summary>
            中型物体临界占地面积
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.BUFFER_DISTANCE">
            <summary>
            距离缓冲。摄像机离开可见距离超过10米后才开始卸载
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.BUFFER_TIMESPAN">
            <summary>
            时间缓冲。摄像机离开可见距离20秒后才开始卸载
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.UPDATE_FREQUENCY">
            <summary>
            更新频率，每多少帧更新一次
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.currentUpdateCount">
            <summary>
            当前更新计数
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.sumDeltaTime">
            <summary>
            每帧更新的deltaTime的累计值
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.hasUnloadedAll">
            <summary>
            是否已经执行了全部卸载
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.isPlayingStory">
            <summary>
            是否正在播放剧情
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.callback2toLoadObjDict">
            <summary>
            剧情地形物件加载回调，以及对应的待加载物件列表
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectManager.toRemoveCallbackListBuffer">
            <summary>
            用于记录待移除回调的临时缓冲列表
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.UnloadAll">
            <summary>
            卸载所有物件
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.BuildRegions(System.Collections.Generic.List{MUEngine.Terrain.MUTerrainObject})">
            <summary>
            构建地形区块数据
            </summary>
            <param name="terrainObjList">地型物件列表</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.GetObjectRoot(MUEngine.Terrain.ETerrainObjectType)">
            <summary>
            获取地形物件的分类根节点
            </summary>
            <param name="objectType">地形物件类型</param>
            <returns>物件分类根节点</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.LoadAllStoryTerrainObjects">
            <summary>
            加载所有地形物件（供剧情编辑器在制作剧情时调用）
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.LoadStoryTerrainObjects(System.Collections.Generic.List{UnityEngine.Vector3},System.Action)">
            <summary>
            加载剧情中需要使用的地形物件
            </summary>
            <param name="positionList">待加载的坐标列表</param>
            <param name="callback">加载完成的回调</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.UnloadStoryTerrainObjects">
            <summary>
            卸载剧情用到的地形物件
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.RefreshObjectsVisiblity(System.Boolean)">
            <summary>
            刷新所有物件的可见性
            </summary>
            <param name="needSort">是否使用按距离排序后的顺序进行刷新</param>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.CheckCanShowObject(MUEngine.Terrain.ETerrainObjectType)">
            <summary>
            判断是否可以显示某一类型的物件
            </summary>
            <param name="objectType">物件类型</param>
            <returns>该类型的物件是否可以显示</returns>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectManager.GetVisibleDistance(MUEngine.Terrain.MUTerrainObject)">
            <summary>
            获取地形物件的可见距离
            </summary>
            <returns>地形物件的可见距离</returns>
        </member>
        <member name="T:MUEngine.Terrain.MUTerrainObjectMark">
            <summary>
            地形物件标记。用于标记哪些物件是需要被从场景中拆分出来的
            该脚本仅在打包过程中使用
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectMark.ObjectType">
            <summary>
            物件类型
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectMark.SingleModelMaxHeight">
            <summary>
            物件包含的所有模型的单体最大高度
            </summary>
        </member>
        <member name="F:MUEngine.Terrain.MUTerrainObjectMark.ModelArea">
            <summary>
            物件模型的整体占地面积
            </summary>
        </member>
        <member name="M:MUEngine.Terrain.MUTerrainObjectMark.AttachToGameObject(UnityEngine.GameObject,MUEngine.Terrain.MUTerrainObjectGroup)">
            <summary>
            向游戏对象上挂载该标记
            </summary>
            <param name="gameObj">需要挂载标记的游戏对象</param>
            <param name="ownerGroup">游戏对象所在分组</param>
            
        </member>
        <member name="T:MUEngine.MUBezierUtility">
            <summary>
            贝塞尔曲线辅助类
            </summary>
        </member>
        <member name="F:MUEngine.MUBezierUtility.SAMPLING_COUNT">
            <summary>
            计算时使用的采样点数量
            </summary>
        </member>
        <member name="M:MUEngine.MUBezierUtility.GetTangent(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            获取三次贝塞尔曲线上的控制点坐标
            </summary>
            <param name="startPos">曲线的起点</param>
            <param name="endPos">曲线的终点</param>
            <param name="controlpoint">曲线控制点的高度/曲线两点间的直线距离(0 ~ 1)</param>
            <param name="startTan">起点的曲线控制点</param>
            <param name="endTan">终点的曲线控制点</param>
        </member>
        <member name="M:MUEngine.MUBezierUtility.GetCurveNormalDir(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取两点连线上的垂线
            </summary>
        </member>
        <member name="M:MUEngine.MUBezierUtility.GetPoint(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            获取三次贝塞尔曲线上的二维点坐标
            </summary>
            <param name="start">曲线的起点</param>
            <param name="end">曲线的终点</param>
            <param name="startTangent">起点的曲线控制点</param>
            <param name="endTangent">终点的曲线控制点</param>
            <param name="t">比率</param>
            <returns>曲线上的点坐标</returns>
        </member>
        <member name="M:MUEngine.MUBezierUtility.GetPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            获取三次贝塞尔曲线上的三维点坐标
            </summary>
            <param name="start">曲线的起点</param>
            <param name="end">曲线的终点</param>
            <param name="startTangent">起点的曲线控制点</param>
            <param name="endTangent">终点的曲线控制点</param>
            <param name="t">比率</param>
            <returns>曲线上的点坐标</returns>
        </member>
        <member name="M:MUEngine.MUBezierUtility.GetFittingSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取三次贝塞尔曲线的拟合线段集合
            </summary>
            <param name="start">曲线的起点</param>
            <param name="end">曲线的终点</param>
            <param name="startTangent">起点的曲线控制点</param>
            <param name="endTangent">终点的曲线控制点</param>
            <returns>拟合线段集合</returns>
        </member>
        <member name="T:MUEngine.MUBezierCurve">
            <summary>
            三维贝塞尔曲线
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierCurve.Length">
            <summary>
            曲线总长度
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierCurve.NodeCount">
            <summary>
            节点数量
            </summary>
        </member>
        <member name="F:MUEngine.MUBezierCurve.nodeList">
            <summary>
            曲线节点列表
            </summary>
        </member>
        <member name="F:MUEngine.MUBezierCurve.segmentsList">
            <summary>
            曲线线段列表
            </summary>
        </member>
        <member name="M:MUEngine.MUBezierCurve.Create(System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            创建一条贝塞尔曲线
            </summary>
            <param name="nodePositionList">节点位置列表</param>
            <returns>贝塞尔曲线</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.Create(System.Collections.Generic.List{MUEngine.MUBezierNode})">
            <summary>
            创建一条贝塞尔曲线
            </summary>
            <param name="nodeList">节点列表</param>
            <returns>贝塞尔曲线</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetPosition(System.Single)">
            <summary>
            获取曲线上指定位置的点坐标
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <returns>指定位置的点坐标</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetOrientation(System.Single)">
            <summary>
            获取曲线上指定位置的切线方向
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <returns>指定位置的切线方向</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetPositionAndOrientation(System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            获取曲线上指定位置的点坐标和切线方向
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <param name="position">指定位置的点坐标</param>
            <param name="orientation">指定位置的切线方向</param>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetNode(System.Single)">
            <summary>
            获取曲线上指定位置（前方）的节点
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <returns>指定位置（前方）的节点</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetUserData(System.Single)">
            <summary>
            获取曲线上指定位置的用户数据
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <returns>指定位置的用户数据</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetAllNodes">
            <summary>
            获取所有节点
            </summary>
            <returns>包含所有节点的数组</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetNodeByIndex(System.Int32)">
            <summary>
            通过索引获取节点
            </summary>
            <param name="index">节点的索引</param>
            <returns>索引对应的节点</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.AddNode(UnityEngine.Vector3,System.Object)">
            <summary>
            添加节点
            </summary>
            <param name="nodePosition">节点的位置</param>
            <param name="userData">节点的用户数据</param>
        </member>
        <member name="M:MUEngine.MUBezierCurve.InsertNode(System.Int32,UnityEngine.Vector3,System.Object)">
            <summary>
            在指定位置插入节点
            </summary>
            <param name="nodeIndex">节点索引</param>
            <param name="nodePosition">节点的位置</param>
            <param name="userData">节点的用户数据</param>
        </member>
        <member name="M:MUEngine.MUBezierCurve.SetNodeAt(System.Int32,UnityEngine.Vector3,System.Object)">
            <summary>
            设置指定的节点
            </summary>
            <param name="nodeIndex">节点索引</param>
            <param name="nodePosition">节点的新位置</param>
            <param name="userData">节点的用户数据</param>
        </member>
        <member name="M:MUEngine.MUBezierCurve.RemoveNodeAt(System.Int32)">
            <summary>
            移除指定位置的节点
            </summary>
            <param name="nodeIndex">节点的索引</param>
        </member>
        <member name="M:MUEngine.MUBezierCurve.GetLengthBetween(System.Int32,System.Int32)">
            <summary>
            获取两个节点之间的曲线长度
            </summary>
            <param name="nodeIndex1">节点1索引</param>
            <param name="nodeIndex2">节点2索引</param>
            <returns>节点之间的曲线长度</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurve.Rebuild">
            <summary>
            重新构建曲线
            </summary>
        </member>
        <member name="M:MUEngine.MUBezierCurve.AdjustNode(System.Int32)">
            <summary>
            调整节点，根据节点的相邻节点情况将其转为曲线或直线节点
            </summary>
            <param name="index">节点的索引</param>
        </member>
        <member name="M:MUEngine.MUBezierCurve.RebuildSegments">
            <summary>
            重新构建曲线线段
            </summary>
        </member>
        <member name="T:MUEngine.MUBezierCurveSegment">
            <summary>
            贝塞尔曲线上的曲线段
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierCurveSegment.Start">
            <summary>
            起点
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierCurveSegment.End">
            <summary>
            终点
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierCurveSegment.IsCurve">
            <summary>
            是否为曲线
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierCurveSegment.Length">
            <summary>
            线段的长度
            </summary>
        </member>
        <member name="F:MUEngine.MUBezierCurveSegment.cachedFittingSegments">
            <summary>
            缓存的拟合线段
            </summary>
        </member>
        <member name="M:MUEngine.MUBezierCurveSegment.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.MUBezierCurveSegment.#ctor(MUEngine.MUBezierNode,MUEngine.MUBezierNode)">
            <summary>
            构造函数
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
        </member>
        <member name="M:MUEngine.MUBezierCurveSegment.GetPosition(System.Single)">
            <summary>
            获取曲线上指定位置的点坐标
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <returns>指定位置的点坐标</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurveSegment.GetOrientation(System.Single)">
            <summary>
            获取曲线上指定位置的切线方向
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <returns>指定位置的切线方向</returns>
        </member>
        <member name="M:MUEngine.MUBezierCurveSegment.GetPositionAndOrientation(System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            获取曲线上指定位置的点坐标和切线方向
            </summary>
            <param name="t">指定位置所在比例（0-1）</param>
            <param name="position">指定位置的点坐标</param>
            <param name="orientation">指定位置的切线方向</param>
        </member>
        <member name="M:MUEngine.MUBezierCurveSegment.Rebuild">
            <summary>
            重新构建
            </summary>
        </member>
        <member name="T:MUEngine.MUBezierNode">
            <summary>
            贝塞尔曲线上的节点
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierNode.Position">
            <summary>
            节点的位置
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierNode.UserData">
            <summary>
            用户数据
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierNode.EnterAsCurve">
            <summary>
            是否以曲线形式进入该节点
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierNode.EnterControl">
            <summary>
            进入该节点的曲线控制点
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierNode.LeaveAsCurve">
            <summary>
            是否以曲线形式离开该节点
            </summary>
        </member>
        <member name="P:MUEngine.MUBezierNode.LeaveControl">
            <summary>
            离开该节点的曲线控制点
            </summary>
        </member>
        <member name="M:MUEngine.MUBezierNode.Create(UnityEngine.Vector3,System.Object)">
            <summary>
            创建一个节点
            </summary>
            <param name="position">节点的位置</param>
            <param name="userData">用户数据</param>
            <returns>新创建的节点</returns>
        </member>
        <member name="T:MUEngine.MULineSegment">
            <summary>
            简单直线线段
            </summary>
        </member>
        <member name="P:MUEngine.MULineSegment.Start">
            <summary>
            线段起点
            </summary>
        </member>
        <member name="P:MUEngine.MULineSegment.End">
            <summary>
            线段终点
            </summary>
        </member>
        <member name="P:MUEngine.MULineSegment.Length">
            <summary>
            线段长度
            </summary>
        </member>
        <member name="P:MUEngine.MULineSegment.Orientation">
            <summary>
            朝向
            </summary>
        </member>
        <member name="M:MUEngine.MULineSegment.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            构造函数
            </summary>
            <param name="start">线段起点</param>
            <param name="end">线段终点</param>
        </member>
        <member name="T:MUEngine.ExtensionMethodUtil">
            <summary>
            扩展方法辅助类
            </summary>
        </member>
        <member name="M:MUEngine.ExtensionMethodUtil.SafeInvoke(System.Action)">
            <summary>
            附带判空处理的执行Action操作
            </summary>
            <param name="action">待执行的Action</param>
        </member>
        <member name="M:MUEngine.MathUtil.DistanceTo(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            计算两个向量的距离
            </summary>
            <param name="a"></param>
            <param name="to">目标向量</param>
            <remarks>如果仅需要比较距离，请使用SqrDistanceTo</remarks>
            <returns>距离</returns>
        </member>
        <member name="M:MUEngine.MathUtil.SqrDistanceTo(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            计算两个向量距离的平方，如果仅需要比较距离，请使用这个，性能较高
            </summary>
            <param name="a"></param>
            <param name="to">目标向量</param>
            <returns>距离</returns>
        </member>
        <member name="T:MUEngine.Story.ActorBoneController">
            <summary>
            演员骨骼控制脚本
            </summary>
        </member>
        <member name="P:MUEngine.Story.ActorBoneController.LookAtRotation">
            <summary>
            骨头的目标朝向
            </summary>
        </member>
        <member name="P:MUEngine.Story.ActorBoneController.BlendWeidght">
            <summary>
            混合权重。0为原始朝向，1为控制器中的朝向
            </summary>
        </member>
        <member name="P:MUEngine.Story.ActorBoneController.CurrentRotation">
            <summary>
            骨头的当前朝向
            </summary>
        </member>
        <member name="T:MUEngine.Story.EActorShadowLevel">
            <summary>
            演员阴影等级
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryActor">
            <summary>
            剧情演员组件的基类
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.ResourceName">
            <summary>
            资源文件名称
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.StartScale">
            <summary>
            起始缩放
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.HideWhenStart">
            <summary>
            剧情开始时是否处于隐藏状态
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.OnlyUsedInHighQuality">
            <summary>
            是否仅在高配时使用
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.ShadowLevel">
            <summary>
            阴影等级
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.ActorElements">
            <summary>
            演员身体部件
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.UseUIMaterial">
            <summary>
            使用UI材质
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.Layer">
            <summary>
            层级。值为负数时不进行设置
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.IsEnable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.Visible">
            <summary>
            演员是否可见
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.ActorEntity">
            <summary>
            对应的演员实体
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.ActorGameObject">
            <summary>
            演员对应的游戏对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.Position">
            <summary>
            演员的位置
            设置该属性时，会自动将演员贴合到地面
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.ActualPosition">
            <summary>
            实际位置，按骨骼根节点位置计算
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetPosition(UnityEngine.Vector3,System.Boolean)">
            <summary>
            设置演员的位置
            </summary>
            <param name="position">位置</param>
            <param name="snapToGround">是否贴合到地面</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.MoveSlerp(UnityEngine.Vector3,System.Single)">
            <summary>
            弧线（球形插值）移动
            </summary>
            <param name="targetPos">目标点位置</param>
            <param name="timeSpan">移动时长</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.StopSlerp">
            <summary>
            停止弧线移动
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.Rotation">
            <summary>
            当前朝向
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.RotationVector3">
            <summary>
            当前朝向对应的Vector3
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.Forward">
            <summary>
            演员的前向方向
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.Scale">
            <summary>
            当前缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.AnimationSpeed">
            <summary>
            动画播放速度
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.CullingMode">
            <summary>
            动画剔除类型
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.GetAnimationNameList">
            <summary>
            获取动画名称列表
            </summary>
            <returns>动画名称列表</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.GetClipLength(System.String)">
            <summary>
            获取动画片段时度
            </summary>
            <param name="animationName">动画名称</param>
            <returns>动画时长，动画不存在时返回-1</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PlayAnimation(System.String,System.Single)">
            <summary>
            播放动画
            </summary>
            <param name="animationName">动画名称</param>
            <param name="normalizedTime">起始时间（0-1）</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.CrossFade(System.String,System.Single,System.Single)">
            <summary>
            播放带有淡入淡出效果的动画
            </summary>
            <param name="animationName">动画名称</param>
            <param name="transitionDuration">淡入淡出时间（秒）</param>
            <param name="fixedTime">起始时间（秒）</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PreloadStory(System.String,System.Action{UnityEngine.AnimationClip})">
            <summary>
            预加载剧情动画
            </summary>
            <param name="stateName">状态名称</param>
            <param name="callback">加载完成的回调</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.ResetAnimator(System.Single)">
            <summary>
            重置动画
            </summary>
            <param name="transitionTime">过渡时间</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PreloadAnim(System.String,System.Action{System.Boolean})">
            <summary>
            预加载触发器对应的动画
            </summary>
            <param name="triggerName">触发器名称</param>
            <param name="loadedCallback">加载完成的回调</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PlayAnimByAnimator(System.String)">
            <summary>
            播放动画状态机触发器
            </summary>
            <param name="triggerName">触发器名称</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetAnimatorInt(System.String,System.Int32)">
            <summary>
            为动画状态机设置int值
            </summary>
            <param name="triggerName">触发器名称</param>
            <param name="value">数值</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetAnimatorFloat(System.String,System.Single)">
            <summary>
            为动画状态机设置float值
            </summary>
            <param name="triggerName">触发器名称</param>
            <param name="value">数值</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PreloadAct(System.String,System.Action)">
            <summary>
            预加载ACT
            </summary>
            <param name="actName">ACT名称</param>
            <param name="loadedCallback">加载完毕的回调</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PlayAct(System.String)">
            <summary>
            播放ACT
            </summary>
            <param name="actName">ACT名称</param>
            <returns>播放的ACT</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PlayAct(System.String,UnityEngine.Vector3)">
            <summary>
            播放ACT
            </summary>
            <param name="actName">ACT名称</param>
            <param name="targetPosition">目标位置</param>
            <returns>播放的ACT</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PlayAct(System.String,MUEngine.Story.StoryActor)">
            <summary>
            播放ACT
            </summary>
            <param name="actName">ACT名称</param>
            <param name="target">目标演员</param>
            <returns>播放的ACT</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.StopAct(System.String)">
            <summary>
            停止ACT
            </summary>
            <param name="actName">ACT名称</param>
        </member>
        <member name="F:MUEngine.Story.StoryActor.ELEMENT_NAMES">
            <summary>
            部件显示名称（与EPlayerElement枚举一一对应）
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.AddElement(MUEngine.EPlayerElement,System.String)">
            <summary>
            为演员添加（设置）部件
            </summary>
            <param name="elementType">部件类型</param>
            <param name="resourceName">部件的资源名称</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.AddElement(MUEngine.Story.StoryActorElement)">
            <summary>
            为演员添加（设置）部件
            </summary>
            <param name="actorElement">演员部件</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.ChangeElementColor(MUEngine.EPlayerElement,UnityEngine.Color,System.Int32)">
            <summary>
            更换演员部件的颜色
            </summary>
            <param name="elementType">部件类型</param>
            <param name="color">颜色值</param>
            <param name="index">索引</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.ChangeElementColor(MUEngine.Story.CustomElementColor,System.Int32)">
            <summary>
            更换演员部件的颜色
            </summary>
            <param name="customColor">自定义颜色</param>
            <param name="index">索引</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.RemoveElement(MUEngine.EPlayerElement)">
            <summary>
            移除演员身上的部件
            </summary>
            <param name="elementType">部件类型</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetElementVisibe(MUEngine.EPlayerElement,System.Boolean)">
            <summary>
            设置部件的可见性
            </summary>
            <param name="elementType">部件类型</param>
            <param name="isVisible"></param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.GetElementDisplayName(MUEngine.EPlayerElement)">
            <summary>
            获取部件的显示名称
            </summary>
            <param name="elementType">部件类型</param>
            <returns>部件的显示名称</returns>
        </member>
        <member name="P:MUEngine.Story.StoryActor.AllBindPoints">
            <summary>
            全部绑点列表
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.BipRoot">
            <summary>
            骨骼根节点，不存在时返回空
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.AddAttach(System.String,System.String)">
            <summary>
            添加附件挂载
            </summary>
            <param name="name">附件资源名称</param>
            <param name="bd">挂载点名称</param>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.AddAttach(MUEngine.Entity,System.String)">
            <summary>
            添加附件挂载
            </summary>
            <param name="itemEntity">需要挂载的附件</param>
            <param name="bd">挂载点名称</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.RemoveAttach(MUEngine.Entity,System.Boolean)">
            <summary>
            移除附件的挂载
            </summary>
            <param name="itemEntity">需要移除的附件</param>
            <param name="noDelete">移除时是否不进行删除（可用于自行缓存）</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.GetNode(System.String)">
            <summary>
            获取节点
            </summary>
            <param name="nodeName">节点名称</param>
            <returns>对应的节点，未找到时返回空</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.ShowNode(System.String)">
            <summary>
            显示节点
            </summary>
            <param name="nodeName">节点名称</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.HideNode(System.String)">
            <summary>
            隐藏节点
            </summary>
            <param name="nodeName">节点名称</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.GetBoneController(System.String)">
            <summary>
            获取骨骼控制器
            </summary>
            <param name="boneName">骨骼名称</param>
            <returns>骨骼控制器</returns>
        </member>
        <member name="P:MUEngine.Story.StoryActor.AllMaterials">
            <summary>
            演员身上的所有材质
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.GetMaterial(System.String)">
            <summary>
            根据名称获取材质
            </summary>
            <param name="materialName">材质名称</param>
            <returns>获取到的材质，获取失败时返回空</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetMaterialMode(System.Boolean)">
            <summary>
            设置材质模式
            </summary>
            <param name="isUI">是否为UI材质。 true:UI材质; false:普通材质</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetLayer(System.Int32)">
            <summary>
            设置层级
            </summary>
            <param name="layer">层级</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetIsLurk(System.Boolean)">
            <summary>
            设置是否隐身
            </summary>
            <param name="isLurk">是否隐身</param>
        </member>
        <member name="M:MUEngine.Story.StoryActor.SetShadowLevel(MUEngine.Story.EActorShadowLevel)">
            <summary>
            设置阴影等级
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.GetShadowLevel">
            <summary>
            获取当前阴影等级
            </summary>
            <returns>当前阴影等级</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.PrePlay">
            <summary>
            播放开始前的预处理
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.AfterPlay">
            <summary>
            播放完毕的后续处理
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.SnapToGroundWhenEdit">
            <summary>
            编辑时是否保存贴合地面
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.AutoSetInitState">
            <summary>
            是否自动设置演员的初始状态
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.EditorReloadModel">
            <summary>
            （供编辑器调用）重新加载模型
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.EditorSaveCurrentState">
            <summary>
            （供编辑器调用）保存组件当前状态
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.actorEntity">
            <summary>
            实际使用的演员实体
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.needReloadAnimation">
            <summary>
            是否需要重新载入动画
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActor.TheAnimator">
            <summary>
            角色对应的动画播放器
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.allAnimations">
            <summary>
            全部动画列表
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryActor.editorControl">
            <summary>
            编辑器模式下的控制器
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.OnDestroyStoryComponent">
            <summary>
            响应销毁
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.OnLoadResource">
            <summary>
            响应加载资源
            </summary>
            <returns>加载是否完成</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.OnGetActorEntity">
            <summary>
            获取（C#）演员实体。该方法会在加载资源时被调用
            </summary>
            <returns>演员实体</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.OnActorAssetLoadFinished">
            <summary>
            处理演员实体的资源加载完毕事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.ReloadAnimation">
            <summary>
            重新加载动画相关资源
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.LoadAllActorElements">
            <summary>
            加载所有演员部件
            </summary>
            <returns>加载是否完成</returns>
        </member>
        <member name="M:MUEngine.Story.StoryActor.ActorElementLoadFinishedHandler(System.Object,System.EventArgs)">
            <summary>
            处理演员部件资源加载完毕事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActor.FindNode(UnityEngine.GameObject,System.String)">
            <summary>
            根据名称查找节点
            </summary>
            <param name="gameObj">游戏对象</param>
            <param name="nodeName">节点名称</param>
            <returns>名称对应的节点</returns>
        </member>
        <member name="T:MUEngine.Story.CustomElementColor">
            <summary>
            自定义部件颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.CustomElementColor.IsEnable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:MUEngine.Story.CustomElementColor.IsEnableInEditor">
            <summary>
            在编辑器的界面中是否显示为启用
            </summary>
        </member>
        <member name="P:MUEngine.Story.CustomElementColor.ColorParam">
            <summary>
            颜色参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.CustomElementColor.TheColor">
            <summary>
            实际颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.CustomElementColor.OwnerElement">
            <summary>
            持有者部件
            </summary>
        </member>
        <member name="M:MUEngine.Story.CustomElementColor.#ctor(MUEngine.Story.StoryActorElement)">
            <summary>
            构造函数
            </summary>
            <param name="ownerElement">持有者部件</param>
        </member>
        <member name="M:MUEngine.Story.CustomElementColor.#ctor(System.String,MUEngine.Story.StoryActorElement)">
            <summary>
            构造函数
            </summary>
            <param name="colorParam">颜色参数</param>
            <param name="ownerElement">持有者部件</param>
        </member>
        <member name="T:MUEngine.Story.StoryActorElement">
            <summary>
            剧情演员的身体部件类
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActorElement.ElementType">
            <summary>
            部件类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActorElement.ResourceName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActorElement.ParamedResourceName">
            <summary>
            通过动态传参实际获取到的资源名
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActorElement.CustomColor1">
            <summary>
            自定义颜色1
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActorElement.CustomColor2">
            <summary>
            自定义颜色2
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActorElement.HasResourceLoaded">
            <summary>
            资源是否已经加载
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryActorElement.OwnerActor">
            <summary>
            持有者演员
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryActorElement.LoadFinished">
            <summary>
            资源加载完毕事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryActorElement.#ctor(MUEngine.Story.StoryActor)">
            <summary>
            构造函数
            </summary>
            <param name="ownerActor">持有者演员</param>
        </member>
        <member name="M:MUEngine.Story.StoryActorElement.#ctor(MUEngine.Story.StoryActor,MUEngine.Story.JsonActorElement)">
            <summary>
            构造函数
            </summary>
            <param name="ownerActor">持有者演员</param>
            <param name="jsonActorElement">对应的JsonActorElement对象</param>
        </member>
        <member name="M:MUEngine.Story.StoryActorElement.LoadResource">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryParticleActor">
            <summary>
            剧情粒子演员组件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryParticleActor.PlayParticle(System.Single)">
            <summary>
            播放粒子
            </summary>
            <param name="startTime">起始时间</param>
        </member>
        <member name="M:MUEngine.Story.StoryParticleActor.SetParticleTime(System.Single)">
            <summary>
            设置粒子的当前时间，用于编辑器模式预览
            </summary>
            <param name="curTime">当前时间</param>
        </member>
        <member name="M:MUEngine.Story.StoryParticleActor.PauseParticle">
            <summary>
            暂停粒子播放
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryParticleActor.ResumeParticle">
            <summary>
            恢复粒子播放
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryParticleActor.StopParticle">
            <summary>
            停止粒子播放
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryParticleActor.GetNormalizedTime(System.Single,System.Single)">
            <summary>
            获取单位化的时间（0－1）
            </summary>
            <param name="realTime">真实时间</param>
            <param name="clipLength">动画总长</param>
            <returns>单位化的时间</returns>
        </member>
        <member name="T:MUEngine.Story.EAudioType">
            <summary>
            音频类型
            </summary>
        </member>
        <member name="F:MUEngine.Story.EAudioType.Effect">
            <summary>
            音效、对话语音
            </summary>
        </member>
        <member name="F:MUEngine.Story.EAudioType.BGM">
            <summary>
            背景音乐
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryAudioManager">
            <summary>
            剧情音频管理器
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryAudioManager.PrePlayStory(MUEngine.Story.MUStory)">
            <summary>
            播放剧情前的预处理操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryAudioManager.AfterPlayStory(MUEngine.Story.MUStory)">
            <summary>
            剧情播放完毕的后续操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryAudioManager.GetVolumn(MUEngine.Story.EAudioType)">
            <summary>
            获取游戏内音量设置
            </summary>
            <param name="audioType">音频类型</param>
            <returns>对应的游戏内音量</returns>
        </member>
        <member name="M:MUEngine.Story.StoryAudioManager.GetDebugAudioClip(System.String)">
            <summary>
            获取调试用音频片段（直接存放在project项目中的音频资源）
            </summary>
            <param name="assetName">资源名称</param>
            <returns>调试用音频片段</returns>
        </member>
        <member name="M:MUEngine.Story.StoryAudioManager.GetAudioLength(System.String,System.Action{System.Single})">
            <summary>
            获取音频长度
            </summary>
            <param name="assetName">资源名称</param>
            <param name="callback">获取到长度的回调</param>
        </member>
        <member name="T:MUEngine.Story.StoryAudioPlayer">
            <summary>
            剧情音频播放器组件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryAudioPlayer.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryAudioPlayer.Volume">
            <summary>
            音量
            </summary>
        </member>
        <member name="T:MUEngine.Story.MUCameraState">
            <summary>
            摄像机状态类
            用于在切换摄像机时记录和恢复主摄像机的状态
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUCameraState.Position">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUCameraState.Rotation">
            <summary>
            旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUCameraState.FieldOfView">
            <summary>
            视角范围
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUCameraState.FarClipPlane">
            <summary>
            远裁切面
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUCameraState.NearClipPlane">
            <summary>
            近裁切面
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUCameraState.#ctor(MUEngine.MUCamera)">
            <summary>
            构造函数
            </summary>
            <param name="muCamera">需要被记录的主摄像机</param>
        </member>
        <member name="M:MUEngine.Story.MUCameraState.Restore(MUEngine.MUCamera,MUEngine.Story.MUStory)">
            <summary>
            恢复游戏主摄像机状态
            </summary>
            <param name="muCamera">需要恢复状态的摄像机</param>
            <param name="playingStory">正在播放的剧情</param>
        </member>
        <member name="T:MUEngine.Story.StoryCamera">
            <summary>
            剧情摄像机组件
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCamera.StartFieldOfView">
            <summary>
            起始视角范围
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCamera.StartFarClipPlane">
            <summary>
            远裁切面，如为－1则不做处理
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCamera.StartNearClipPlane">
            <summary>
            近裁切面，如为-1则不做处理
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCamera.UseGameInitState">
            <summary>
            是否以剧情开始前的主摄像机状态作为剧情摄像机的初始状态
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.Position">
            <summary>
            摄像机的位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.Rotation">
            <summary>
            摄像机的旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.RotationVector3">
            <summary>
            当前朝向对应的Vector3
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.Forward">
            <summary>
            摄像机的前方方向
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.Right">
            <summary>
            摄像机的右方方向
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.Up">
            <summary>
            摄像机的上方方向
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.FieldOfView">
            <summary>
            视角范围
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.FarClipPlane">
            <summary>
            远裁切面
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.NearClipPlane">
            <summary>
            近裁切面
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCamera.AutoSetInitState">
            <summary>
            是否自动设置演员的初始状态
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCamera.dummyCamera">
            <summary>
            在编辑器时用于占位的摄像机
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCamera.realCamera">
            <summary>
            实际的摄像机
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCamera.lastPosition">
            <summary>
            摄像机的上一个位置
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryCamera.LoadTerrainNearPath">
            <summary>
            加载摄像机所经路径附近的地块
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryCamera.UpdateLodPosition">
            <summary>
            更新LOD位置
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryCamera.AttachRealCamera(UnityEngine.Camera)">
            <summary>
            挂载实际的摄像机
            </summary>
            <param name="camera">实际使用的摄像机</param>
        </member>
        <member name="M:MUEngine.Story.StoryCamera.DetachRealCamera">
            <summary>
            取消真正的摄像机的挂载
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryCameraManager">
            <summary>
            剧情摄像机管理器
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryCameraManager.ActiveCamera">
            <summary>
            当前处于激活状态的剧情摄像机
            如果为空，则表示当前激活的是游戏的主摄像机
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryCameraManager.cameraQueue">
            <summary>
            摄像机队列，排在队首的会被激活
            如果事件中的摄像机为空，则启用游戏主摄像机
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryCameraManager.EnableStoryCamera(MUEngine.Story.IEnableCameraEvent)">
            <summary>
            启用剧情摄像机
            </summary>
            <param name="cameraEvent">需要启用的摄像机</param>
        </member>
        <member name="M:MUEngine.Story.StoryCameraManager.DisableStoryCamera(MUEngine.Story.IEnableCameraEvent)">
            <summary>
            禁用剧情摄像机
            </summary>
            <param name="cameraEvent">需要禁用的摄像机事件</param>
        </member>
        <member name="M:MUEngine.Story.StoryCameraManager.PrePlayStory(MUEngine.Story.MUStory)">
            <summary>
            记录当前游戏主摄像机的状态
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryCameraManager.AfterPlayStory(MUEngine.Story.MUStory)">
            <summary>
            恢复游戏主摄像机的状态
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryCameraManager.ChangeCamera(MUEngine.Story.StoryCamera)">
            <summary>
            切换摄像机
            </summary>
            <param name="newCamera">新的摄像机</param>
        </member>
        <member name="M:MUEngine.Story.StoryCameraManager.AttachToStoryCamera(MUEngine.MUCamera,MUEngine.Story.StoryCamera)">
            <summary>
            将游戏摄像机持载到剧情摄像机上
            </summary>
            <param name="gameCamera">游戏摄像机</param>
            <param name="storyCamera">剧情摄像机</param>
        </member>
        <member name="M:MUEngine.Story.StoryCameraManager.DetachGameCamera(MUEngine.MUCamera,MUEngine.Story.StoryCamera)">
            <summary>
            将游戏摄像机从剧情摄像机上分离
            </summary>
            <param name="gameCamera">游戏摄像机</param>
            <param name="storyCamera">剧情摄像机</param>
        </member>
        <member name="T:MUEngine.Story.StoryEffect">
            <summary>
            剧情特效组件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEffect.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryEffectManager">
            <summary>
            剧情特效管理器
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEffectManager.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEffectManager.HSV">
            <summary>
            调整画面HSV的Shader
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEffectManager.MotionBlur">
            <summary>
            动态模糊Shader
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEffectManager.AllMaterialSetters">
            <summary>
            场景中的所有材质设置器
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEffectManager.AllStorySceneObjects">
            <summary>
            场景中的所有剧情可控物体
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryEffectManager.allEffectRecords">
            <summary>
            特效状态记录列表
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryEffectManager.intiLodHero">
            <summary>
            原始LOD主角
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.DisableLOD">
            <summary>
            禁用LOD
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.EnableLOD">
            <summary>
            启用LOD
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.PrePlayStory(MUEngine.Story.MUStory)">
            <summary>
            播放剧情前的预处理操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.SaveAllEffectRecords(MUEngine.Story.MUStory)">
            <summary>
            记录所有当前特效状态
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.SetLightEffectToStoryMode">
            <summary>
            将LightFaceEffect切换为剧情状态
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.SetLodToStoryMode(MUEngine.Story.MUStory)">
            <summary>
            将LOD设置为剧情模式
            </summary>
            <param name="story">剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.AfterPlayStory(MUEngine.Story.MUStory)">
            <summary>
            剧情播放完毕的后续操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.DisableAllShader">
            <summary>
            停用所有特效着色器
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.ResumeAllEffectRecords">
            <summary>
            恢复所有之前记录下来的特效状态
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.SetLodToNormalMode(MUEngine.Story.MUStory)">
            <summary>
            将LOD设置为通常模式
            </summary>
            <param name="story">剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.SetLightEffectToNormalMode">
            <summary>
            将LightFaceEffect切换为通常模式
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEffectManager.ResetCachedObjects">
            <summary>
            重置缓存的游戏对象
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryMaterialSetter">
            <summary>
            剧情材质设置器
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryMaterialSetter.ID">
            <summary>
            设置器的ID
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryMaterialSetter.StoryMaterial">
            <summary>
            剧情中使用的材质
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryMaterialSetter.originMaterial">
            <summary>
            持有者的原始材质
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryMaterialSetter.ChangeToStoryMaterial">
            <summary>
            将材质替换为剧情中的材质
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryMaterialSetter.RevertToOriginMaterial">
            <summary>
            还原为原始材质
            </summary>
        </member>
        <member name="T:MUEngine.Story.BaseStoryShader">
            <summary>
            剧情着色器基类
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseStoryShader.ShaderName">
            <summary>
            着色器名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseStoryShader.ShaderMaterial">
            <summary>
            使用Shader的材质
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseStoryShader.IsEnable">
            <summary>
            是否已启用
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseStoryShader.EnableShader">
            <summary>
            启用着色器
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseStoryShader.OnEnableShader">
            <summary>
            启用着色器，由子类进行覆写
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseStoryShader.DisableShader">
            <summary>
            禁用着色器
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseStoryShader.OnDisableShader">
            <summary>
            禁用着色器，由子类进行覆写
            </summary>
        </member>
        <member name="P:MUEngine.Story.HSVShader.H">
            <summary>
            色相（H值）  范围：-1 ~ 1
            </summary>
        </member>
        <member name="P:MUEngine.Story.HSVShader.S">
            <summary>
            饱合度（S值）  范围： -1 ~ 1
            </summary>
        </member>
        <member name="P:MUEngine.Story.HSVShader.V">
            <summary>
            明度（V值）  范围： -1 ~ 1
            </summary>
        </member>
        <member name="T:MUEngine.Story.MotionBlurShader">
            <summary>
            动态模糊着色器
            </summary>
        </member>
        <member name="P:MUEngine.Story.MotionBlurShader.Strength">
            <summary>
            动态模糊的强度
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryPlayback">
            <summary>
            剧情播放组件，用于控制剧情的播放参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryPlayback.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="T:MUEngine.Story.BaseRecord">
            <summary>
            状态记录类
            用于记录当前的一些特效状态，并提供在之后恢复状态的接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseRecord.HasRecorded">
            <summary>
            是否已经进行了记录
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseRecord.CheckNeedSave(MUEngine.Story.MUStory)">
            <summary>
            检测是否需要保存
            </summary>
            <param name="story">对应的剧情</param>
            <returns>是否需要保存</returns>
        </member>
        <member name="M:MUEngine.Story.BaseRecord.Save">
            <summary>
            把当前状态记录下来
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseRecord.Resume">
            <summary>
            恢复之前的记录
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseRecord.OnSave">
            <summary>
            记录当前状态
            </summary>
            <returns>是否成功记录</returns>
        </member>
        <member name="M:MUEngine.Story.BaseRecord.OnResume">
            <summary>
            使用之前的记录恢复状态
            </summary>
        </member>
        <member name="T:MUEngine.Story.SunLightRecord">
            <summary>
            主光状态记录器
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryComponent">
            <summary>
            剧情组件的基类
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.DefaultName">
            <summary>
            默认组件名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.IsEnable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.OwnerStory">
            <summary>
            持有该组件的剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.Timeline">
            <summary>
            对应的时间线
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.SetStory(MUEngine.Story.MUStory)">
            <summary>
            设置父级剧情
            </summary>
            <param name="story">父级剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.Initialize">
            <summary>
            初始化，会在组件刚创建时被调用
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.OnInitialize">
            <summary>
            初始化，可由子类覆写。
            会在加载资源之前被调用
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.HasResourceLoaded">
            <summary>
            相关资源是否已经加载
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryComponent.ResourceLoaded">
            <summary>
            资源加载完成事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.LoadResource">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.OnLoadResource">
            <summary>
            加载资源，需要由子类覆写
            </summary>
            <returns>资源加载是否已经完成。如果是异步加载，需要返回false，并在加载完成后自行设置IsResourceLoaded属性</returns>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.RaiseResourceLoaded">
            <summary>
            触发资源加载完毕事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.PrePlay">
            <summary>
            开始播放前执行的预处理操作
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.AfterPlay">
            <summary>
            播放完毕的后续操作
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryComponent.PropertyChanged">
            <summary>
            属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.RaisePropertyChanged(System.String)">
            <summary>
            发起属性变更事件
            </summary>
            <param name="propName">产生变更的属性名称</param>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.OnPropertyChanged(System.String)">
            <summary>
            响应属性变更，可由子类覆写
            </summary>
            <param name="propName">产生变更的属性名称</param>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.OnDestroy">
            <summary>
            销毁剧情组件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.OnDestroyStoryComponent">
            <summary>
            销毁自身并释放资源，需要由子类覆写
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.SavedState">
            <summary>
            之前记录下来的状态
            用于供编辑器在进行一些刷新操作时作为比较依据
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.EditorSaveCurrentState">
            <summary>
            编辑器调用，记录当前状态
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.EditorSelected(System.Boolean)">
            <summary>
            响应编辑器选中操作
            </summary>
            <param name="isDoubleClick">是否为双击</param>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.EditorSetDefaultValue">
            <summary>
            编辑器调用，设置初始默认值
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.ID">
            <summary>
            序列化时使用的ID
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.FTag">
            <summary>
            Flux专用标签。方便外部通过标签名称获取对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryComponent.JsonType">
            <summary>
            对应的JsonStoryComponent的类型
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.ToJsonObject(System.Int32)">
            <summary>
            转换为序列化时使用的Json剧情组件
            </summary>
            <param name="id">保存到JSON文件中时所使用的ID</param>
            <returns>对应的JSON数据对象</returns>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.OnSetValueToJsonComponent(MUEngine.Story.JsonStoryComponent)">
            <summary>
            序列化时为目标JSON数据对象赋值
            </summary>
            <param name="target">需要赋值的目标JSON数据对象</param>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.FromJsonObject(MUEngine.Story.JsonStoryComponent)">
            <summary>
            根据JSON数据对象来生成对应的FEvent
            </summary>
            <param name="jComponent">JSON数据对象</param>
        </member>
        <member name="M:MUEngine.Story.StoryComponent.OnGetValueFromJsonEvent(MUEngine.Story.JsonStoryComponent)">
            <summary>
            反序列化时从JSON数据对象中获取值
            </summary>
            <param name="source">带有数据的JSON数据对象</param>
        </member>
        <member name="T:MUEngine.Story.StoryComponentState">
            <summary>
            剧情组件状态基类
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryActorState">
            <summary>
            剧情角色状态
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryEntity3D">
            <summary>
            存在于3D场景中的剧情组件
            提供组件当前位置的接口
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryEntity3D.StartPosition">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryEntity3D.StartRotation">
            <summary>
            起始朝向
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEntity3D.Position">
            <summary>
            组件的当前逻辑位置
            该属性不会被保存到JSON文件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEntity3D.ActualPosition">
            <summary>
            组件的实际位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEntity3D.Rotation">
            <summary>
            组件的当前朝向
            </summary>
        </member>
        <member name="T:MUEngine.Story.IStoryUIWidget">
            <summary>
            剧情UI控件接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryUIWidget.IsValid">
            <summary>
            控件是否有效
            </summary>
        </member>
        <member name="M:MUEngine.Story.IStoryUIWidget.Initialize">
            <summary>
            初始化控件
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryUI">
            <summary>
            剧情UI组件，用于控制UI相关显示
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUI.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryUIImage">
            <summary>
            剧情UI图片组件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.AssetName">
            <summary>
            图片资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.Visible">
            <summary>
            UI控件是否可见
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.ImageColor">
            <summary>
            图片颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.AnchoredPosition">
            <summary>
            锚点位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.Rotation">
            <summary>
            图片的旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.Scale">
            <summary>
            图片的缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.Size">
            <summary>
            图片的尺寸
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.SortingOrder">
            <summary>
            层级
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.AnchorMin">
            <summary>
            锚点最小值
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.AnchorMax">
            <summary>
            锚点最大值
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.Pivot">
            <summary>
            中心点
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIImage.ReloadImage">
            <summary>
            重新加载图片
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIImage.ImageWidget">
            <summary>
            实际的图片控件
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryUIManager">
            <summary>
            剧情UI管理器
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIManager.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIManager.UIRoot">
            <summary>
            UI根节点
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIManager.TransitionMask">
            <summary>
            过渡转场遮罩控件
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryUIManager.singletonWidgets">
            <summary>
            所有单例控件
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryUIManager.widgetCachePool">
            <summary>
            控件缓存池
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIManager.GetWidget``1">
            <summary>
            获取一个UI控件实例
            </summary>
            <typeparam name="T">控件类型</typeparam>
            <returns>UI控件实例</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUIManager.DisposeWidget(MUEngine.Story.StoryUIPoolingWidget)">
            <summary>
            释放UI控件，将其放入缓存池
            </summary>
            <param name="widget">要释放的UI控件</param>
        </member>
        <member name="M:MUEngine.Story.StoryUIManager.GetSingleton``1(System.Boolean)">
            <summary>
            获取单例控件，如果不存在则创建一个新的实例
            </summary>
            <typeparam name="T">控件类型</typeparam>
            <param name="createNewIfNotExist">如果不存在则创建新的实例</param>
            <returns>单例控件实例</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUIManager.PrePlayStory(MUEngine.Story.MUStory)">
            <summary>
            剧情播放前的预处理
            </summary>
            <param name="story">剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryUIManager.AfterPlayStory(MUEngine.Story.MUStory)">
            <summary>
            剧情播放完毕的后续处理
            </summary>
            <param name="story">剧情</param>
        </member>
        <member name="T:MUEngine.Story.StoryUIPoolingWidget">
            <summary>
            可在缓存池中缓存的剧情UI控件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIPoolingWidget.Dispose">
            <summary>
            释放控件，将控件放回缓存池
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIPoolingWidget.OnDispose">
            <summary>
            释放接口，可由子类覆写
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryUIText">
            <summary>
            剧情UI文本组件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.Visible">
            <summary>
            控件是否可见
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.Text">
            <summary>
            实际文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.CustomFontName">
            <summary>
            自定义字体名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.TextColor">
            <summary>
            文本颜色，默认白色
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.FontSize">
            <summary>
            字号
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.TextAlignment">
            <summary>
            文本布局方式，默认完全居中
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.AnchorMin">
            <summary>
            锚点最小值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.AnchorMax">
            <summary>
            锚点最大值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.Pivot">
            <summary>
            中心点，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.AnchoredPosition">
            <summary>
            锚点位置，默认(0,0)
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.Size">
            <summary>
            尺寸，默认(820,480)
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.EnableShadow">
            <summary>
            是否启用阴影
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.ShadowColor">
            <summary>
            阴影颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.EnableOutline">
            <summary>
            是否启用描边
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.OutlineColor">
            <summary>
            描边颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.Scale2">
            <summary>
            文本缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.Rotation">
            <summary>
            文本旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.TextWidget">
            <summary>
            实际的文本控件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIText.DefaultName">
            <summary>
            默认名称
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIText.ReloadFont">
            <summary>
            重载文本字体
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryUIWidget">
            <summary>
            剧情UI控件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIWidget.CanvasName">
            <summary>
            根画布名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIWidget.RootCanvasObj">
            <summary>
            根画布的游戏对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIWidget.RootCanvas">
            <summary>
            根画布
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIWidget.SortingOrder">
            <summary>
            画布的排序顺序
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIWidget.IsValid">
            <summary>
            控件是否还有效
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryUIWidget.Enable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIWidget.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIWidget.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIWidget.OnInitialize">
            <summary>
            初始化，需要由子类覆写
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIWidget.OnSetDefaultValue">
            <summary>
            设置默认值
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUIWidget.CreateDefaultCanvas">
            <summary>
            创建默认画布
            </summary>
            <returns>默认画布</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUIWidget.SetLayerToUI(UnityEngine.GameObject)">
            <summary>
            将所有层级设置为UI层级
            </summary>
            <param name="gameObj">需要设置层级的游戏对象</param>
        </member>
        <member name="T:MUEngine.Story.BaseImageWidget">
            <summary>
            图片控件基类
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.ImageColor">
            <summary>
            图片的颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.ImageAlpha">
            <summary>
            图片的透明度
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.Scale">
            <summary>
            图片的缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.Scale2">
            <summary>
            图片的缩放（Vector2类型）
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.Rotation">
            <summary>
            旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.AnchorMin">
            <summary>
            锚点最小值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.AnchorMax">
            <summary>
            锚点最大值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.Pivot">
            <summary>
            中心点，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.AnchoredPosition">
            <summary>
            锚点位置，默认(0,0)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.OffsetX">
            <summary>
            水平偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.OffsetY">
            <summary>
            垂直偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.UIImage">
            <summary>
            实际的Image脚本
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseImageWidget.ImageRectTrans">
            <summary>
            图片对应的RectTransform
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseImageWidget.SetImage(System.String)">
            <summary>
            设置图片
            </summary>
            <param name="imageName">图片名称</param>
        </member>
        <member name="M:MUEngine.Story.BaseImageWidget.ReleaseAsset">
            <summary>
            释放使用的资源
            </summary>
        </member>
        <member name="T:MUEngine.Story.BaseTextWidget">
            <summary>
            文本控件基类
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.Text">
            <summary>
            实际文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.TextColor">
            <summary>
            文本颜色，默认白色
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.FontSize">
            <summary>
            字号
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.LineSpacing">
            <summary>
            行间距，默认1.2F
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.TextAlignment">
            <summary>
            文本布局方式，默认完全居中
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.AnchorMin">
            <summary>
            锚点最小值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.AnchorMax">
            <summary>
            锚点最大值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.Pivot">
            <summary>
            中心点，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.AnchoredPosition">
            <summary>
            锚点位置，默认(0,0)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.OffsetX">
            <summary>
            水平偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.OffsetY">
            <summary>
            垂直偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.Size">
            <summary>
            尺寸，默认(820,480)
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.Width">
            <summary>
            宽度，默认820
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.Height">
            <summary>
            高度，默认480
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.EnableShadow">
            <summary>
            是否启用阴影
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.ShadowColor">
            <summary>
            阴影颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.EnableOutline">
            <summary>
            是否启用描边
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.OutlineColor">
            <summary>
            描边颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.FontName">
            <summary>
            默认字体名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.DefaultFontSize">
            <summary>
            默认字号（默认为40）
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.UIText">
            <summary>
            实际的Text脚本
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.TextRectTrans">
            <summary>
            文本对应的RectTransform
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.UIShadow">
            <summary>
            阴影脚本
            </summary>
        </member>
        <member name="P:MUEngine.Story.BaseTextWidget.UIOutline">
            <summary>
            描边脚本
            </summary>
        </member>
        <member name="M:MUEngine.Story.BaseTextWidget.SetTextFont(System.String)">
            <summary>
            设置文本的字体
            </summary>
        </member>
        <member name="T:MUEngine.Story.ColorBgWidget">
            <summary>
            纯色背景控件
            </summary>
        </member>
        <member name="P:MUEngine.Story.ColorBgWidget.BgColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="T:MUEngine.Story.ScreenCaptureProxy">
            <summary>
            截屏代理脚本
            </summary>
        </member>
        <member name="M:MUEngine.Story.ScreenCaptureProxy.CaptureScreen(System.Action{UnityEngine.Texture2D,UnityEngine.Rect})">
            <summary>
            执行截屏
            </summary>
            <param name="callback">截屏完成的回调</param>
        </member>
        <member name="T:MUEngine.Story.TransitionMaskWidget">
            <summary>
            转场遮罩控件，用于实现黑屏、白屏渐变以及淡入淡出
            </summary>
        </member>
        <member name="P:MUEngine.Story.TransitionMaskWidget.BgColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.TransitionMaskWidget.Opacity">
            <summary>
            不透明度
            </summary>
        </member>
        <member name="M:MUEngine.Story.TransitionMaskWidget.CaptureScreenshot(System.Action)">
            <summary>
            执行截屏
            </summary>
            <param name="captureCallback">截屏完成的回调</param>
        </member>
        <member name="M:MUEngine.Story.TransitionMaskWidget.ClearScreenshot">
            <summary>
            清除之前的截屏
            </summary>
        </member>
        <member name="M:MUEngine.Story.TransitionMaskWidget.SwitchToHighLayer">
            <summary>
            切换到高级层级，以保证能遮挡住剧情
            </summary>
        </member>
        <member name="M:MUEngine.Story.TransitionMaskWidget.SwitchToLowLayer">
            <summary>
            切换到低级层级，以避免挡住剧情中的其它内容
            </summary>
        </member>
        <member name="T:MUEngine.Story.UIEffectWidget">
            <summary>
            UI特效部件
            </summary>
        </member>
        <member name="P:MUEngine.Story.UIEffectWidget.AnchorMin">
            <summary>
            锚点最小值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.UIEffectWidget.AnchorMax">
            <summary>
            锚点最大值，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.UIEffectWidget.Pivot">
            <summary>
            中心点，默认(0.5, 0.5)
            </summary>
        </member>
        <member name="P:MUEngine.Story.UIEffectWidget.AnchoredPosition">
            <summary>
            锚点位置，默认(0,0)
            </summary>
        </member>
        <member name="P:MUEngine.Story.UIEffectWidget.Scale">
            <summary>
            缩放，默认(1, 1, 1)
            </summary>
        </member>
        <member name="P:MUEngine.Story.UIEffectWidget.EffectGameObject">
            <summary>
            特效对应的游戏对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.UIEffectWidget.AttachEffect(System.String)">
            <summary>
            挂载特效
            </summary>
            <param name="effectAssetName">特效资源名称</param>
        </member>
        <member name="M:MUEngine.Story.UIEffectWidget.DisposeEffect">
            <summary>
            释放特效
            </summary>
        </member>
        <member name="P:MUEngine.Story.UITextWidget.Scale2">
            <summary>
            图片的缩放（Vector2类型）
            </summary>
        </member>
        <member name="P:MUEngine.Story.UITextWidget.Rotation">
            <summary>
            旋转
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryDatabase">
            <summary>
            剧情数据库类
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.DataFilePath">
            <summary>
            数据文件路径
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.Instance">
            <summary>
            剧情数据库实例
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.Characters">
            <summary>
            所有角色
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.ActorElements">
            <summary>
            所有演员部件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.Effects">
            <summary>
            所有特效
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.Audios">
            <summary>
            所有音频
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.Acts">
            <summary>
            所有ACT
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.Images">
            <summary>
            所有图片
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryDatabase.Fonts">
            <summary>
            所有字体
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetCharacterInfo(System.String)">
            <summary>
            获取角色信息
            </summary>
            <param name="prefabName">Prefab名称</param>
            <returns>角色信息</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllAnimationInfo(System.String)">
            <summary>
            获取角色身上的所有动画信息
            </summary>
            <param name="prefabName">角色的Prefab名称</param>
            <returns>所有动画信息</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAnimationInfo(System.String,System.String)">
            <summary>
            获取角色的动画信息
            </summary>
            <param name="prefabName">角色的Prefab名称</param>
            <param name="stateName">动画状态名称</param>
            <returns>动画信息，获取失败时返回空</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetTriggerInfo(System.String)">
            <summary>
            获取角色的状态机触发器信息
            </summary>
            <param name="prefabName">角色的Prefab名称</param>
            <returns>状态机触发器信息</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetIntParamInfo(System.String)">
            <summary>
            获取角色的状态机int类型参数信息
            </summary>
            <param name="prefabName">角色的Prefab名称</param>
            <returns>状态机int类型参数信息</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetFloatParamInfo(System.String)">
            <summary>
            获取角色的状态机float类型参数信息
            </summary>
            <param name="prefabName">角色的Prefab名称</param>
            <returns>状态机float类型参数信息</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllCharacterName">
            <summary>
            获取所有角色名称
            </summary>
            <returns>所有角色名称</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllCharacterNameWithStoryAnimation">
            <summary>
            获取所有带有剧情动画的角色的名称
            </summary>
            <returns>角色名称列表</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetActorElementResources(MUEngine.EPlayerElement)">
            <summary>
            获取某一类型的所有演员部件资源名
            </summary>
            <param name="elementType">演员部件类型</param>
            <returns>类型对应的所有演员部件资源名</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllEffectNames">
            <summary>
            获取所有特效的名称
            </summary>
            <returns>全部特效名称的列表</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllActNames">
            <summary>
            获取所有ACT的名称
            </summary>
            <returns>全部ACT名称列表</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetActInfo(System.String)">
            <summary>
            获取ACT信息
            </summary>
            <param name="actName">ACT名称</param>
            <returns>ACT信息，获取失败时返回空</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllImageNames">
            <summary>
            获取所有图片的名称
            </summary>
            <returns>全部图片名称列表</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllAudioNames">
            <summary>
            获取所有音频的名称
            </summary>
            <returns>音频名称列表</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.GetAllFontNames">
            <summary>
            获取所有字体的名称
            </summary>
            <returns>字体名称列表</returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.LoadDatabaseInstance">
            <summary>
            加载剧情数据库实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:MUEngine.Story.StoryDatabase.CreateEmptyDatabase">
            <summary>
            创建一个空的数据库实例
            </summary>
            <returns>空的实例</returns>
        </member>
        <member name="T:MUEngine.Story.MUActorElementInfo">
            <summary>
            演员部件信息
            </summary>
        </member>
        <member name="T:MUEngine.Story.EStoryEditorMode">
            <summary>
            剧情编辑器模式
            </summary>
        </member>
        <member name="F:MUEngine.Story.EStoryEditorMode.Story">
            <summary>
            正常剧情模式
            </summary>
        </member>
        <member name="F:MUEngine.Story.EStoryEditorMode.SkillPreview">
            <summary>
            技能预览模式
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryPlaybackEventArgs">
            <summary>
            剧情播放相关事件的事件参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryPlaybackEventArgs.Story">
            <summary>
            事件对应的剧情
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryPlaybackEventArgs.#ctor(MUEngine.Story.MUStory)">
            <summary>
            构造函数
            </summary>
            <param name="story">事件对应的剧情</param>
        </member>
        <member name="T:MUEngine.Story.StoryResourceLoadedEventArgs">
            <summary>
            剧情资源加载完毕事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryResourceLoadedEventArgs.IsSuccessed">
            <summary>
            加载是否成功
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryResourceLoadedEventArgs.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="isSuccessed">加载是否成功</param>
        </member>
        <member name="P:MUEngine.Story.FActorAddPartEvent.AssetName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorAddPartEvent.ElementType">
            <summary>
            部位类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorAddPartEvent.FullName">
            <summary>
            完整资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorAddPartEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorAttachItemEvent">
            <summary>
            角色挂载附件事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorAttachItemEvent.ResourceName">
            <summary>
            附件的资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorAttachItemEvent.AttachPointName">
            <summary>
            挂载点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.AssetName">
            <summary>
            特效资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.SenderAttachNode">
            <summary>
            发出方绑点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.FlyToActor">
            <summary>
            是否以指定演员为目标（true:以演员为目标; false:以坐标点为目标）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.TargetPosition">
            <summary>
            目标点坐标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.TargetActor">
            <summary>
            目标演员
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.TargetAttachNode">
            <summary>
            目标演员的绑点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.TraceTarget">
            <summary>
            是否跟踪目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.CurveRatio">
            <summary>
            弧线系数
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.CurveRotateAngle">
            <summary>
            弧线旋转角度（旋转角）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.Duration">
            <summary>
            飞行时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.Speed">
            <summary>
            飞行速度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.FlyBySpeed">
            <summary>
            按指定速度飞行
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.BeginFlyDelay">
            <summary>
            开始飞行延迟
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.DestructionDelay">
            <summary>
            销毁延迟
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEvent.FullName">
            <summary>
            完整资源名称
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorFireBulletEvent.GetStartPosition">
            <summary>
            获取飞行起始位置
            </summary>
            <returns>飞行起始位置</returns>
        </member>
        <member name="M:MUEngine.Story.FActorFireBulletEvent.GetEndPosition(System.Boolean)">
            <summary>
            获取飞行终止位置
            </summary>
            <param name="isTrace">是否追踪</param>
            <returns>飞行终止位置</returns>
        </member>
        <member name="M:MUEngine.Story.FActorFireBulletEvent.CalculateCurrentPosition(System.Single)">
            <summary>
            计算当前位置
            该方法可能会更改事件中的相关状态
            </summary>
            <param name="timeSinceTrigger">触发后经过的时间</param>
            <returns>粒子当前位置</returns>
        </member>
        <member name="M:MUEngine.Story.FActorFireBulletEvent.EditorGetStartPosition">
            <summary>
            （编辑器方法）获取飞行的起点
            </summary>
            <returns>飞行的起点</returns>
        </member>
        <member name="M:MUEngine.Story.FActorFireBulletEvent.EditorGetEndPosition">
            <summary>
            （编辑器方法）获取飞行的终点
            </summary>
            <returns>飞行的终点</returns>
        </member>
        <member name="M:MUEngine.Story.FActorFireBulletEvent.EditorGetDuration">
            <summary>
            （编辑器方法）获取飞行持续时间
            </summary>
            <returns>飞行持续时间</returns>
        </member>
        <member name="P:MUEngine.Story.FActorFlyJumpEvent.ActorOwner">
            <summary>
            父级演员
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFlyJumpEvent.TargetPosition">
            <summary>
            目标位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFlyJumpEvent.JumpAnimation">
            <summary>
            跳跃动画
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFlyJumpEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFlyJumpEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorHideElementEvent.ElementType">
            <summary>
            部件类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorHideElementEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorHideNodeEvent.NodeName">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorJumpToEvent.ActorOwner">
            <summary>
            父级演员
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorJumpToEvent.TargetPosition">
            <summary>
            跳跃目标点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorJumpToEvent.TurnSpeed">
            <summary>
            转身速度(度/秒)
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorJumpToEvent.ControlPointHeight">
            <summary>
            弧线控制点高度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorJumpToEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorJumpToEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorJumpToEvent.startTangent">
            <summary>
            弧线控制点坐标
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorJumpToEvent.actualTurnDuration">
            <summary>
            实际转身需要时间
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorJumpToEvent.SetRotation(System.Single)">
            <summary>
            设置演员朝向
            </summary>
            <param name="timeSinceTrigger">触发后经过的时间</param>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.BoneName">
            <summary>
            骨骼名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.BlendRate">
            <summary>
            融合比例
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.UsePositionAsTarget">
            <summary>
            是否以指定点作为目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.TargetPosition">
            <summary>
            指定的看向坐标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.TargetEntity">
            <summary>
            看向的目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.TargetEntityNode">
            <summary>
            以演员实体为目标时，具体的目标节点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.Offset">
            <summary>
            坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.IsAbsoluteOffset">
            <summary>
            是否为绝对坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.IsSmooth">
            <summary>
            是否启用平滑过渡
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.SmoothingTime">
            <summary>
            平滑过渡时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.BoneCtrl">
            <summary>
            骨头控制器
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.SelfPosition">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorLookAtEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEvent.TargetPosition">
            <summary>
            移动的目标点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEvent.WalkAnimation">
            <summary>
            走路动画
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEvent.StandAnimation">
            <summary>
            站立动画
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEvent.TurnSpeed">
            <summary>
            转身速度(度/秒)
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEvent.ActorOwner">
            <summary>
            父级演员
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorMoveToEvent.actualTurnDuration">
            <summary>
            实际转身速度
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorMoveToEvent.InitializeParams">
            <summary>
            初始化各项参数
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorMoveToEvent.SetActorPosition(System.Single)">
            <summary>
            设置演员的位置
            </summary>
            <param name="timeSinceTrigger">触发后经过的时间</param>
        </member>
        <member name="M:MUEngine.Story.FActorMoveToEvent.SetActorRotation(System.Single)">
            <summary>
            设置演员的朝向
            </summary>
            <param name="timeSinceTrigger">触发后经过的时间</param>
        </member>
        <member name="M:MUEngine.Story.FActorMoveToEvent.GetWalkClipLength">
            <summary>
            获取走路动画时长
            </summary>
            <returns>走路动画时长</returns>
        </member>
        <member name="M:MUEngine.Story.FActorMoveToEvent.GetAnimationPercent(System.Single,System.Single)">
            <summary>
            获取当前时间处于动画时间中的百分比
            </summary>
            <param name="clipLength">动画时长</param>
            <param name="curTime">当前时间</param>
            <returns>当前时间所处的百分比，参数不合法时返回-1</returns>
        </member>
        <member name="P:MUEngine.Story.FActorParticleAnimationEvent.ParticleStartTime">
            <summary>
            粒子起始时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorParticleAnimationEvent.PauseWhenStart">
            <summary>
            开始后暂停
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorParticleAnimationEvent.PauseWhenFinish">
            <summary>
            事件完成时暂停
            true:结束时暂停粒子; false:结束时重置粒子
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorParticleAnimationEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPartRotationEvent.BoneName">
            <summary>
            骨骼名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPartRotationEvent.BlendRate">
            <summary>
            融合比例
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPartRotationEvent.BoneCtrl">
            <summary>
            骨头控制器
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPartRotationEvent.FadeInTime">
            <summary>
            淡入时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPartRotationEvent.FadeOutTime">
            <summary>
            淡出时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPartRotationEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPartRotationEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorPartRotationEvent.tempTraceNode">
            <summary>
            临时变量，用于避免GetValueAt时创建对象加大消耗
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorPartRotationEvent.MUEngine#Story#IUniformKeyFrameEvent#UniformKeyFrames(System.Int32,System.Int32)">
            <summary>
            均分关键帧
            </summary>
            <param name="start">起始关键帧的索引</param>
            <param name="end">结束关键帧的索引</param>
        </member>
        <member name="T:MUEngine.Story.EActTarget">
            <summary>
            ACT目标类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEvent.ActName">
            <summary>
            ACT名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEvent.TargetType">
            <summary>
            是否设置目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEvent.TargetPosition">
            <summary>
            目标位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEvent.Target">
            <summary>
            目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEvent.StopActWhenFinished">
            <summary>
            事件结束时强制停止ACT
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorPlayActEvent.playingAct">
            <summary>
            正在播放的ACT
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorPlayActEvent.StopAct">
            <summary>
            停止ACT
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorPlayAnimationEvent">
            <summary>
            播放动画事件
            支持动作过渡，但不支持剧情序列的快进、慢放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.AnimationName">
            <summary>
            动画名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.StateName">
            <summary>
            状态名称
            设置了该值的时候使用该值来播放动画
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.TransitionDuration">
            <summary>
            过渡时间（秒）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.AnimationStartTime">
            <summary>
            动画开始时间（秒）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.Speed">
            <summary>
            动画播放速度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.KeepFinishedPose">
            <summary>
            保持结束时的姿势
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.PositionTrace">
            <summary>
            位置轨迹
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.ActorOwner">
            <summary>
            父级演员
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.ActualName">
            <summary>
            实际使用的动画名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.SafeSpeed">
            <summary>
            防止出现除0问题的属性，当速度为0时返回0.01
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.ClipLength">
            <summary>
            动画片段(AnimationClip)的时长
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.ActualLength">
            <summary>
            动画的实际长度（片段长度－开始时间）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorPlayAnimationEvent.PreviewAnimation">
            <summary>
            预览播放动画
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayAnimationEvent.PreloadTimespan">
            <summary>
            预加载时间
            现在的ActorEntity加载动作需要在剧情一开始就加载所有用到的动作，
            这里把时间设置为1000，以保证所有事件的预加载都能触发。
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorPlayAnimationEvent.endTimeThreshold">
            <summary>
            如果将动画暂停（speed = 0）在距离结尾不远的位置的话，
            重新播放动画（speed = 1）时会出现人物停滞不动的问题
            该字段用于记录这个结尾时间的大概位置
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorPlayAnimationEvent.currentPercent">
            <summary>
            当前动画播放百分比
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorPlayAnimationEvent.GetAnimationPercent(System.Single)">
            <summary>
            获取对应的单位化动画时间
            </summary>
            <returns>对应的单位化动画时间</returns>
        </member>
        <member name="M:MUEngine.Story.FActorPlayAnimationEvent.SetActorPosition(System.Single)">
            <summary>
            设置演员位置
            </summary>
            <param name="percent">当前动画的百分比</param>
        </member>
        <member name="M:MUEngine.Story.FActorPlayAnimationEvent.ResumeAnimation">
            <summary>
            继续播放动画
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorPlayAnimationEvent.Clone(MUEngine.Story.FActorPlayAnimationEvent)">
            <summary>
            把自身数据复制到目标事件身上
            </summary>
            <param name="target">目标事件</param>
        </member>
        <member name="P:MUEngine.Story.FActorPlayEffectEvent.AttachToActor">
            <summary>
            是否挂载到演员上
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayEffectEvent.AttachPointName">
            <summary>
            绑点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayEffectEvent.Offset">
            <summary>
            位置偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayEffectEvent.IsHit">
            <summary>
            是否受击Act
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayEffectEvent.Caster">
            <summary>
            施法者
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayEffectEvent.IsAttachOffset">
            <summary>
            是否相对于挂载点偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayEffectEvent.Scale">
            <summary>
            特效的缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlaySceneEffectEvent.Offset">
            <summary>
            位置偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlaySceneEffectEvent.Rotation">
            <summary>
            特效的旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlaySceneEffectEvent.Scale">
            <summary>
            特效的缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPositionEvent.SnapToGround">
            <summary>
            是否贴合到地面
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPositionEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorPositionEvent.tempTraceNode">
            <summary>
            临时变量，用于避免GetValueAt时创建对象加大消耗
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorPositionEvent.MUEngine#Story#IUniformKeyFrameEvent#UniformKeyFrames(System.Int32,System.Int32)">
            <summary>
            均分关键帧
            </summary>
            <param name="start">起始关键帧的索引</param>
            <param name="end">结束关键帧的索引</param>
        </member>
        <member name="P:MUEngine.Story.FActorRelativePositionEvent.Target">
            <summary>
            基准目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorRelativePositionEvent.NodeName">
            <summary>
            目标子节点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorRelativePositionEvent.RelativePosition">
            <summary>
            相对位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorRelativePositionEvent.RelativeRotationY">
            <summary>
            相对朝向
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorRelativePositionEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorRelativePositionEvent.RecordUsingCurrentState">
            <summary>
            使用当前状态作为相对位置参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorSceneAnimationEvent.Offset">
            <summary>
            位置偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorSceneAnimationEvent.TransitionDuration">
            <summary>
            不使用过渡时间
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorSceneAnimationEvent.OnEditorUpdate(System.Int32)">
            <summary>
            供编辑器调用，强制更新当前画面
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.UsePositionAsTarget">
            <summary>
            是否以指定点作为目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.TargetEntity">
            <summary>
            转向的目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.TargetEntityNode">
            <summary>
            以演员实体为目标时，具体的目标节点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.TargetPosition">
            <summary>
            指定的转向坐标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.Offset">
            <summary>
            坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.IsAbsoluteOffset">
            <summary>
            是否为绝对坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.IsSmooth">
            <summary>
            是否启用平滑过渡
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.SmoothingTime">
            <summary>
            平滑过渡时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.SelfPosition">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorTurnToEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorFsmEvent">
            <summary>
            角色状态机事件的基类
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFsmEvent.TriggerName">
            <summary>
            触发器名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFsmFloatEvent.TriggerName">
            <summary>
            触发器名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFsmIntEvent.IntValue">
            <summary>
            状态机Int值
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayTriggerEvent.HasPreloadTriggered">
            <summary>
            预加载是否已经触发
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayTriggerEvent.PreloadTimespan">
            <summary>
            预加载时长
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayTriggerEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorPlayTriggerEvent.MUEngine#Story#IPreloadEvent#StartPreload(System.Action)">
            <summary>
            开始预加载
            </summary>
            <param name="loadedCallback">加载完毕的回调</param>
        </member>
        <member name="P:MUEngine.Story.FActorReplaceShaderEvent.MaterialName">
            <summary>
            材质名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorReplaceShaderEvent.TheMaterial">
            <summary>
            实际的材质对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorReplaceShaderEvent.ShaderName">
            <summary>
            Shader的名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorReplaceShaderEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorReplaceShaderEvent.ReverShaderChange">
            <summary>
            还原对Shader的修改
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderColorEvent.MaterialName">
            <summary>
            材质名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderColorEvent.PropertyName">
            <summary>
            对应的材质属性名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderColorEvent.TheMaterial">
            <summary>
            实际的材质对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorShaderColorEvent.GetMaterialProperty">
            <summary>
            获取材质中的属性值
            </summary>
            <returns>材质中的属性值</returns>
        </member>
        <member name="M:MUEngine.Story.FActorShaderColorEvent.SetMaterialProperty(UnityEngine.Color)">
            <summary>
            设置材质的属性值
            </summary>
            <param name="propValue">材质的属性值</param>
        </member>
        <member name="T:MUEngine.Story.FActorShaderFloatEvent">
            <summary>
            用于设置Shader中的float类型属性的事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderFloatEvent.MaterialName">
            <summary>
            材质名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderFloatEvent.PropertyName">
            <summary>
            对应的材质属性名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderFloatEvent.TheMaterial">
            <summary>
            实际的材质对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorShaderFloatEvent.GetMaterialProperty">
            <summary>
            获取材质中的属性值
            </summary>
            <returns>材质中的属性值</returns>
        </member>
        <member name="M:MUEngine.Story.FActorShaderFloatEvent.SetMaterialProperty(System.Single)">
            <summary>
            设置材质的属性值
            </summary>
            <param name="propValue">材质的属性值</param>
        </member>
        <member name="F:MUEngine.Story.FActorShaderRenderQueueEvent.DEFAULT_RENDER_QUEUE">
            <summary>
            默认渲染顺序
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderRenderQueueEvent.MaterialName">
            <summary>
            材质名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderRenderQueueEvent.RenderQueue">
            <summary>
            渲染顺序
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderRenderQueueEvent.Text">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderRenderQueueEvent.TheMaterial">
            <summary>
            实际的材质对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderTextureEvent.MaterialName">
            <summary>
            材质名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderTextureEvent.PropertyName">
            <summary>
            对应的材质属性名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderTextureEvent.TheMaterial">
            <summary>
            实际的材质对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorShaderTextureEvent.GetMaterialProperty">
            <summary>
            获取材质中的属性值
            </summary>
            <returns>材质中的属性值</returns>
        </member>
        <member name="M:MUEngine.Story.FActorShaderTextureEvent.SetMaterialProperty(UnityEngine.Texture)">
            <summary>
            设置材质的属性值
            </summary>
            <param name="propValue">材质的属性值</param>
        </member>
        <member name="P:MUEngine.Story.FActorShaderTextureEvent.TextureName">
            <summary>
            材质的名称
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorShaderTextureEvent.loadedTexture">
            <summary>
            记录通过MUEngine加载上来的贴图，在事件结束后将其释放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderTextureOffsetEvent.MaterialName">
            <summary>
            材质名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderTextureOffsetEvent.PropertyName">
            <summary>
            对应的材质属性名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorShaderTextureOffsetEvent.TheMaterial">
            <summary>
            实际的材质对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FActorShaderTextureOffsetEvent.GetMaterialProperty">
            <summary>
            获取材质中的属性值
            </summary>
            <returns>材质中的属性值</returns>
        </member>
        <member name="M:MUEngine.Story.FActorShaderTextureOffsetEvent.SetMaterialProperty(UnityEngine.Vector2)">
            <summary>
            设置材质的属性值
            </summary>
            <param name="propValue">材质的属性值</param>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.FileName">
            <summary>
            音频文件名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.Volume">
            <summary>
            音量
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.AudioType">
            <summary>
            音频类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.Loop">
            <summary>
            是否循环播放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="F:MUEngine.Story.FPlaySoundEvent.playingAudio">
            <summary>
            正在播放的音源
            </summary>
        </member>
        <member name="F:MUEngine.Story.FPlaySoundEvent.isDebugAsset">
            <summary>
            使用的是否是调试资源（直接放在project项目中、而非打在Bundle中的资源）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.DebugAudioClip">
            <summary>
            调试用音频片段
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.PreviewAudio">
            <summary>
            预览音源
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.AudioLength">
            <summary>
            音频长度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.HasPreloadTriggered">
            <summary>
            预加载是否已经触发
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySoundEvent.MUEngine#Story#IPreloadEvent#PreloadTimespan">
            <summary>
            预加载的提前开始时间
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPlaySoundEvent.MUEngine#Story#IPreloadEvent#StartPreload(System.Action)">
            <summary>
            开始预加载
            </summary>
            <param name="loadedCallback">加载完毕的回调</param>
        </member>
        <member name="M:MUEngine.Story.FPlaySoundEvent.StopSound">
            <summary>
            停止当前播放的音效
            </summary>
        </member>
        <member name="T:MUEngine.Story.FCameraActivateEvent">
            <summary>
            启用摄像机事件
            与FEnableCameraEvent功能基本一致，区别在于Owner为摄像机组件，更方便于在不同的分组中使用
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraActivateEvent.Camera">
            <summary>
            对应的摄像机
            如果为空则启用游戏主摄像机
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraActivateEvent.FadeInEffect">
            <summary>
            转场切入特效类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraActivateEvent.FadeOutEffect">
            <summary>
            转场切出时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraActivateEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="F:MUEngine.Story.FCameraActivateEvent.hasScreenCaptureFinished">
            <summary>
            截屏是否已经完成
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraActivateSkillEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="T:MUEngine.Story.FAroundState">
            <summary>
            环绕状态节点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FAroundState.Angle">
            <summary>
            角度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FAroundState.Distance">
            <summary>
            水平方向与目标的距离
            </summary>
        </member>
        <member name="P:MUEngine.Story.FAroundState.YOffset">
            <summary>
            垂直方向上的偏移量
            </summary>
        </member>
        <member name="T:MUEngine.Story.ECameraAroundMode">
            <summary>
            摄像机环绕模式
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetEvent.IsAroundPosition">
            <summary>
            是否以指定点作为目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetEvent.Target">
            <summary>
            环绕的目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetEvent.TargetYOffset">
            <summary>
            环绕目标时垂直方向上的偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetEvent.TargetPosition">
            <summary>
            指定的环绕坐标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetEvent.Mode">
            <summary>
            摄像机模式
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetEvent.LookAtPitch">
            <summary>
            以指定俯仰角看向目标时，使用的俯仰角度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraAroundTargetEvent.GetTargetPosition">
            <summary>
            获取环绕目标点位置
            </summary>
            <returns>环绕目标点</returns>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetRelativeEvent.IsAroundPosition">
            <summary>
            固定以指定对象为目标
            </summary>
        </member>
        <member name="T:MUEngine.Story.FCameraLookAtEvent">
            <summary>
            摄像机观察指定目标/指定坐标事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.UsePositionAsTarget">
            <summary>
            是否以指定点作为目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.TargetEntity">
            <summary>
            观察的目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.TargetEntityNode">
            <summary>
            以演员实体为目标时，具体的目标节点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.TargetPosition">
            <summary>
            指定的观察坐标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.Offset">
            <summary>
            坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.IsAbsoluteOffset">
            <summary>
            是否为绝对坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.IsSmooth">
            <summary>
            是否启用平滑过渡
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.SmoothingTime">
            <summary>
            平滑过渡时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.SelfPosition">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraLookAtEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FCameraLookAtEvent.initOrientation">
            <summary>
            播放事件前，摄像机的起始朝向
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraMoveToEvent.TargetAsPrePlayState">
            <summary>
            是否以播放前的状态为目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraMoveToEvent.TargetPosition">
            <summary>
            目标位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraMoveToEvent.TargetRotation">
            <summary>
            目标旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraMoveToEvent.EasingType">
            <summary>
            缓动类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraMoveToEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraPositionEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FCameraPositionEvent.tempTraceNode">
            <summary>
            供GetValueAt使用的临时变量，避免频繁创建加大消耗
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraPositionEvent.MUEngine#Story#IUniformKeyFrameEvent#UniformKeyFrames(System.Int32,System.Int32)">
            <summary>
            均分关键帧
            </summary>
            <param name="start">起始关键帧的索引</param>
            <param name="end">结束关键帧的索引</param>
        </member>
        <member name="T:MUEngine.Story.FCameraPositionRotationEvent">
            <summary>
            摄像机空间状态（位置+朝向）关键帧事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraPositionRotationEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FCameraPositionRotationEvent.tempCameraNode">
            <summary>
            供GetValueAt返回数值时使用的临时结构体，以避免重复创建对象加大消耗
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraPositionRotationEvent.MUEngine#Story#IUniformKeyFrameEvent#UniformKeyFrames(System.Int32,System.Int32)">
            <summary>
            均分关键帧
            </summary>
            <param name="start">起始关键帧的索引</param>
            <param name="end">结束关键帧的索引</param>
        </member>
        <member name="T:MUEngine.Story.FCameraRelativePositionEvent">
            <summary>
            摄像机跟随事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.UsePositionAsTarget">
            <summary>
            该事件固定以实体为目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.TargetEntity">
            <summary>
            观察的目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.TargetEntityNode">
            <summary>
            以演员实体为目标时，具体的目标节点名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.TargetPosition">
            <summary>
            指定的观察坐标
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.Offset">
            <summary>
            坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.IsAbsoluteOffset">
            <summary>
            是否为绝对坐标偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.IsSmooth">
            <summary>
            是否启用平滑过渡
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.SmoothingTime">
            <summary>
            平滑过渡时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.SelfPosition">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraRelativePositionEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FCameraRelativePositionEvent.initPosition">
            <summary>
            播放事件前，摄像机所处的起始位置
            </summary>
        </member>
        <member name="F:MUEngine.Story.FCameraRelativePositionEvent.initOrientation">
            <summary>
            播放事件前，摄像机的起始朝向
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraRelativePositionEvent.RecordUsingCurrentState">
            <summary>
            使用当前状态作为相对位置参数
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraRotationEvent.MUEngine#Story#IUniformKeyFrameEvent#UniformKeyFrames(System.Int32,System.Int32)">
            <summary>
            均分关键帧
            </summary>
            <param name="start">起始关键帧的索引</param>
            <param name="end">结束关键帧的索引</param>
        </member>
        <member name="T:MUEngine.Story.IEnableCameraEvent">
            <summary>
            用于启动摄像机的事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.IEnableCameraEvent.Camera">
            <summary>
            对应的剧情摄像机组件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorFireBulletEventView">
            <summary>
            演员发射子弹事件的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFireBulletEventView.SphereGameObject">
            <summary>
            飞行目标坐标点对应的球体
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorFlyJumpEventView">
            <summary>
            演员曲线移动的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorFlyJumpEventView.SphereGameObject">
            <summary>
            移动目标点对应的球体
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorJumpToEventView">
            <summary>
            演员曲线移动的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorJumpToEventView.SphereGameObject">
            <summary>
            移动目标点对应的球体
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorMoveToEventView">
            <summary>
            演员移动至事件的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorMoveToEventView.SphereGameObject">
            <summary>
            移动目标点对应的球体
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorPlayActEventView">
            <summary>
            演员播放技能事件的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FActorPlayActEventView.SphereGameObject">
            <summary>
            移动目标点对应的球体
            </summary>
        </member>
        <member name="T:MUEngine.Story.FCameraAroundTargetView">
            <summary>
            摄像机环绕
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCameraAroundTargetView.TargetSphere">
            <summary>
            环绕目标对应的球体
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraAroundTargetView.UnregisterPropertyChangeEvent">
            <summary>
            取消对属性变更事件的注册
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraAroundTargetView.RegisterPropertyChangeEvent">
            <summary>
            注册属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraAroundTargetView.TargetPropertyChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理目标的属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.Create``1(MUEngine.Story.FEvent)">
            <summary>
            创建事件控制视图
            </summary>
            <typeparam name="T">视图的类型</typeparam>
            <param name="ownerEvent">持有视图的事件</param>
            <returns>事件控制视图</returns>
        </member>
        <member name="P:MUEngine.Story.FEventControlView.IsEnabled">
            <summary>
            控制视图是否可用
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.Initialize(MUEngine.Story.FEvent)">
            <summary>
            初始化
            </summary>
            <param name="ownerEvent">持有者事件</param>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.ForceRefresh">
            <summary>
            强制刷新
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.RegistAttentionProperty(System.String)">
            <summary>
            注册关注的属性
            </summary>
            <param name="propertyName">关注的属性名称</param>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.DeselectGameObject(UnityEngine.GameObject)">
            <summary>
            取消游戏对象的选中
            </summary>
            <param name="gObj">需要取消选中的游戏对象</param>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.LateUpdate">
            <summary>
            每帧更新
            这里不使用Update，以保存该方法在NotifyPropertyObserver等属性变更相关脚本的更新后执行
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.OnInitialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.OnEnableChanged">
            <summary>
            响应可用性变更
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.OnDirtyRefresh">
            <summary>
            响应脏绘刷新
            该方法仅在关注的属性有变化时才会被调用一次
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.OnUpdateOwnerEvent">
            <summary>
            响应更新持有者事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.OnEveryFrameRefresh">
            <summary>
            响应每帧刷新
            该方法每帧都会被调用
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.OnDestroyControlView">
            <summary>
            销毁控制视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.FSelectionChangedHandler">
            <summary>
            处理FSelection中的选中项变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventControlView.FEventPropertyChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理持有者事件的属性变更事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FSceneEffectView">
            <summary>
            场景特效的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSceneEffectView.CubeGameObject">
            <summary>
            视图中的球体对应的GameObject
            </summary>
        </member>
        <member name="T:MUEngine.Story.FTargetEventView">
            <summary>
            观察目标事件对应的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTargetEventView.SphereGameObject">
            <summary>
            视图中的球体对应的GameObject
            坐标模式表示具体的坐标位置；实体目标模式表示坐标的偏移量
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTargetEventView.RegisterPropertyChangeEvent">
            <summary>
            注册属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTargetEventView.UnregisterPropertyChangeEvent">
            <summary>
            取消对属性变更事件的注册
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTargetEventView.TargetPropertyChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理实体目标的属性变更事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FActorPartRotationView">
            <summary>
            演员部件朝向的控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FActorPartRotationView.partDirLineRenderer">
            <summary>
            部件朝向示意线
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameCameraNodeView">
            <summary>
            摄像机关键帧轨迹中的每个节点的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameCameraNodeView.DataModel">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameCameraNodeView.PreviewCamera">
            <summary>
            预览摄像机
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameCameraNodeView.EnterCtrlSphere">
            <summary>
            进入曲线控制点对应的球体
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameCameraNodeView.LeaveCtrlSphere">
            <summary>
            离开曲线控制点对应的球体
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.Create">
            <summary>
            创建一个摄像机节点的控制视图
            </summary>
            <returns>控制视图</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.RefreshView">
            <summary>
            根据数据源刷新视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.UpdateData">
            <summary>
            根据控制视图更新数据
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.DestroyNodeView">
            <summary>
            销毁节点视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.Deselect(UnityEngine.Object)">
            <summary>
            取消某对象的选中状态
            </summary>
            <param name="obj">需要取消选中的对象</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.GetFormatedEnterCtrlPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取格式化（三点一线）后的进入曲线控制点的位置
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraNodeView.GetFormatedLeaveCtrlPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取格式化（三点一线）后的离开曲线控制点的位置
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameCameraView">
            <summary>
            摄像机关键帧轨迹控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameCameraView.keyViews">
            <summary>
            关键帧对应的控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameCameraView.tweenSpheres">
            <summary>
            中间帧对应的球体列表
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameCameraView.lineRenderer">
            <summary>
            曲线渲染器
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraView.GetKeyFrameView(System.Int32)">
            <summary>
            获得关键帧的控制视图
            </summary>
            <param name="index">关键帧索引</param>
            <returns>关键帧的控制视图</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraView.RebuildKeyFrameView">
            <summary>
            重新构建关键帧控制视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraView.RebuildTweenSphere">
            <summary>
            重新构建中间帧球体
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCameraView.DrawTraceLine">
            <summary>
            绘制轨迹线
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameTraceNodeView">
            <summary>
            关键帧轨迹中的每个节点的控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTraceNodeView.DataModel">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTraceNodeView.EnterCtrlSphere">
            <summary>
            进入曲线控制点对应的球体
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTraceNodeView.LeaveCtrlSphere">
            <summary>
            离开曲线控制点对应的球体
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.Create">
            <summary>
            创建一个位置节点的控制视图
            </summary>
            <returns>控制视图</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.RefreshView">
            <summary>
            根据数据源刷新视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.UpdateData">
            <summary>
            根据控制视图更新数据
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.DestroyNodeView">
            <summary>
            销毁节点视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.Deselect(UnityEngine.Object)">
            <summary>
            取消某对象的选中状态
            </summary>
            <param name="obj">需要取消选中的对象</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.GetFormatedEnterCtrlPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取格式化（三点一线）后的进入曲线控制点的位置
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceNodeView.GetFormatedLeaveCtrlPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取格式化（三点一线）后的离开曲线控制点的位置
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameTraceView">
            <summary>
            关键帧轨迹的控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameTraceView.keyViews">
            <summary>
            关键帧对应的控制视图
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameTraceView.tweenSpheres">
            <summary>
            中间帧对应的球体列表
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameTraceView.lineRenderer">
            <summary>
            曲线渲染器
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceView.GetKeyFrameView(System.Int32)">
            <summary>
            获得关键帧的控制视图
            </summary>
            <param name="index">关键帧索引</param>
            <returns>关键帧的控制视图</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceView.GetKeyFrameViewAtFrame(System.Int32)">
            <summary>
            通过帧位置来获取对应的控制视图
            </summary>
            <param name="frame">帧位置</param>
            <returns>帧位置对应的控制视图</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceView.RebuildKeyFrameView">
            <summary>
            重新构建关键帧控制视图
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceView.RebuildTweenSphere">
            <summary>
            重新构建中间帧球体
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceView.DrawTraceLine">
            <summary>
            绘制轨迹线
            </summary>
        </member>
        <member name="P:MUEngine.Story.FChangeMaterialEvent.SetterID">
            <summary>
            设置器ID
            </summary>
        </member>
        <member name="P:MUEngine.Story.FHideSceneObjectEvent.SceneObjectTag">
            <summary>
            场景物体标签
            </summary>
        </member>
        <member name="P:MUEngine.Story.FHsvEvent.ForceEnable">
            <summary>
            是否在非高配情况下强制启用
            </summary>
        </member>
        <member name="M:MUEngine.Story.FHsvEvent.IsHQEventEnabled">
            <summary>
            在当前画质下是否能够启用
            </summary>
            <returns>事件是否能够启用</returns>
        </member>
        <member name="P:MUEngine.Story.FMotionBlurEvent.ForceEnable">
            <summary>
            是否在非高配情况下强制启用
            </summary>
        </member>
        <member name="M:MUEngine.Story.FMotionBlurEvent.IsHQEventEnabled">
            <summary>
            在当前画质下是否能够启用
            </summary>
            <returns>事件是否能够启用</returns>
        </member>
        <member name="P:MUEngine.Story.FPlayCameraEffectEvent.ResourceName">
            <summary>
            特效的资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayCameraEffectEvent.Offset">
            <summary>
            坐标偏移，X、Y、Z分别对应左右、上下、前后
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayCameraEffectEvent.FullName">
            <summary>
            完整名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayCameraEffectEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPlayCameraEffectEvent.UpdateEffectPosition">
            <summary>
            更新特效的位置与朝向
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPlayCameraEffectEvent.StartPreview">
            <summary>
            启动预览
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPlayCameraEffectEvent.StopPreview">
            <summary>
            关闭预览
            </summary>
        </member>
        <member name="T:MUEngine.Story.FPlayEffectEvent">
            <summary>
            在指定地点播放粒子特效事件的基类
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayEffectEvent.AssetName">
            <summary>
            资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayEffectEvent.RenderLayer">
            <summary>
            渲染层级，如果为负数则不做额外修改
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayEffectEvent.FullName">
            <summary>
            完整资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayEffectEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPlayEffectEvent.OnGetEfxPosition">
            <summary>
            获取粒子的位置，需要由子类覆写
            </summary>
            <returns>粒子的位置</returns>
        </member>
        <member name="M:MUEngine.Story.FPlayEffectEvent.OnGetEfxRotation">
            <summary>
            获取粒子的旋转，需要由子类覆写
            </summary>
            <returns>粒子的旋转</returns>
        </member>
        <member name="M:MUEngine.Story.FPlayEffectEvent.OnGetEfxScale">
            <summary>
            获取粒子的缩放，可以由子类覆写
            </summary>
            <returns>粒子的缩放</returns>
        </member>
        <member name="M:MUEngine.Story.FPlayEffectEvent.EffectAssetLoadedHandler">
            <summary>
            处理特效资源加载完毕事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPlayEffectEvent.OnEffectLoaded">
            <summary>
            响应特效加载完成，可由子类覆写
            </summary>
        </member>
        <member name="F:MUEngine.Story.FPlayEffectEvent.EnablePreview">
            <summary>
            启用预览
            </summary>
        </member>
        <member name="F:MUEngine.Story.FPlayEffectEvent.PreivewPeriod">
            <summary>
            预览周期
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPlayEffectEvent.PreviewEffect">
            <summary>
            预览特效
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySceneEffectEvent.Position">
            <summary>
            特效的位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySceneEffectEvent.Rotation">
            <summary>
            特效的旋转
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySceneEffectEvent.Scale">
            <summary>
            特效的缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlaySceneEffectEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.AssetName">
            <summary>
            特效的资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.Layer">
            <summary>
            特效的UI层级
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.AnchoredPosition">
            <summary>
            锚点位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.AnchorMin">
            <summary>
            锚点最小值
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.AnchorMax">
            <summary>
            锚点最大值
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.Scale">
            <summary>
            缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPlayUIEffectEvent.EffectWidget">
            <summary>
            对应的特效控件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FShakeCamera4SkillEvent">
            <summary>
            供技能预览剧情使用的震屏事件
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeCameraEvent.curParam">
            <summary>
            当前震动参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeCameraEvent.IsMotionBlurEnabled">
            <summary>
            动态模糊是否可用
            </summary>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraEvent.OnGetTargetCameraCom">
            <summary>
            获取目标摄像机组件
            </summary>
            <returns>目标摄像机组件</returns>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraEvent.ShakeOnce(MUEngine.Story.FShakeCameraParam)">
            <summary>
            执行一次震动
            </summary>
            <param name="shakeParam">震动参数</param>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraEvent.RevertLastShake">
            <summary>
            还原上次震动
            </summary>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraEvent.CheckVecEqual(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            检测两个Vector3是否相等，精确到小数点后4位
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>两个向量是否相等</returns>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraEvent.CheckRotEqual(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            检测两个旋转是否相等，精确到小数点后4位
            </summary>
            <param name="rot1">旋转1</param>
            <param name="rot2">旋转2</param>
            <returns>两个旋转是否相等</returns>
        </member>
        <member name="T:MUEngine.Story.FShakeCameraParam">
            <summary>
            屏幕震动参数
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeCameraParam.MAX_HORIZON_RANGE">
            <summary>
            最大水平摇摆幅度
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeCameraParam.MAX_VERTICAL_RANGE">
            <summary>
            最大垂直摇摆幅度
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeCameraParam.MAX_ROTATION_RANGE">
            <summary>
            最大旋转摇摆幅度
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeCameraParam.MAX_MOVE_RADIUS">
            <summary>
            最大位移半径
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeCameraParam.HorizonSwingRange">
            <summary>
            水平摇摆幅度（旋转的Y轴）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeCameraParam.VerticalSwingRange">
            <summary>
            垂直摇摆幅度（旋转的X轴）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeCameraParam.RotationSwingRange">
            <summary>
            旋转摇摆幅度（旋转的Z轴）
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeCameraParam.PositionMoveRange">
            <summary>
            摄像机空间位移幅度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeCameraParam.MotionBlurStrength">
            <summary>
            动态模糊强度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeCameraParam.ShakeFrequence">
            <summary>
            震动频率（秒）。为0时则每次Update都会震动
            </summary>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraParam.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraParam.#ctor(MUEngine.Story.FShakeCameraParam)">
            <summary>
            构造函数
            </summary>
            <param name="param">震动参数</param>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraParam.Lerp(MUEngine.Story.FShakeCameraParam,MUEngine.Story.FShakeCameraParam,System.Single)">
            <summary>
            执行插值运算
            </summary>
            <param name="leftValue">左值</param>
            <param name="rightValue">右值</param>
            <param name="t">插值比例</param>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraParam.GetHorizonSwing">
            <summary>
            获取一个随机的水平摇摆值
            </summary>
            <returns>随机的水平摇摆值</returns>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraParam.GetVerticalSwing">
            <summary>
            获取一个随机的垂直摇摆值
            </summary>
            <returns>随机的垂直摇摆值</returns>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraParam.GetRotationSwing">
            <summary>
            获取一个随机的旋转摇摆值
            </summary>
            <returns>随机的旋转摇摆值</returns>
        </member>
        <member name="M:MUEngine.Story.FShakeCameraParam.GetMoveOffset">
            <summary>
            获取一个随机的位移偏移量
            </summary>
            <returns>随机的位移偏移量</returns>
        </member>
        <member name="T:MUEngine.Story.FShakeScreenEvent">
            <summary>
            屏幕震动关键帧事件
            Vector4的x, y, z, w分别表示：水平方向朝向震动幅度、垂直方向朝向震动幅度、摄像机位移幅度
            不再开放，改为使用FShakeCameraEvent
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeScreenEvent.MotionBlurStrength">
            <summary>
            动态模糊强度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShakeScreenEvent.ShakeFrequence">
            <summary>
            震动频率（秒）。为0时则每次Update都会震动
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeScreenEvent.MaxHorizonRange">
            <summary>
            最大水平振幅
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeScreenEvent.MaxVerticalRange">
            <summary>
            最大垂直振幅
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeScreenEvent.MaxRotateRange">
            <summary>
            最大旋转幅度
            </summary>
        </member>
        <member name="F:MUEngine.Story.FShakeScreenEvent.MaxRadius">
            <summary>
            最大位置半径
            </summary>
        </member>
        <member name="M:MUEngine.Story.FShakeScreenEvent.ShakeOnce(UnityEngine.Vector4)">
            <summary>
            执行一次震动
            </summary>
            <param name="shakeParam">震动参数</param>
        </member>
        <member name="M:MUEngine.Story.FShakeScreenEvent.RevertLastShake">
            <summary>
            还原上次震动
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShowSceneObjectEvent.SceneObjectTag">
            <summary>
            场景物体标签
            </summary>
        </member>
        <member name="P:MUEngine.Story.FShowSceneObjectEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="T:MUEngine.Story.FSunLightParam">
            <summary>
            主光控制参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSunLightParam.Rotation">
            <summary>
            朝向
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSunLightParam.LightColor">
            <summary>
            颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSunLightParam.Intensity">
            <summary>
            强度
            </summary>
        </member>
        <member name="M:MUEngine.Story.FSunLightParam.Create(UnityEngine.Light)">
            <summary>
            创建光强参数
            </summary>
            <param name="sourceLight">对应的光照对象</param>
            <returns>光强参数</returns>
        </member>
        <member name="M:MUEngine.Story.FSunLightParam.Lerp(MUEngine.Story.FSunLightParam,MUEngine.Story.FSunLightParam,System.Single)">
            <summary>
            光强参数插值
            </summary>
        </member>
        <member name="M:MUEngine.Story.FSunLightParam.Apply(UnityEngine.Light)">
            <summary>
            将参数应用到实际的光照对象
            </summary>
            <param name="targetLight">目标光照对象</param>
        </member>
        <member name="T:MUEngine.Story.FEventMenuOrder">
            <summary>
            FEvent的菜单显示顺序
            </summary>
        </member>
        <member name="T:MUEngine.Story.FEventPreloader">
            <summary>
            FEvent的预加载器
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEventPreloader.IsLoadFinished">
            <summary>
            加载是否已经完成
            </summary>
        </member>
        <member name="F:MUEngine.Story.FEventPreloader.preloadEvents">
            <summary>
            需要加载的事件列表
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventPreloader.#ctor(MUEngine.Story.FSequence)">
            <summary>
            构造函数
            </summary>
            <param name="sequence">父级动画序列</param>
        </member>
        <member name="M:MUEngine.Story.FEventPreloader.BuildLoadList(MUEngine.Story.FSequence)">
            <summary>
            构建加载列表
            </summary>
            <param name="sequence">父级动画序列</param>
        </member>
        <member name="M:MUEngine.Story.FEventPreloader.StartLoad">
            <summary>
            开始加载
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventPreloader.PrintUnloadedEvents">
            <summary>
            打印未加载完的事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FEventUpdateOrder">
            <summary>
            FEvent的更新顺序
            </summary>
        </member>
        <member name="T:MUEngine.Story.FFadeInOutEvent">
            <summary>
            带有淡入淡出效果的事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFadeInOutEvent.FadeInTime">
            <summary>
            淡入时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFadeInOutEvent.FadeOutTime">
            <summary>
            淡出时间
            </summary>
        </member>
        <member name="M:MUEngine.Story.FFadeInOutEvent.GetFadePercent(MUEngine.Story.IFadeInOutEvent,System.Single)">
            <summary>
            获取淡入淡出的百分比（0－1）
            </summary>
            <param name="fadeInOutEvent">淡入淡出事件</param>
            <param name="timeSinceTrigger">从触发后到现在的时间</param>
            <returns>百分比（0－1）</returns>
        </member>
        <member name="M:MUEngine.Story.FFadeInOutEvent.GetFadePercent(System.Single)">
            <summary>
            获取淡入淡出的百分比（0－1）
            </summary>
            <param name="timeSinceTrigger">从触发后到现在的时间</param>
            <returns>百分比（0－1）</returns>
        </member>
        <member name="M:MUEngine.Story.FFadeInOutEvent.GetFadePercent(System.Single,System.Single@)">
            <summary>
            获取淡入淡出百分比
            </summary>
            <param name="timeSinceTrigger">从触发后到现在的时间</param>
            <param name="t">百分比（0－1）</param>
            <returns>是否正在淡入</returns>
        </member>
        <member name="T:MUEngine.Story.FTransformEvent">
            @brief Base of transform property changes.
            @sa FPositionEvent, FRotationEvent, FScaleEvent
        </member>
        <member name="T:MUEngine.Story.FPreloadEvent">
            <summary>
            预加载事件基类
            </summary>
        </member>
        <member name="F:MUEngine.Story.FPreloadEvent.PRELOAD_TIMESPAN">
            <summary>
            预加载的提前开始时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPreloadEvent.HasPreloadTriggered">
            <summary>
            预加载是否已经触发
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPreloadEvent.PreloadTimespan">
            <summary>
            预加载时长
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPreloadEvent.StartPreload(System.Action)">
            <summary>
            开始预加载
            </summary>
            <param name="loadedCallback">加载完毕的回调</param>
        </member>
        <member name="T:MUEngine.Story.IActorEvent">
            <summary>
            演员事件接口
            </summary>
        </member>
        <member name="T:MUEngine.Story.IActorShaderEvent">
            <summary>
            演员材质(shader)控制事件的接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IActorShaderEvent.MaterialName">
            <summary>
            材质名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.IActorShaderEvent.PropertyName">
            <summary>
            对应的材质属性名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.IActorShaderEvent.TheMaterial">
            <summary>
            实际的材质对象
            </summary>
        </member>
        <member name="T:MUEngine.Story.IActorShaderEvent`1">
            <summary>
            演员材质(shader)控制事件接口的泛型形式
            </summary>
            <typeparam name="T">材质属性的数值类型</typeparam>
        </member>
        <member name="M:MUEngine.Story.IActorShaderEvent`1.GetMaterialProperty">
            <summary>
            获取材质中的属性值
            </summary>
            <returns>材质中的属性值</returns>
        </member>
        <member name="M:MUEngine.Story.IActorShaderEvent`1.SetMaterialProperty(`0)">
            <summary>
            设置材质的属性值
            </summary>
            <param name="propValue">材质的属性值</param>
        </member>
        <member name="T:MUEngine.Story.ICameraMoveEvent">
            <summary>
            会控制摄像机移动的接口
            该接口用于判定摄像机可能出现的位置，以便加载对应位置附近的地块
            </summary>
        </member>
        <member name="M:MUEngine.Story.ICameraMoveEvent.GetCameraPathNode">
            <summary>
            获取摄像机移动路径上的关键节点
            </summary>
            <returns>摄像机移动路径上的关键节点</returns>
        </member>
        <member name="T:MUEngine.Story.IFadeInOutEvent">
            <summary>
            淡入淡出类事件接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IFadeInOutEvent.FadeInTime">
            <summary>
            淡入时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.IFadeInOutEvent.FadeOutTime">
            <summary>
            淡出时间
            </summary>
        </member>
        <member name="T:MUEngine.Story.IFsmEvent">
            <summary>
            状态机事件接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IFsmEvent.TriggerName">
            <summary>
            触发器名称
            </summary>
        </member>
        <member name="T:MUEngine.Story.IHighQualityOnlyEvent">
            <summary>
            仅在高配情况下使用的事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.IHighQualityOnlyEvent.ForceEnable">
            <summary>
            是否强制启用
            </summary>
        </member>
        <member name="M:MUEngine.Story.IHighQualityOnlyEvent.IsHQEventEnabled">
            <summary>
            在当前画质下是否能够启用
            </summary>
            <returns>事件是否能够启用</returns>
        </member>
        <member name="T:MUEngine.Story.HighQualityOnlyEventExtension">
            <summary>
            高画质事件的扩展方法类
            </summary>
        </member>
        <member name="M:MUEngine.Story.HighQualityOnlyEventExtension.IsHQEventEnabled_Defalut(MUEngine.Story.IHighQualityOnlyEvent)">
            <summary>
            默认的高画质事件检测是否可以启用的扩展方法
            </summary>
            <param name="evt">待检测事件</param>
            <returns>是否可以启用</returns>
        </member>
        <member name="T:MUEngine.Story.IPreloadEvent">
            <summary>
            预加载事件接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IPreloadEvent.HasPreloadTriggered">
            <summary>
            预加载是否已经触发
            </summary>
        </member>
        <member name="P:MUEngine.Story.IPreloadEvent.PreloadTimespan">
            <summary>
            预加载时长
            </summary>
        </member>
        <member name="M:MUEngine.Story.IPreloadEvent.StartPreload(System.Action)">
            <summary>
            开始预加载
            </summary>
            <param name="loadedCallback">加载完毕的回调</param>
        </member>
        <member name="T:MUEngine.Story.ISmoothEvent">
            <summary>
            平滑过渡事件接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.ISmoothEvent.IsSmooth">
            <summary>
            是否启用平滑过渡
            </summary>
        </member>
        <member name="P:MUEngine.Story.ISmoothEvent.SmoothingTime">
            <summary>
            平滑过渡时间
            </summary>
        </member>
        <member name="T:MUEngine.Story.ITargetEvent">
            <summary>
            目标事件接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.UsePositionAsTarget">
            <summary>
            是否以坐标点作为目标
            true: 以TargetPosition作为目标， false: 以TargetEntity的位置作为目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.TargetPosition">
            <summary>
            坐标点目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.TargetEntity">
            <summary>
            实体目标
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.TargetEntityNode">
            <summary>
            以实体为目标时，具体的节点名称
            以实体的根节点为目标时留空即可
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.Offset">
            <summary>
            以实体为目标时的位置偏移量
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.IsAbsoluteOffset">
            <summary>
            偏移量是否为绝对坐标（true为绝对坐标，false为相对坐标）
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.SelfPosition">
            <summary>
            自身位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="T:MUEngine.Story.ITargetEventControlView">
            <summary>
            目标事件的控制视图接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITargetEventControlView.TargetPositionGameObject">
            <summary>
            表示坐标点目标的游戏对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.ITargetEventControlView.RegisterPropertyChangeEvent">
            <summary>
            注册属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.ITargetEventControlView.UnregisterPropertyChangeEvent">
            <summary>
            取消对属性变更事件的注册
            </summary>
        </member>
        <member name="T:MUEngine.Story.ITextEvent">
            <summary>
            文本事件接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITextEvent.Text">
            <summary>
            实际文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITextEvent.TextColor">
            <summary>
            文本颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITextEvent.EnableShadow">
            <summary>
            是否启用阴影
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITextEvent.ShadowColor">
            <summary>
            阴影颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITextEvent.EnableOutline">
            <summary>
            是否启用描边
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITextEvent.OutlineColor">
            <summary>
            描边颜色
            </summary>
        </member>
        <member name="M:MUEngine.Story.ITextEvent.EditorUpdateText">
            <summary>
            （编辑器方法）更新文本UI
            </summary>
        </member>
        <member name="T:MUEngine.Story.ITransitionEvent">
            <summary>
            带有过渡效果的事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITransitionEvent.TransitionInTime">
            <summary>
            过渡进入的时间
            </summary>
        </member>
        <member name="P:MUEngine.Story.ITransitionEvent.TransitionOutTime">
            <summary>
            过渡离开的时间
            </summary>
        </member>
        <member name="T:MUEngine.Story.IUniformKeyFrameEvent">
            <summary>
            均分关键帧事件的接口
            </summary>
        </member>
        <member name="M:MUEngine.Story.IUniformKeyFrameEvent.UniformKeyFrames(System.Int32,System.Int32)">
            <summary>
            均分关键帧
            </summary>
            <param name="start">起始帧</param>
            <param name="end">结束帧</param>
        </member>
        <member name="T:MUEngine.Story.IVisualizedEvent">
            <summary>
            带有控制视图的事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.IVisualizedEvent.ControlView">
            <summary>
            控制视图
            </summary>
        </member>
        <member name="T:MUEngine.Story.BezierUtility">
            <summary>
            贝塞尔曲线帮助类
            </summary>
        </member>
        <member name="F:MUEngine.Story.BezierUtility.SamplingCount">
            <summary>
            计算时使用的采样点数量
            </summary>
        </member>
        <member name="M:MUEngine.Story.BezierUtility.GetTangent(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            获取三次贝塞尔曲线上的控制点坐标
            </summary>
            <param name="startPos">曲线的起点</param>
            <param name="endPos">曲线的终点</param>
            <param name="controlpoint">曲线控制点的高度/曲线两点间的直线距离(0 ~ 1)</param>
            <param name="startTan">起点的曲线控制点</param>
            <param name="endTan">终点的曲线控制点</param>
        </member>
        <member name="M:MUEngine.Story.BezierUtility.GetCurveNormalDir(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取两点连线上的垂线
            </summary>
        </member>
        <member name="M:MUEngine.Story.BezierUtility.GetPoint(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            获取三次贝塞尔曲线上的二维点坐标
            </summary>
            <param name="start">曲线的起点</param>
            <param name="end">曲线的终点</param>
            <param name="startTangent">起点的曲线控制点</param>
            <param name="endTangent">终点的曲线控制点</param>
            <param name="t">比率</param>
            <returns>曲线上的点坐标</returns>
        </member>
        <member name="M:MUEngine.Story.BezierUtility.GetPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            获取三次贝塞尔曲线上的三维点坐标
            </summary>
            <param name="start">曲线的起点</param>
            <param name="end">曲线的终点</param>
            <param name="startTangent">起点的曲线控制点</param>
            <param name="endTangent">终点的曲线控制点</param>
            <param name="t">比率</param>
            <returns>曲线上的点坐标</returns>
        </member>
        <member name="M:MUEngine.Story.BezierUtility.GetFittingSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取三次贝塞尔曲线的拟合线段集合
            </summary>
            <param name="start">曲线的起点</param>
            <param name="end">曲线的终点</param>
            <param name="startTangent">起点的曲线控制点</param>
            <param name="endTangent">终点的曲线控制点</param>
            <returns>拟合线段集合</returns>
        </member>
        <member name="T:MUEngine.Story.LineSegment">
            <summary>
            简单线段类
            </summary>
        </member>
        <member name="P:MUEngine.Story.LineSegment.Start">
            <summary>
            线段起点
            </summary>
        </member>
        <member name="P:MUEngine.Story.LineSegment.End">
            <summary>
            线段终点
            </summary>
        </member>
        <member name="P:MUEngine.Story.LineSegment.Length">
            <summary>
            线段长度
            </summary>
        </member>
        <member name="M:MUEngine.Story.LineSegment.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            构造函数
            </summary>
            <param name="start">线段起点</param>
            <param name="end">线段终点</param>
        </member>
        <member name="T:MUEngine.Story.FCurveNode">
            <summary>
            关键帧曲线的节点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCurveNode.Frame">
            <summary>
            节点所在的帧位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCurveNode.Value">
            <summary>
            节点的数值
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCurveNode.EasingType">
            <summary>
            缓动类型
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCurveNode.#ctor(System.Int32,System.Single,MUEngine.Story.FEasingType)">
            <summary>
            构造函数
            </summary>
            <param name="frame">节点所在的帧位置</param>
            <param name="value">节点的数值</param>
            <param name="easingType">缓动类型</param>
        </member>
        <member name="T:MUEngine.Story.FCurveSegment">
            <summary>
            曲线段
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCurveSegment.Start">
            <summary>
            起点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCurveSegment.End">
            <summary>
            终点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FCurveSegment.IsCurve">
            <summary>
            是否为曲线（false则为直线）
            </summary>
        </member>
        <member name="F:MUEngine.Story.FCurveSegment.lineSegments">
            <summary>
            拟合线段集合
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCurveSegment.#ctor(MUEngine.Story.FCurveNode,MUEngine.Story.FCurveNode,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            构造函数，使用该构建创建的线段为曲线
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
            <param name="startTangent">起点的切线控制点</param>
            <param name="endTangent">终点的切线控制点</param>
        </member>
        <member name="M:MUEngine.Story.FCurveSegment.#ctor(MUEngine.Story.FCurveNode,MUEngine.Story.FCurveNode)">
            <summary>
            构造函数，使用该构建创建的线段为直线
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
        </member>
        <member name="M:MUEngine.Story.FCurveSegment.BuildAsCurve(MUEngine.Story.FCurveNode,MUEngine.Story.FCurveNode,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            作为曲线来构建
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
            <param name="startTangent">起点的切线控制点</param>
            <param name="endTangent">终点的切线控制点</param>
        </member>
        <member name="M:MUEngine.Story.FCurveSegment.BuildAsLine(MUEngine.Story.FCurveNode,MUEngine.Story.FCurveNode)">
            <summary>
            作为直线来构建
            </summary>
            <param name="start">起点</param>
            <param name="end">终点</param>
        </member>
        <member name="M:MUEngine.Story.FCurveSegment.Contains(System.Single)">
            <summary>
            检测某一帧是否包含在曲线线段范围内
            </summary>
            <param name="frame">帧位置</param>
            <returns>帧是否包含在曲线线段范围内</returns>
        </member>
        <member name="M:MUEngine.Story.FCurveSegment.GetValue(System.Single)">
            <summary>
            获取曲线上的值
            </summary>
            <param name="frame">帧位置</param>
            <returns>曲线上的值</returns>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameCurve">
            <summary>
            关键帧曲线类
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameCurve.KeyFrameRange">
            <summary>
            曲线上的关键帧的范围
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameCurve.curveSegments">
            <summary>
            曲线段集合
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameCurve.allCurveNodes">
            <summary>
            所有的曲线节点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameCurve.FirstCurveSegment">
            <summary>
            第一个曲线线段
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameCurve.LastCurveSegment">
            <summary>
            最后一个曲线线段
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCurve.#ctor(System.Collections.Generic.List{MUEngine.Story.FCurveNode})">
            <summary>
            构造函数
            </summary>
            <param name="nodeList">曲线节点列表</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCurve.GetValue(System.Single)">
            <summary>
            获取曲线上的值
            </summary>
            <param name="frame">帧位置</param>
            <returns>曲线上的值</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameCurve.ContructCurve(System.Collections.Generic.List{MUEngine.Story.FCurveNode})">
            <summary>
            构建曲线
            </summary>
            <param name="keyFrameNodes">曲线上的关键帧节点</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameBase.Create``1(UnityEngine.GameObject,MUEngine.Story.EStoryMode)">
            <summary>
            创建一个关键帧
            </summary>
            <typeparam name="KEYFRAME">关键帧类型</typeparam>
            <param name="root">持有关键帧对象的根节点</param>
            <param name="storyMode">当前剧情模式</param>
            <returns>新创建的关键帧</returns>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameBase.Frame">
            <summary>
            所在帧位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameBase.EasingType">
            <summary>
            缓动类型
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameBase.currentStoryMode">
            <summary>
            当前剧情模式
            </summary>
        </member>
        <member name="E:MUEngine.Story.FKeyFrameBase.PropertyChanged">
            <summary>
            属性变更事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrame`1.Value">
            <summary>
            关键帧的数值
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameEvent`2">
            <summary>
            关键帧事件泛型基类
            </summary>
            <typeparam name="KEYFRAME">事件中使用的关键帧的类型</typeparam>
            <typeparam name="VALUE">关键帧的值的类型</typeparam>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEvent`2.IsDirty">
            <summary>
            关键帧数值是否已失效
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEvent`2.KeyFrameCount">
            <summary>
            关键帧数量
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEvent`2.KeyFrames">
            <summary>
            关键帧列表
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEvent`2.EasyingType">
            <summary>
            全局缓动类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEvent`2.FirstKeyFrame">
            <summary>
            第一个关键帧
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEvent`2.LastKeyFrame">
            <summary>
            最后一个关键帧
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameEvent`2.cachedFrameRange">
            <summary>
            缓存FrameRange，以便能够在撤销重做时触发OnChangeFrameRange
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.GetKeyFrames">
            <summary>
            获取关键帧列表
            </summary>
            <returns>关键帧列表</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.GetValueAt(System.Single)">
            <summary>
            获取指定帧位置上的数值
            </summary>
            <param name="frame">帧位置</param>
            <returns>事件在指定的帧位置上的数值</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.RecordKeyFrame(`1)">
            <summary>
            记录关键帧
            </summary>
            <param name="value">关键帧的数值</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.RecordKeyFrame(System.Int32,`1)">
            <summary>
            在指定帧的位置记录关键帧
            </summary>
            <param name="frame">指定的帧位置</param>
            <param name="value">关键帧的数值</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.OnUpdateKeyFrameValue(`0,`1)">
            <summary>
            更新关键帧的数值
            </summary>
            <param name="keyFrame">需要更新数据的关键帧</param>
            <param name="value">新的数值</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.OnAddKeyFrameAt(System.Int32,`1,MUEngine.Story.FEasingType)">
            <summary>
            在指定帧位置添加关键帧
            </summary>
            <param name="frame">帧位置</param>
            <param name="value">关键帧的数值</param>
            <param name="easingType">缓动类型</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.RemoveKeyFrame(MUEngine.Story.FKeyFrameBase)">
            <summary>
            移除关键帧
            </summary>
            <param name="keyFrame">需要移除的关键帧</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.Merge_EditorOnly(MUEngine.Story.FKeyFrameEventBase)">
            <summary>
            合并其它关键帧事件
            注意：只能合并同一轨道上的事件，并且传入的事件必须位于当前事件相邻的后方
            </summary>
            <param name="otherEvent">需要合并的事件</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.OnUpdateKeyFrame(`0)">
            <summary>
            更新关键帧
            </summary>
            <param name="keyFrame">触发的关键帧</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.OnUpdateKeyFrameTween(System.Single,`0,`0)">
            <summary>
            更新关键帧补间动画
            左帧或右帧可能为空，但不会同时为空
            </summary>
            <param name="frame">帧位置，可能因为缓动不是整数</param>
            <param name="leftKeyFrame">左侧关键帧</param>
            <param name="rightKeyFrame">右侧关键帧</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.GetEasingPercent(System.Single,MUEngine.Story.FKeyFrameBase,MUEngine.Story.FKeyFrameBase)">
            <summary>
            获取带有缓动的百分比
            </summary>
            <param name="frame">当前帧</param>
            <param name="leftKeyFrame">左侧关键帧</param>
            <param name="rightKeyFrame">右侧关键帧</param>
            <returns>百分比</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.Rebuild">
            <summary>
            重新构建事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.RefreshKeyFrameList">
            <summary>
            刷新关键帧列表
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEvent`2.KeyFrameChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理关键帧变更事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameEventBase">
            <summary>
            关键帧事件接口类
            因为需要在FEventEditor中进行标记，所以不能直接使用interface类型
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameEventBase.KeyFramesPropName">
            <summary>
            关键帧的属性名
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEventBase.KeyFrameCount">
            <summary>
            关键帧数量
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameEventBase.EasyingType">
            <summary>
            全局缓动类型
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEventBase.GetKeyFrames">
            <summary>
            获取关键帧列表
            </summary>
            <returns>关键帧列表</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEventBase.RecordKeyFrame">
            <summary>
            在当前位置记录关键帧
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEventBase.RemoveKeyFrame(MUEngine.Story.FKeyFrameBase)">
            <summary>
            移除关键帧
            </summary>
            <param name="keyFrame">需要移除的关键帧</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEventBase.Merge_EditorOnly(MUEngine.Story.FKeyFrameEventBase)">
            <summary>
            (编辑器方法)合并其它关键帧事件
            注意：只能合并同一轨道上的事件，并且传入的事件必须位于当前事件相邻的后方
            </summary>
            <param name="otherEvent">需要合并的事件</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEventBase.GetKeyFrameType_EditorOnly">
            <summary>
            (编辑器方法)获取对应的关键帧的类型
            </summary>
            <returns>对应的关键帧的类型</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameEventBase.RecordKeyFrame_EditorOnly(System.Int32,System.Object)">
            <summary>
            (编辑器方法)在指定的帧位置记录关键帧
            </summary>
            <param name="frame">指定的帧位置</param>
            <param name="value">关键帧的数值</param>
        </member>
        <member name="T:MUEngine.Story.FSimpleKeyFrameEvent`2">
            <summary>
            简单关键帧事件基类（不使用平滑曲线）
            </summary>
            <typeparam name="KEYFRAME"></typeparam>
            <typeparam name="VALUE"></typeparam>
        </member>
        <member name="M:MUEngine.Story.FSimpleKeyFrameEvent`2.OnUpdateUsingValue(`1)">
            <summary>
            使用给定的数值进行更新
            </summary>
            <param name="value">给定的数值</param>
        </member>
        <member name="M:MUEngine.Story.FSimpleKeyFrameEvent`2.GetValueAt(System.Single)">
            <summary>
            获取指定帧位置上的数值
            </summary>
            <param name="frame">帧位置</param>
            <returns>事件在指定的帧位置上的数值</returns>
        </member>
        <member name="M:MUEngine.Story.FSimpleKeyFrameEvent`2.OnGetValueAt(System.Single,`0,`0)">
            <summary>
            获取指定帧位置上的数值
            左帧或右帧均不会为空
            </summary>
            <param name="frame">帧位置</param>
            <param name="leftKeyFrame">左侧关键帧</param>
            <param name="rightKeyFrame">右侧关键帧</param>
            <returns>事件在指定的帧位置上的数值</returns>
        </member>
        <member name="T:MUEngine.Story.FCameraNode">
            <summary>
            摄像机轨迹节点，在普通轨迹节点的基础上增加了摄像机的旋转信息
            </summary>
        </member>
        <member name="M:MUEngine.Story.FCameraNode.Create">
            <summary>
            创建默认节点
            </summary>
            <returns>默认节点</returns>
        </member>
        <member name="M:MUEngine.Story.FCameraNode.Create(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            创建节点
            </summary>
            <param name="position">节点的位置</param>
            <param name="rotation">节点的旋转</param>
            <returns>新的节点</returns>
        </member>
        <member name="M:MUEngine.Story.FCameraNode.Create(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            创建节点
            </summary>
            <param name="position">节点的位置</param>
            <param name="rotation">节点旋转对应的Vector3</param>
            <returns>新的节点</returns>
        </member>
        <member name="P:MUEngine.Story.FCameraNode.Rotation">
            <summary>
            旋转
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameTrace">
            <summary>
            基于关键帧的位置轨迹
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameTrace.keyFrameList">
            <summary>
            关键帧节点列表
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameTrace.segmentsList">
            <summary>
            轨迹线段列表
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTrace.FirstKeyFrame">
            <summary>
            第一个关键帧
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTrace.LastKeyFrame">
            <summary>
            最后一个关键帧
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTrace.KeyFrameCount">
            <summary>
            关键帧数量
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameTrace.isDirty">
            <summary>
            是否需要重新构建轨迹线段
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.Create(MUEngine.Story.FKeyFrameEventBase)">
            <summary>
            创建关键帧轨迹
            </summary>
            <param name="ownerEvent">持有者事件</param>
            <returns>关键帧轨迹</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.GetPosition(System.Single)">
            <summary>
            获取轨迹位置
            </summary>
            <param name="frame">帧</param>
            <returns>轨迹位置</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.AddKeyFrame(MUEngine.Story.IKeyFrameTraceNode)">
            <summary>
            添加关键帧
            </summary>
            <param name="newKeyFrame">新的关键帧</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.RemoveKeyFrame(MUEngine.Story.IKeyFrameTraceNode)">
            <summary>
            移除关键帧
            </summary>
            <param name="removeKeyFrame">需要移除的关键帧</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.UniformAllKeyFrames(System.Int32,System.Int32)">
            <summary>
            平均分配所有关键帧，使用移动变为匀速移动
            </summary>
            <param name="start">起始帧的索引</param>
            <param name="end">结束帧的索引</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.Rebuild">
            <summary>
            重新构建轨迹曲线
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.GetSegment(System.Single)">
            <summary>
            获取帧对应的线段
            </summary>
            <param name="frame">帧</param>
            <returns>帧所在的线段</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.AdjustNode(System.Int32)">
            <summary>
            调整节点，根据节点的相邻节点情况将其转为曲线或直线节点
            </summary>
            <param name="index">节点的索引</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.RebuildSegments">
            <summary>
            重新构建
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrace.KeyFramePropertyChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理关键帧变更事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FKeyFrameTraceSegment">
            <summary>
            关键帧位置轨迹的线段
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTraceSegment.Start">
            <summary>
            线段起点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTraceSegment.End">
            <summary>
            线段终点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTraceSegment.IsCurve">
            <summary>
            是否为曲线
            </summary>
        </member>
        <member name="P:MUEngine.Story.FKeyFrameTraceSegment.Length">
            <summary>
            线段的长度
            </summary>
        </member>
        <member name="F:MUEngine.Story.FKeyFrameTraceSegment.cachedFittingSegments">
            <summary>
            缓存的拟合线段
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceSegment.#ctor(MUEngine.Story.IKeyFrameTraceNode,MUEngine.Story.IKeyFrameTraceNode)">
            <summary>
            构造函数
            </summary>
            <param name="start">线段起点</param>
            <param name="end">线段终点</param>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceSegment.GetPosition(System.Single)">
            <summary>
            获取某一帧对应的轨迹位置
            </summary>
            <param name="frame">帧</param>
            <returns>帧对应的轨迹位置</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceSegment.Contains(System.Single)">
            <summary>
            判断某一帧是否在线段的范围之内
            </summary>
            <param name="frame">帧</param>
            <returns>该帧是否在线段的范围之内</returns>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceSegment.Rebuild">
            <summary>
            重新构建
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTraceSegment.KeyFramePropertyChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理关键帧属性变更事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.FTraceNode">
            <summary>
            位置轨迹节点
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTraceNode.Create">
            <summary>
            创建默认节点
            </summary>
            <returns>默认节点</returns>
        </member>
        <member name="M:MUEngine.Story.FTraceNode.Create(UnityEngine.Vector3)">
            <summary>
            创建节点
            </summary>
            <param name="position">节点的位置</param>
            <returns>新创建的节点</returns>
        </member>
        <member name="P:MUEngine.Story.FTraceNode.Position">
            <summary>
            节点的位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTraceNode.EnterAsCurve">
            <summary>
            是否以曲线形式进入该节点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTraceNode.EnterControl">
            <summary>
            进入该节点的曲线控制点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTraceNode.LeaveAsCurve">
            <summary>
            是否以曲线形式离开该节点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTraceNode.LeaveControl">
            <summary>
            离开该节点的曲线控制点
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTraceNode.AutoAdjust">
            <summary>
            是否自适应调整曲线控制点位置
            </summary>
        </member>
        <member name="T:MUEngine.Story.ECameraCutToEffect">
            <summary>
            摄像机转场渐变类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEnableCameraEvent.Camera">
            <summary>
            对应的摄像机
            如果为空则启用游戏主摄像机
            </summary>
        </member>
        <member name="T:MUEngine.Story.FLoopEvent">
            <summary>
            循环播放事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FLoopEvent.ResetTracks">
            <summary>
            重置相关轨道
            </summary>
        </member>
        <member name="F:MUEngine.Story.FTimescaleEvent.MinSpeedLimit">
            <summary>
            最小速度限制
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTimescaleEvent.TargetSpeed">
            <summary>
            目标速度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FUIImagePositionShakeEvent.ShakeFrequence">
            <summary>
            震动频率（秒）。为0时则每次Update都会震动
            </summary>
        </member>
        <member name="F:MUEngine.Story.FUIImagePositionShakeEvent.curParam">
            <summary>
            当前震动参数
            </summary>
        </member>
        <member name="M:MUEngine.Story.FUIImagePositionShakeEvent.ShakeOnce(MUEngine.Story.FUIShakeParam)">
            <summary>
            执行一次震动
            </summary>
            <param name="shakeParam">震动参数</param>
        </member>
        <member name="M:MUEngine.Story.FUIImagePositionShakeEvent.RevertLastShake">
            <summary>
            还原上次震动的效果
            </summary>
        </member>
        <member name="T:MUEngine.Story.FUIShakeParam">
            <summary>
            UI震动参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.FUIShakeParam.X">
            <summary>
            水平方向震动幅度
            </summary>
        </member>
        <member name="P:MUEngine.Story.FUIShakeParam.Y">
            <summary>
            垂直方向震动幅度
            </summary>
        </member>
        <member name="M:MUEngine.Story.FUIShakeParam.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Story.FUIShakeParam.#ctor(System.Single,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="x">水平震动幅度</param>
            <param name="y">垂直震动幅度</param>
        </member>
        <member name="P:MUEngine.Story.FUITextPositionShakeEvent.ShakeFrequence">
            <summary>
            震动频率
            </summary>
        </member>
        <member name="F:MUEngine.Story.FUITextPositionShakeEvent.curParam">
            <summary>
            当前的震动幅度参数
            </summary>
        </member>
        <member name="M:MUEngine.Story.FUITextPositionShakeEvent.ShakeOnce">
            <summary>
            执行一次震动，震动位移在振幅内随机
            </summary>
        </member>
        <member name="M:MUEngine.Story.FUITextPositionShakeEvent.RevertLastShake">
            <summary>
            恢复为上次震动前的位置
            </summary>
        </member>
        <member name="T:MUEngine.Story.FBaseTextEvent`1">
            <summary>
            剧情通用文本事件的基类
            </summary>
        </member>
        <member name="P:MUEngine.Story.FBaseTextEvent`1.Text">
            <summary>
            实际文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FBaseTextEvent`1.TextColor">
            <summary>
            文本颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.FBaseTextEvent`1.EnableShadow">
            <summary>
            是否启用阴影
            </summary>
        </member>
        <member name="P:MUEngine.Story.FBaseTextEvent`1.ShadowColor">
            <summary>
            阴影颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.FBaseTextEvent`1.EnableOutline">
            <summary>
            是否启用描边
            </summary>
        </member>
        <member name="P:MUEngine.Story.FBaseTextEvent`1.OutlineColor">
            <summary>
            描边颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.FBaseTextEvent`1.TextWidget">
            <summary>
            对应的文本控件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FBaseTextEvent`1.UpdateTextAlpha(System.Single)">
            <summary>
            更新文本的透明度
            </summary>
            <param name="alpha">透明度</param>
        </member>
        <member name="M:MUEngine.Story.FBaseTextEvent`1.EditorUpdateText">
            <summary>
            （编辑器方法）更新文本UI
            </summary>
        </member>
        <member name="P:MUEngine.Story.FColorBackgroundEvent.BgColor">
            <summary>
            颜色值
            </summary>
        </member>
        <member name="P:MUEngine.Story.FColorBackgroundEvent.UseCustomLayer">
            <summary>
            是否使用自定义层级
            </summary>
        </member>
        <member name="P:MUEngine.Story.FColorBackgroundEvent.CustomLayerOrder">
            <summary>
            自定义层级
            </summary>
        </member>
        <member name="P:MUEngine.Story.FColorBackgroundEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FColorBackgroundEvent.BgWidget">
            <summary>
            纯色背景控件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FColorBackgroundEvent.EditorUpdateColor">
            <summary>
            （编辑器方法）更新当前颜色
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.SpriteAssetName">
            <summary>
            图片资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.OffsetX">
            <summary>
            水平方向偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.OffsetY">
            <summary>
            垂直方向偏移
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.FadeInScale">
            <summary>
            淡入时的起始缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.NormalScale">
            <summary>
            常态时的缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.FadeOutScale">
            <summary>
            淡出时的最终缩放
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.SortingOrder">
            <summary>
            排序顺序
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.HasPreloadTriggered">
            <summary>
            预加载是否已经触发
            </summary>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.MUEngine#Story#IPreloadEvent#PreloadTimespan">
            <summary>
            预加载的提前开始时间
            </summary>
        </member>
        <member name="M:MUEngine.Story.FFreeImageEvent.MUEngine#Story#IPreloadEvent#StartPreload(System.Action)">
            <summary>
            开始预加载
            </summary>
            <param name="loadedCallback">加载完毕的回调</param>
        </member>
        <member name="P:MUEngine.Story.FFreeImageEvent.ImageWidget">
            <summary>
            对应的图片控件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FFreeImageEvent.EditorUpdateImage">
            <summary>
            （编辑器方法）更新图片UI
            </summary>
        </member>
        <member name="M:MUEngine.Story.FContainer.Add(MUEngine.Story.FTimeline)">
            @brief Adds new timeline at the end of the list.
            @param timeline New timeline.
        </member>
        <member name="M:MUEngine.Story.FContainer.Remove(MUEngine.Story.FTimeline)">
            @brief Removes timeline and updates their ids.
            @param timeline CTimeline to remove.
            @note After calling this function, the ids of the timelines after this
            one in the list will have an id smaller by 1.
        </member>
        <member name="M:MUEngine.Story.FContainer.Remove(System.Int32)">
            @brief Removes timeline with id.
            @oaram id Id of the CTimeline to remove.
            @note After calling this function, the ids of the timelines after this
            one in the list will have an id smaller by 1.
            @warning Does not check if id is val  id (i.e. between -1 and GetTimelines().Count)
        </member>
        <member name="M:MUEngine.Story.FContainer.ToJsonObject">
            <summary>
            生成供序列化使用的JSON数据对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FContainer.FromJsonObject(MUEngine.Story.JsonContainer,MUEngine.Story.FSequence)">
            <summary>
            根据JSON数据对象来生成对应的FContainer
            </summary>
            <param name="jContainer">JSON数据对象</param>
            <param name="ownerSequence">持有Container的FSequence</param>
        </member>
        <member name="T:MUEngine.Story.FEvent">
            @brief Base class for Events
            @sa FSequence, FTimeline, FTrack.
        </member>
        <member name="P:MUEngine.Story.FEvent.OwnerStory">
            <summary>
            父级剧情对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEvent.Track">
            @brief Returns the track it belongs to
        </member>
        <member name="P:MUEngine.Story.FEvent.TriggerOnSkip">
            @brief Should this event trigger if you skip it?
        </member>
        <member name="P:MUEngine.Story.FEvent.FrameRange">
            @brief Range of the event.
        </member>
        <member name="P:MUEngine.Story.FEvent.HasTriggered">
            @brief Has Trigger been called already?
        </member>
        <member name="P:MUEngine.Story.FEvent.HasFinished">
            @brief Has Finish been called already?
        </member>
        <member name="P:MUEngine.Story.FEvent.FTag">
            <summary>
            Flux专用标签。方便外部通过标签名称获取对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEvent.UpdatePriority">
            <summary>
            每帧更新时的执行优先级
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEvent.Create``1(MUEngine.Story.FrameRange)">
            @brief Create an event. Should be used to create events since it also 
            calls SetDefaultValues.
            @param range Range of the event.
        </member>
        <member name="M:MUEngine.Story.FEvent.Create(System.Type,MUEngine.Story.FrameRange)">
            @overload
        </member>
        <member name="M:MUEngine.Story.FEvent.SetDefaultValues">
            @brief Use this function to setup default values for when events get created
        </member>
        <member name="M:MUEngine.Story.FEvent.OnFrameRangeChanged(MUEngine.Story.FrameRange)">
            @brief Use this function if you want to do something to the event when the frame range
            changed, e.g. adjust some variables to the new event size.
            @param oldFrameRange Previous FrameRange, the current one is set on the event.
        </member>
        <member name="M:MUEngine.Story.FEvent.Trigger(System.Single)">
            @brief Called when the event gets reached.
            The reason we pass the time is because they may have been frames skipped
            or simply we may have jumped into the middle of an event, and that allows you 
            to skip to the right point. E.g. useful when you want to play an animation, 
            if you jumped to the middle of it you want to tell mecanim to start in the middle,
            not at the start.
            @param frameSinceTrigger Frames that passed since the actual TriggerFrame
            @param timeSinceTrigger Time passed since the actual TriggerFrame
            @sa TriggerFrame, TriggerTime, Finish
        </member>
        <member name="M:MUEngine.Story.FEvent.OnSaveInitState">
            <summary>
            记录事件播放前的初始状态
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEvent.TriggerFrame">
            @brief At which frame will the event trigger, basically the start of it's range.
        </member>
        <member name="P:MUEngine.Story.FEvent.TriggerTime">
            @brief At which time the event triggers.
            @note Value isn't cached.
        </member>
        <member name="M:MUEngine.Story.FEvent.OnTrigger(System.Single)">
            @brief Used to setup your own code when Trigger is called.
            @param framesSinceTrigger Frames passed since TriggerFrame
            @param timeSinceTrigger Time passed since timeSinceTrigger
        </member>
        <member name="M:MUEngine.Story.FEvent.Finish">
            @brief Called when the event ends, i.e. we pass the end of it's range.
            @sa Trigger
        </member>
        <member name="M:MUEngine.Story.FEvent.OnFinish">
            @brief Used to setup your own code when Finish is called.
        </member>
        <member name="M:MUEngine.Story.FEvent.OnInit">
            @brief Used to setup your own code for when the sequence is initialized
        </member>
        <member name="M:MUEngine.Story.FEvent.OnPause">
            @brief Used to setup your own code for when the sequence is paused
        </member>
        <member name="M:MUEngine.Story.FEvent.OnResume">
            @brief Used to setup your own code for when the sequence is resumed
        </member>
        <member name="M:MUEngine.Story.FEvent.OnRestoreInitState">
            <summary>
            恢复为之前记录下来的初始状态
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEvent.OnStop">
            @brief Used to setup your own code for when the sequence is stopped
        </member>
        <member name="M:MUEngine.Story.FEvent.UpdateEvent(System.Int32,System.Single)">
            @brief Called each time the sequence gets updated, if the current frame is in this event's range.
            @param framesSinceTrigger How many frames have passed since TriggerFrame
            @param timeSinceTrigger How much time passed since TriggerFrame
        </member>
        <member name="M:MUEngine.Story.FEvent.OnUpdateEvent(System.Single)">
            @brief UpdateEvent but to only be called by the flux editor tools, should not be called at runtime.
        </member>
        <member name="M:MUEngine.Story.FEvent.PreEvent">
            @brief Used to mark objects used as not to be saved, in order to not make the scene dirty when 
            scrubbing the editor.
            @note This is called before every call to FEvent, i.e. Trigger, UpdateEvent, Stop, etc.
        </member>
        <member name="M:MUEngine.Story.FEvent.PostEvent">
            @brief Used to mark objects used as to be saved again.
            @note This is called after every call to FEvent, i.e. Trigger, UpdateEvent, Stop, etc.
        </member>
        <member name="P:MUEngine.Story.FEvent.IsFirstEvent">
            @brief Returns \e true if it is the first event of the track it belongs to.
        </member>
        <member name="P:MUEngine.Story.FEvent.IsLastEvent">
            @brief Returns \e true if it is the last event of the track it belongs to.
        </member>
        <member name="P:MUEngine.Story.FEvent.Start">
            @brief Shortcut to FrameRange.Start
        </member>
        <member name="P:MUEngine.Story.FEvent.End">
            @brief Shortcut to FrameRange.End
        </member>
        <member name="P:MUEngine.Story.FEvent.Length">
            @brief Shortcut to FrameRange.Length
        </member>
        <member name="P:MUEngine.Story.FEvent.StartTime">
            @brief What this the event starts.
            @note This value isn't cached.
        </member>
        <member name="P:MUEngine.Story.FEvent.EndTime">
            @brief What this the event ends.
            @note This value isn't cached.
        </member>
        <member name="P:MUEngine.Story.FEvent.LengthTime">
            @brief Length of the event in seconds.
            @note This value isn't cached.
        </member>
        <member name="M:MUEngine.Story.FEvent.GetMinLength">
            @brief What's the minimum length this event can have?
            @warning Events cannot be smaller than 1 frame.
        </member>
        <member name="M:MUEngine.Story.FEvent.GetMaxLength">
            @brief What's the maximum length this event can have?
        </member>
        <member name="M:MUEngine.Story.FEvent.Collides(MUEngine.Story.FEvent)">
            @brief Does the Event collides the \e e?
        </member>
        <member name="M:MUEngine.Story.FEvent.GetMaxFrameRange">
            @brief Returns the biggest frame range this event can have
        </member>
        <member name="M:MUEngine.Story.FEvent.Compare(MUEngine.Story.FEvent,MUEngine.Story.FEvent)">
            @brief Compares events based on their start frame, basically used to order them.
            @param e1 Event
            @param e2 Event
        </member>
        <member name="M:MUEngine.Story.FEvent.Rebuild">
            <summary>
            重新构建，会在Unity编辑器的Hierachy变更时被调用
            </summary>
        </member>
        <member name="F:MUEngine.Story.FEvent.cachedSnapPoints">
            <summary>
            缓存的吸附点列表
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEvent.GetSnapPoints">
            <summary>
            获取吸附点列表
            </summary>
            <returns>吸附点列表</returns>
        </member>
        <member name="M:MUEngine.Story.FEvent.Rescale(MUEngine.Story.FrameRange)">
            <summary>
            （FSequence帧率变更时）调整事件的缩放
            </summary>
            <param name="newFrameRange">新的事件帧范围</param>
        </member>
        <member name="M:MUEngine.Story.FEvent.OnRescale(MUEngine.Story.FrameRange)">
            <summary>
            （FSequence帧率变更时）调整事件的缩放
            可由子类覆写
            </summary>
            <param name="newFrameRange">新的事件帧范围</param>
        </member>
        <member name="M:MUEngine.Story.FEvent.EditorUpdate">
            <summary>
            供编辑器调用，强制更新当前画面
            </summary>
        </member>
        <member name="E:MUEngine.Story.FEvent.PropertyChanged">
            <summary>
            属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEvent.RaisePropertyChanged(System.String)">
            <summary>
            发起属性变更事件
            </summary>
            <param name="propName">产生变更的属性名称</param>
        </member>
        <member name="M:MUEngine.Story.FEvent.OnPropertyChanged(System.String)">
            <summary>
            响应属性变更，可由子类覆写
            </summary>
            <param name="propName">产生变更的属性名称</param>
        </member>
        <member name="M:MUEngine.Story.FEvent.ToJsonObject">
            <summary>
            生成供序列化使用的JSON数据对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEvent.OnGetJsonEventType">
            <summary>
            获取对应的JsonEvent的类型
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEvent.OnSetValueToJsonEvnet(MUEngine.Story.JsonEvent)">
            <summary>
            序列化时为目标JSON数据对象赋值
            </summary>
            <param name="target">需要赋值的目标JSON数据对象</param>
        </member>
        <member name="M:MUEngine.Story.FEvent.FromJsonObject(MUEngine.Story.JsonEvent,MUEngine.Story.FTrack)">
            <summary>
            根据JSON数据对象来生成对应的FEvent
            </summary>
            <param name="jEvent">JSON数据对象</param>
            <param name="ownerTrack">持有者FTrack</param>
        </member>
        <member name="M:MUEngine.Story.FEvent.OnGetValueFromJsonEvent(MUEngine.Story.JsonEvent)">
            <summary>
            反序列化时从JSON数据对象中获取值
            </summary>
            <param name="source">带有数据的JSON数据对象</param>
        </member>
        <member name="T:MUEngine.Story.FEventAttribute">
            <summary>
            用于标识可以创建的事件的特性标签
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEventAttribute.TrackType">
            <summary>
            对应的FTrack类型
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEventAttribute.OwnerType">
            <summary>
            对应的持有者(剧情组件)类型
            如果该值为空，则不能通过菜单创建对应的FEvent
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEventAttribute.MenuPath">
            <summary>
            菜单路径
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEventAttribute.MenuOrder">
            <summary>
            在菜单中的显示顺序
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEventAttribute.IsSeperator">
            <summary>
            是否为分割线
            </summary>
        </member>
        <member name="P:MUEngine.Story.FEventAttribute.UsingMode">
            <summary>
            标记该事件在哪种模式下被使用
            判定时检测该值是否含有EStoryEditorMode的对应位。
            如果为0则在任何模式中均可使用。
            </summary>
        </member>
        <member name="M:MUEngine.Story.FEventAttribute.#ctor(System.Type,System.String,System.Int32,MUEngine.Story.EStoryEditorMode)">
            <summary>
            构造函数
            </summary>
            <param name="ownerType">持有者（剧情组件）类型</param>
            <param name="menuPath">菜单路径</param>
            <param name="menuOrder">在菜单中的显示顺序</param>
            <param name="usingMode">菜单在哪种模式下可用</param>
        </member>
        <member name="M:MUEngine.Story.FEventAttribute.#ctor(System.Type,System.Type,System.String,System.Int32,MUEngine.Story.EStoryEditorMode)">
            <summary>
            构造函数
            </summary>
            <param name="ownerType">持有者（剧情组件）类型</param>
            <param name="trackType">对应的轨道类型</param>
            <param name="menuPath">菜单路径</param>
            <param name="menuOrder">在菜单中的显示顺序</param>
            <param name="usingMode">菜单在哪种模式下可用</param>
        </member>
        <member name="M:MUEngine.Story.FEventAttribute.#ctor(System.Type,System.Int32,MUEngine.Story.EStoryEditorMode)">
            <summary>
            用于在菜单中创建分割线的构造函数
            </summary>
            <param name="ownerType">持有事件的剧情组件类型</param>
            <param name="menuOrder">菜单顺序</param>
            <param name="usingMode">菜单在哪种模式下可用</param>
        </member>
        <member name="T:MUEngine.Story.FObject">
            CTimeline, CTrack, CEvent
        </member>
        <member name="F:MUEngine.Story.FObject._id">
            @brief id usually reference to the index of this element
            relative to it's parent, e.g. index of the timeline in the sequence,
            index of the track in the timeline, or of the event in the track.
        </member>
        <member name="M:MUEngine.Story.FObject.GetId">
            @brief _id inspector
        </member>
        <member name="M:MUEngine.Story.FObject.SetId(System.Int32)">
            @brief Sets _id. It is used when the element is moved in a list to update it's position.
        </member>
        <member name="P:MUEngine.Story.FObject.Sequence">
            @brief Sequence this flux object belongs to
        </member>
        <member name="P:MUEngine.Story.FObject.Owner">
            @brief To whom does this object belong to?
        </member>
        <member name="M:MUEngine.Story.FObject.Stop">
            @brief Called when you stop the sequence. 
            @note It is called when the sequence is stopped, i.e. resetted.
        </member>
        <member name="T:MUEngine.Story.FrameRangeOverlap">
            @brief Types of range overlap
        </member>
        <member name="F:MUEngine.Story.FrameRangeOverlap.MissOnLeft">
            <summary>
            @brief missed and is to the left of the range passed
            </summary>
        </member>
        <member name="F:MUEngine.Story.FrameRangeOverlap.MissOnRight">
            <summary>
            @brief missed and is to the right of the range passed
            </summary>
        </member>
        <member name="F:MUEngine.Story.FrameRangeOverlap.IsContained">
            <summary>
            @brief overlaps and is contained by the range passed
            </summary>
        </member>
        <member name="F:MUEngine.Story.FrameRangeOverlap.ContainsFull">
            <summary>
            @brief overlaps and contains the range passed       
            </summary>
        </member>
        <member name="F:MUEngine.Story.FrameRangeOverlap.ContainsStart">
            <summary>
            @brief overlaps and contains the start of the range passed
            </summary>
        </member>
        <member name="F:MUEngine.Story.FrameRangeOverlap.ContainsEnd">
            <summary>
            @brief overlaps and contains the end of the range passed
            </summary>
        </member>
        <member name="T:MUEngine.Story.FrameRange">
            <summary>
            @brief Range of frames.
            @note Start is _not_ guaranteed to be smaller or equal to End, it is up to the user to make sure.
            </summary>
        </member>
        <member name="P:MUEngine.Story.FrameRange.Start">
            @brief Returns the start frame.
        </member>
        <member name="P:MUEngine.Story.FrameRange.End">
            @brief Returns the end frame.
        </member>
        <member name="P:MUEngine.Story.FrameRange.Length">
            @brief Sets / Gets the length.
            @note It doesn't cache the value.
        </member>
        <member name="M:MUEngine.Story.FrameRange.#ctor(System.Int32,System.Int32)">
            @brief Create a frame range
            @param start Start frame
            @param end End frame
            @note It is up to you to make sure start is smaller than end.
        </member>
        <member name="M:MUEngine.Story.FrameRange.Cull(System.Int32)">
            @brief Returns \e i clamped to the range.
        </member>
        <member name="M:MUEngine.Story.FrameRange.Contains(System.Int32)">
            @brief Returns if \e i is inside [start, end], i.e. including borders
        </member>
        <member name="M:MUEngine.Story.FrameRange.ContainsExclusive(System.Int32)">
            @brief Returns if \e i is inside （start, end）, i.e. excluding borders
        </member>
        <member name="M:MUEngine.Story.FrameRange.Collides(MUEngine.Story.FrameRange)">
            @brief Returns if the ranges intersect, i.e. touching returns false
            @note Assumes They are both valid
        </member>
        <member name="M:MUEngine.Story.FrameRange.Overlaps(MUEngine.Story.FrameRange)">
            @brief Returns if the ranges overlap, i.e. touching return true
            @note Assumes They are both valid
        </member>
        <member name="M:MUEngine.Story.FrameRange.GetOverlap(MUEngine.Story.FrameRange)">
            @brief Returns what kind of overlap it has with \e range.
            重叠类型
            @note Assumes They are both valid
        </member>
        <member name="T:MUEngine.Story.FSelection">
            <summary>
            专门针对Flux的Selection类
            </summary>
        </member>
        <member name="F:MUEngine.Story.FSelection.SelectionChanged">
            <summary>
            选中项变更事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSelection.ActiveEvent">
            <summary>
            当前选中的FEvent，选中了多个FEvent的情况返回第1个
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSelection.ActiveEvents">
            <summary>
            当前选中的所有FEvent
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSelection.ActiveTrack">
            <summary>
            当前选中的FTrack，选中了多个FTrack的情况返回第1个
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSelection.ActiveTracks">
            <summary>
            当前选中的所有FTrack
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSelection.ActiveTimeline">
            <summary>
            当前选中的FTimeline，选中了多个FTimeline的情况返回第1个
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSelection.ActiveTimelines">
            <summary>
            当前选中的所有FTimeline
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSelection.ActiveSequence">
            <summary>
            当前选中的FSequence
            仅用于判断是否显示剧情配置
            </summary>
        </member>
        <member name="M:MUEngine.Story.FSelection.Select(MUEngine.Story.FObject)">
            <summary>
            选中一个对象
            </summary>
            <param name="obj">被选中的对象</param>
        </member>
        <member name="M:MUEngine.Story.FSelection.Deselect(MUEngine.Story.FObject)">
            <summary>
            取消一个对象的选中
            </summary>
            <param name="obj">被取消选中的对象</param>
        </member>
        <member name="M:MUEngine.Story.FSelection.IsEventSelected(MUEngine.Story.FEvent)">
            <summary>
            检测某事件是否被选中
            </summary>
            <param name="evnt">需要检测的事件</param>
            <returns>事件是否被选中</returns>
        </member>
        <member name="P:MUEngine.Story.FSequence.Content">
            @brief Child Transform (hidden by default) that holds the containers.
        </member>
        <member name="P:MUEngine.Story.FSequence.Containers">
            @brief Containers inside the sequence.
        </member>
        <member name="F:MUEngine.Story.FSequence._playOnStart">
            @brief Should the sequence start playing on the Start() function?
        </member>
        <member name="P:MUEngine.Story.FSequence.DefaultSpeed">
            @brief Speed that is used when sequence is loaded. When you want to change runtime see, use Speed instead
        </member>
        <member name="P:MUEngine.Story.FSequence.Speed">
            @brief Current speed, used to control the speed of the sequence. If negative, sequence will play backwards.
        </member>
        <member name="F:MUEngine.Story.FSequence._updateMode">
            @brief Should it update on FixedUpdate? If false, it will update on Update.
        </member>
        <member name="F:MUEngine.Story.FSequence._isAutoKey">
            <summary>
            自动记录关键帧。该字段用于编辑器
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSequence.OnFinishedCallback">
            @brief Callback when sequence reaches last frame (or frame 0 when moving backwards)
        </member>
        <member name="P:MUEngine.Story.FSequence.FrameRate">
            @brief Frame Rate of this sequence.
            @sa CSequenceInspector.Rescale(CSequence, int)
            @sa InverseFrameRate
        </member>
        <member name="P:MUEngine.Story.FSequence.InverseFrameRate">
            @brief Returns 1 / FrameRate. This value is cached and set automatically when FrameRate is called.
            @sa FrameRate
        </member>
        <member name="P:MUEngine.Story.FSequence.IsInit">
            @brief Is the sequence initialized?
        </member>
        <member name="P:MUEngine.Story.FSequence.IsPlaying">
            @brief Is the sequence playing?
        </member>
        <member name="P:MUEngine.Story.FSequence.IsPlayingForward">
            @brief Is the sequence moving forward?
        </member>
        <member name="P:MUEngine.Story.FSequence.OwnerStory">
            <summary>
            父级剧情
            </summary>
        </member>
        <member name="M:MUEngine.Story.FSequence.SetStory(MUEngine.Story.MUStory)">
            <summary>
            设置父级剧情
            </summary>
            <param name="story">父级剧情</param>
        </member>
        <member name="M:MUEngine.Story.FSequence.SetCurrentTimeEditor(System.Single)">
            @brief Sets the current time, to be used when in editor mode, _not_ for runtime.
            @param time Time.
            @sa SetCurrentTime
        </member>
        <member name="M:MUEngine.Story.FSequence.SetCurrentTime(System.Single)">
            @brief Sets the current time manually, e.g. if you want to jump to a specific point of the 
            sequence.
            @param time Time.
            @sa SetCurrentFrame, SetCurrentTimeEditor
        </member>
        <member name="M:MUEngine.Story.FSequence.StopFollowEvents(System.Single)">
            <summary>
            将所有[在指定时间点之后结束]的事件停止
            </summary>
            <param name="time">指定时间</param>
        </member>
        <member name="M:MUEngine.Story.FSequence.SetCurrentFrameWithoutStop(System.Int32)">
            <summary>
            在不停止任何事件的情况下设置当前时间
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:MUEngine.Story.FSequence.SetCurrentFrame(System.Int32)">
            用于滑动时间轴时设置当前帧画面
            
        </member>
        <member name="M:MUEngine.Story.FSequence.SetCurrentTimeInternal(System.Single)">
            @brief Sets the current frame based on the time passed.
            @param time Time in seconds, this will set current frame with time x FrameRate.
        </member>
        <member name="M:MUEngine.Story.FSequence.UpdateSortedTracks">
            <summary>
            更新进行排序后的轨道
            </summary>
        </member>
        <member name="F:MUEngine.Story.FSequence.orderedTracks">
            <summary>
            排序后的所有可用轨道
            </summary>
        </member>
        <member name="M:MUEngine.Story.FSequence.RaiseTrackOrderChanged">
            <summary>
            发起轨道顺序变更
            </summary>
        </member>
        <member name="P:MUEngine.Story.FSequence.CurrentFrame">
            @brief Returns the current frame.
            @sa SetCurrentFrame, GetCurrentFrame
        </member>
        <member name="P:MUEngine.Story.FSequence.CurrentTime">
            @brief Returns current time. 
        </member>
        <member name="M:MUEngine.Story.FSequence.Init">
            @brief Initializes the sequence.
            This is called at the start of the sequence, it is meant for the
            user to setup all the cached variables.
            @note If you want to avoid frame drops, call this function before
            calling Play.
        </member>
        <member name="M:MUEngine.Story.FSequence.Play(System.Int32)">
            @override Starts playing on a specific frame.
        </member>
        <member name="M:MUEngine.Story.FSequence.Play(System.Single)">
            @brief Starts playing at time.
            @param startTime What time to start playing from.
            @sa Init
        </member>
        <member name="M:MUEngine.Story.FSequence.Play">
            @brief Starts playing from either the start or the end, depending on which 
            direction it is playing.
            @sa Init, Stop, Pause
        </member>
        <member name="M:MUEngine.Story.FSequence.Stop">
            @brief Stops sequence.
        </member>
        <member name="M:MUEngine.Story.FSequence.Stop(System.Boolean)">
            @brief Stops sequence.
            @param reset If true, it clears Init, i.e. it will force the Init phase to happen again.
        </member>
        <member name="M:MUEngine.Story.FSequence.Pause">
            @brief Pauses sequence.
            @sa FEvent.OnPause, FEvent.OnResume
        </member>
        <member name="M:MUEngine.Story.FSequence.Resume">
            @brief Resumes a sequence that is paused.
            Doesn't work if the sequence is stopped.
            @sa Play, Stop, Pause
        </member>
        <member name="P:MUEngine.Story.FSequence.IsPaused">
            @brief Is the sequence paused?暂停
        </member>
        <member name="P:MUEngine.Story.FSequence.IsStopped">
            @brief Is the sequence stopped?停止
        </member>
        <member name="P:MUEngine.Story.FSequence.IsFinished">
            @brief Is the sequence finished? Does not finish when it loops.
        </member>
        <member name="M:MUEngine.Story.FSequence.IsEmpty">
            @brief Does the sequence have no events?
        </member>
        <member name="M:MUEngine.Story.FSequence.HasTimelines">
            @brief Determines wether it has any timelines.
        </member>
        <member name="M:MUEngine.Story.FSequence.Rebuild">
            @brief Rebuilds the sequence. This is to be called whenever timelines,
            tracks, or events are added / removed from the sequence.
            @note You should only call this in editor mode, avoid calling it at runtime.
        </member>
        <member name="M:MUEngine.Story.FSequence.CheckHasOverstepEvent">
            <summary>
            检测动画序列中是否有超出结束时间范围的事件
            </summary>
            <returns>是否有超出</returns>
        </member>
        <member name="M:MUEngine.Story.FSequence.AlignToTimeEnd">
            <summary>
            时间结尾对齐
            具体操作为：把所有跨越了结尾的事件截断，删除所有在结尾之后才开始的事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FSequence.EditorSetCurrentFrame(System.Int32)">
            <summary>
            默认FPS改为300后，会出现因为每帧时长过短导致无法单帧播放剧情的问题
            为编辑器添加该接口以便可以强制设置当前帧
            </summary>
            <param name="frame">当前帧</param>
        </member>
        <member name="M:MUEngine.Story.FSequence.ToJsonObject">
            <summary>
            生成供序列化使用的JSON数据对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FSequence.FromJsonObject(MUEngine.Story.JsonSequence,MUEngine.Story.MUStory)">
            <summary>
            根据JSON数据对象来生成对应的FSequence
            </summary>
            <param name="jSequence">JSON数据对象</param>
            <param name="ownerStory">持有序列的剧情</param>
            <returns>生成出来的FSequence</returns>
        </member>
        <member name="M:MUEngine.Story.FSequencePlayer.InitAll">
            @brief Init all sequences, to avoid bumps at play time
        </member>
        <member name="M:MUEngine.Story.FSequencePlayer.Play">
            @override Starts playing from first sequence.
        </member>
        <member name="M:MUEngine.Story.FSequencePlayer.Play(System.Int32)">
            @brief Start playing from a specific sequence index.
            @param sequenceIndex Index of the list
        </member>
        <member name="M:MUEngine.Story.FSequencePlayer.Stop(System.Boolean)">
            @brief Stop playing
            @param reset Reset all the sequences?
        </member>
        <member name="P:MUEngine.Story.FSequencePlayer.IsPlaying">
            @brief Only checks if we have any sequence already running
        </member>
        <member name="T:MUEngine.Story.FTimeline">
            @brief A timeline is an object that holds tracks that pertain to 
            a specific object, aka(也称为) Owner. When evaluated this timeline will 
            run events which most of the times will directly affect the Owner.
            @sa FSquence, FTrack, FEvent
        </member>
        <member name="P:MUEngine.Story.FTimeline.Container">
            <summary>
            To which Sequence this timeline belongs to
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTimeline.OwnerPath">
            <summary>
            What's the path to the _owner, used for serialization purposes in prefabs
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTimeline.Owner">
            <summary>
            Which object is the owner of this timeline
            </summary>
        </member>
        <member name="P:MUEngine.Story.FTimeline.StoryOwner">
            <summary>
            Timeline对应的剧情组件
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTimeline.SetOwner(UnityEngine.Transform)">
            @brief Sets the owner of this timeline
        </member>
        <member name="M:MUEngine.Story.FTimeline.SetOwner(MUEngine.Story.StoryComponent)">
            <summary>
            设置时间线的持有者
            </summary>
            <param name="storyComOwner">持有者剧情组件</param>
        </member>
        <member name="P:MUEngine.Story.FTimeline.Tracks">
            @brief Get the tracks inside this timeline
        </member>
        <member name="M:MUEngine.Story.FTimeline.Create(UnityEngine.Transform)">
            @brief Create a new timeline
            @param owner Owner of this timeline
        </member>
        <member name="M:MUEngine.Story.FTimeline.Create(MUEngine.Story.StoryComponent)">
            <summary>
            创建一个新的时间线
            </summary>
            <param name="storyComOwner">持有者剧情组件</param>
            <returns>新创建的时间线</returns>
        </member>
        <member name="M:MUEngine.Story.FTimeline.Init">
            @brief Initializes the timeline.
            @sa FSequence.Init
        </member>
        <member name="M:MUEngine.Story.FTimeline.Pause">
            @brief Pauses the timeline.
            @sa FSequence.Pause
        </member>
        <member name="M:MUEngine.Story.FTimeline.Resume">
            @brief Resumes the timeline after it has been paused.
            @sa FSequence.Play, FSequence.Pause
        </member>
        <member name="M:MUEngine.Story.FTimeline.Stop">
            @brief Stops the timeline, i.e. brings it back to the start.
            @sa FSequence.Stop
        </member>
        <member name="M:MUEngine.Story.FTimeline.IsEmpty">
            @brief Returns if the timeline doesn't have any events.
        </member>
        <member name="M:MUEngine.Story.FTimeline.Add``1(MUEngine.Story.FrameRange)">
            @brief Adds a new track to the timeline
            @param range A track by default is added with 1 event
            @T Event type that the track will hold
            @sa RemoveTrack
        </member>
        <member name="M:MUEngine.Story.FTimeline.Remove(MUEngine.Story.FTrack)">
            @brief Removes a track
            @param track Track to remove
            @sa AddTrack
        </member>
        <member name="M:MUEngine.Story.FTimeline.UpdateTracks(System.Int32,System.Single)">
            @brief Updates the tracks of this timeline
            @param frame Current frame of the sequence
            @param time Current time of the sequence
        </member>
        <member name="M:MUEngine.Story.FTimeline.Rebuild">
            @brief Rebuilds a timeline. To be called when the hierarchy changes,
            ie tracks get added / deleted.
        </member>
        <member name="M:MUEngine.Story.FTimeline.ToJsonObject">
            <summary>
            生成供序列化使用的JSON数据对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTimeline.FromJsonObject(MUEngine.Story.JsonTimeline,MUEngine.Story.FContainer)">
            <summary>
            根据JSON数据对象来生成对应的FTimeline
            </summary>
            <param name="jTimeline">JSON数据对象</param>
            <param name="ownerContainer">持有FTimeline的Container</param>
        </member>
        <member name="T:MUEngine.Story.FTrack">
            @brief FTrack holds events of a specific type. You cannot have a track with multiple types of events.
            You can only have 2 events on the same frame per track, i.e. overlapping start and end.
            @sa FSequence, FTimeline, FEvent
        </member>
        <member name="P:MUEngine.Story.FTrack.Events">
            @brief List of events it holds
        </member>
        <member name="P:MUEngine.Story.FTrack.UpdatePriority">
            <summary>
            每帧更新时的执行优先级
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTrack.Create``1">
            @brief Creates a FTrack.
            @param T type of event this track will hold
        </member>
        <member name="M:MUEngine.Story.FTrack.Pause">
            @brief Pauses the timeline
        </member>
        <member name="M:MUEngine.Story.FTrack.Resume">
            @brief Resumes the timeline
        </member>
        <member name="M:MUEngine.Story.FTrack.ResetCurrentEvent">
            <summary>
            重置当前事件索引
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTrack.IsEmpty">
            @brief Returns true if the track has no events
        </member>
        <member name="P:MUEngine.Story.FTrack.Timeline">
            @brief Returns to which timeline this track belongs
        </member>
        <member name="M:MUEngine.Story.FTrack.GetEventType">
            @brief Returns which type of event this track holds
        </member>
        <member name="M:MUEngine.Story.FTrack.SetEventType(System.Type)">
            @brief Sets the type of event this track holds
            @param evtType Has to inherit from FEvent
        </member>
        <member name="M:MUEngine.Story.FTrack.GetEvent(System.Int32)">
            @brief Returns event on position \e index, they are ordered left to right.
        </member>
        <member name="M:MUEngine.Story.FTrack.GetEventsAt(System.Int32,MUEngine.Story.FEvent[]@)">
            @brief Returns events at a specific frame.
        </member>
        <member name="M:MUEngine.Story.FTrack.GetEventsAt(System.Int32,MUEngine.Story.FEvent@,MUEngine.Story.FEvent@)">
            @brief Returns events at a given frame
            @param [in] t Frame
            @param [out] first First event, if there's 2 events it will be the one ending on that frame
            @param [out] second Second event, if there's 2 events it will be the one starting on that frame
            @return How many events are at frame \e t
        </member>
        <member name="P:MUEngine.Story.FTrack.PreviewDirtiesScene">
            @brief Does scrubbing / building preview dirty the scene? 
        </member>
        <member name="P:MUEngine.Story.FTrack.CanTogglePreview">
            @brief Can the preview of the scene be toggled off? 
        </member>
        <member name="M:MUEngine.Story.FTrack.EditorChangeEventLengthTime(MUEngine.Story.FEvent,System.Single)">
            <summary>
            由编辑器调用
            变更事件的长度（以时间为单位）
            </summary>
            <param name="evt">需要变更长度的事件</param>
            <param name="newLengthTime">新的长度（单位：时间）</param>
        </member>
        <member name="M:MUEngine.Story.FTrack.EditorChangedEventLength(MUEngine.Story.FEvent,System.Int32)">
            <summary>
            由编辑器调用
            变更事件的长度（以帧为单位）
            </summary>
            <param name="evt">需要变更长度的事件</param>
            <param name="newLength">新的长度（单位：帧）</param>
        </member>
        <member name="M:MUEngine.Story.FTrack.ToJsonObject">
            <summary>
            生成供序列化使用的JSON数据对象
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTrack.OnGetJsonTrackType">
            <summary>
            获取对应的JsonTrack的类型
            </summary>
        </member>
        <member name="M:MUEngine.Story.FTrack.OnSetValueToJsonTrack(MUEngine.Story.JsonTrack)">
            <summary>
            序列化时为目标JSON数据对象赋值
            </summary>
            <param name="target">需要赋值的目标JSON数据对象</param>
        </member>
        <member name="M:MUEngine.Story.FTrack.FromJsonObject(MUEngine.Story.JsonTrack,MUEngine.Story.FTimeline)">
            <summary>
            根据JSON数据对象来生成对应的FTrack
            </summary>
            <param name="jTrack">JSON数据对象</param>
            <param name="ownerTimeline">持有者FTimeline</param>
        </member>
        <member name="M:MUEngine.Story.FTrack.OnGetValueFromJsonTrack(MUEngine.Story.JsonTrack)">
            <summary>
            反序列化时从JSON数据对象中获取值
            </summary>
            <param name="source">带有数据的JSON数据对象</param>
        </member>
        <member name="T:MUEngine.Story.FUtility">
            @brief Runtime Utility class for Flux
        </member>
        <member name="T:MUEngine.Story.FTrackCache">
            @brief Base for FTrack caching.
        </member>
        <member name="P:MUEngine.Story.FTrackCache.Track">
            @brief Track it's caching
        </member>
        <member name="P:MUEngine.Story.FTrackCache.IsBuilt">
            @brief Is the cache already built?
        </member>
        <member name="M:MUEngine.Story.FTrackCache.Build(System.Boolean)">
            @brief Build cache
            @param rebuild Rebuild it if it already exists
        </member>
        <member name="M:MUEngine.Story.FTrackCache.Build">
            @override 
        </member>
        <member name="M:MUEngine.Story.FTrackCache.BuildInternal">
            @brief Handles the actual building of the cache
        </member>
        <member name="M:MUEngine.Story.FTrackCache.Clear">
            @brief Clears the cache
        </member>
        <member name="M:MUEngine.Story.FTrackCache.ClearInternal">
            @brief Handles the actual clearing of the cache
        </member>
        <member name="M:MUEngine.Story.FTrackCache.GetPlaybackAt(System.Single)">
            @brief Used to playback the cached data
            @param sequenceTime Sequence time we're playing
        </member>
        <member name="T:MUEngine.Story.FKeyFrameTrack">
            <summary>
            关键帧事件所使用的轨道
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrack.OnInitProperty">
            <summary>
            初始化关注属性的记录
            如果想使用[自动关键帧]功能，则需要子类覆写该方法
            </summary>
        </member>
        <member name="M:MUEngine.Story.FKeyFrameTrack.OnCheckPropertyChange">
            <summary>
            检测关注的属性是否产生了变化
            如果想使用[自动关键帧]功能，则需要子类覆写该方法
            </summary>
            <returns>关注的属性是否产生了变化</returns>
        </member>
        <member name="T:MUEngine.Story.IRotationMoveable">
            <summary>
            支持旋转调整操作接口（仅在编辑器模式下使用）
            </summary>
        </member>
        <member name="M:MUEngine.Story.IRotationMoveable.ExecuteRotate(UnityEngine.Vector3,System.Single)">
            <summary>
            进行一次旋转
            </summary>
            <param name="basePosition">基准点位置</param>
            <param name="yAngle">绕Y轴旋转的角度</param>
        </member>
        <member name="T:MUEngine.Story.IStoryClientProxy">
            <summary>
            剧情模块在实际项目中的代理接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryClientProxy.StoryFileExtension">
            <summary>
            剧情文件扩展名
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryClientProxy.IsHighQuality">
            <summary>
            当前游戏是否为高配
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryClientProxy.MaskUILayer">
            <summary>
            过渡转场时遮罩UI的层级
            </summary>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.GetUICamera">
            <summary>
            获取UI摄像机
            </summary>
            <returns>UI摄像机</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.GetHero">
            <summary>
            获取主角
            </summary>
            <returns>主角的ActorEntity</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.GetDefaultFontName">
            <summary>
            获取默认字体名称
            </summary>
            <returns>默认字体的名称</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.CreateDefaultConfig">
            <summary>
            创建默认剧情配置
            </summary>
            <returns>默认剧情配置</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.GetStoryConfig(System.String)">
            <summary>
            通过剧情名称获取对应的剧情配置
            </summary>
            <param name="storyName">剧情名称</param>
            <returns>对应的剧情配置</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.RegisterUpdateAction(System.Action)">
            <summary>
            注册每帧更新Action
            </summary>
            <param name="updateAction">每帧更新Action</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.AddNextFrameExecuteAction(System.Action)">
            <summary>
            添加在下一帧执行的Action
            </summary>
            <param name="nfAction">在下一帧执行的Action</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.UnserializeJson``1(System.String)">
            <summary>
            将文本反序列化为对象实例
            （有些类是在游戏项目中定义的。为了能正常反序列化，必须把反序列化的调用也放到相同的程序集中）
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="jsonString">JSON文本</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.GetTypeByName(System.String)">
            <summary>
            通过名称获取类型
            （因为有些类是在游戏项目中定义的。为了正常获取到这些类的类型，必须把相关调用也放到相同的程序集中）
            </summary>
            <param name="typeName">类型名称</param>
            <returns>实际类型</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.GetPreloadResourceList">
            <summary>
            获取通用预加载资源列表
            </summary>
            <returns>预加载资源列表</returns>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.LoadStarted(System.Int32)">
            <summary>
            执行开始加载剧情的操作
            </summary>
            <param name="storyID">剧情ID</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.FadeInStarted(MUEngine.Story.MUStory)">
            <summary>
            执行开始淡入渐变切换到剧情
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.PrePlayStarted(MUEngine.Story.MUStory)">
            <summary>
            执行剧情开始播放前的预先操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.PlayStarted(MUEngine.Story.MUStory)">
            <summary>
            执行剧情开始播放的相关操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.PrePlayFinished(MUEngine.Story.MUStory)">
            <summary>
            执行剧情播放完毕前的预先操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.PlayFinished(MUEngine.Story.StoryConfig)">
            <summary>
            执行剧情播放完毕的相关操作
            </summary>
            <param name="config">剧情配置</param>
        </member>
        <member name="M:MUEngine.Story.IStoryClientProxy.GetSkillPreviewBgAssetName">
            <summary>
            获取技能预览时背景包围框的资源名
            </summary>
            <returns>背景资源名</returns>
        </member>
        <member name="T:MUEngine.Story.IStoryEditorProxy">
            <summary>
            剧情编辑器在Editor项目中的代理接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryEditorProxy.CurrentMode">
            <summary>
            当前编辑器模式
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryEditorProxy.IsEdittingStory">
            <summary>
            是否正在编辑剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryEditorProxy.ResourceDir">
            <summary>
            资源目录
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryEditorProxy.DatabaseDir">
            <summary>
            数据库目录
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryEditorProxy.StoryFileDir">
            <summary>
            剧情文件目录
            </summary>
        </member>
        <member name="M:MUEngine.Story.IStoryEditorProxy.InitializeStoryMainActor(MUEngine.Story.MUStory)">
            <summary>
            初始化剧情的主演员
            </summary>
            <param name="story">需要初始化的剧情</param>
        </member>
        <member name="T:MUEngine.Story.IStorySubManager">
            <summary>
            剧情模块的子模块管理器接口
            </summary>
        </member>
        <member name="M:MUEngine.Story.IStorySubManager.PrePlayStory(MUEngine.Story.MUStory)">
            <summary>
            播放剧情前的预处理操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.IStorySubManager.AfterPlayStory(MUEngine.Story.MUStory)">
            <summary>
            剧情播放完毕的后续操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="T:MUEngine.Story.ITranslationMoveable">
            <summary>
            支持平移调整操作接口（仅在编辑器模式下使用）
            </summary>
        </member>
        <member name="M:MUEngine.Story.ITranslationMoveable.ExecuteTranslate(UnityEngine.Vector3)">
            <summary>
            进行一次平移
            </summary>
            <param name="offset">位置偏移量</param>
        </member>
        <member name="T:MUEngine.Story.StoryEditorProxyAttribute">
            <summary>
            标记剧情编辑器在Editor项目中的代理的特性标签
            </summary>
        </member>
        <member name="T:MUEngine.Story.EStoryMode">
            <summary>
            剧情模式类型
            </summary>
        </member>
        <member name="T:MUEngine.Story.MUStory">
            <summary>
            剧情类
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.ID">
            <summary>
            ID号
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.Config">
            <summary>
            剧情配置
            </summary>
        </member>
        <member name="F:MUEngine.Story.MUStory.DefaultName">
            <summary>
            默认剧情名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.IsPlaying">
            <summary>
            是否正在播放
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.HasPrePlayExecuted">
            <summary>
            剧情播放前的预处理操作是否已经执行
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.PlayingSequence">
            <summary>
            正在播放的动画序列
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.Mode">
            <summary>
            模式（编辑模式 / 实际游戏模式）
            </summary>
        </member>
        <member name="E:MUEngine.Story.MUStory.Finished">
            <summary>
            播放完毕事件
            </summary>
        </member>
        <member name="E:MUEngine.Story.MUStory.ResourceLoaded">
            <summary>
            资源加载完毕
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.LocalFilePath">
            <summary>
            对应的本地文件路径
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.Sequence">
            <summary>
            对应的动画序列
            </summary>
        </member>
        <member name="P:MUEngine.Story.MUStory.AllComponents">
            <summary>
            剧情中的所有组件
            </summary>
        </member>
        <member name="F:MUEngine.Story.MUStory.dynamicParamsDict">
            <summary>
            用于存放运行时动态参数字典
            Key:参数的名称; Value:参数的值
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.CreateStory(System.String)">
            <summary>
            创建新的剧情
            </summary>
            <param name="name">剧情名称</param>
            <returns>新创建的剧情</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.AddStoryComponent(MUEngine.Story.StoryComponent)">
            <summary>
            添加剧情组件
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.GetStoryComponent(System.Int32)">
            <summary>
            获取剧情组件
            </summary>
            <param name="componentID">组件ID</param>
            <returns>剧情组件</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.GetStoryComponentByTag(System.String)">
            <summary>
            通过标签获取剧情组件
            </summary>
            <param name="tag">标签</param>
            <returns>剧情组件</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.RemoveStoryComponent(MUEngine.Story.StoryComponent)">
            <summary>
            移除剧情组件
            </summary>
            <param name="component">需要移除的剧情组件</param>
        </member>
        <member name="M:MUEngine.Story.MUStory.GetEventByTag(System.String)">
            <summary>
            通过标签获取剧情事件
            </summary>
            <param name="tag">标签</param>
            <returns>剧情事件</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.Play">
            <summary>
            开始播放
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.Skip">
            <summary>
            跳过剧情
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.Abort">
            <summary>
            中止剧情
            具体实现与跳过相同，但仅用于异常情况。
            被中止的剧情将不会发送完成相关的事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.EditorPrePlay">
            <summary>
            编辑器方法－执行播放前的预先处理
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.EditorAfterPlay">
            <summary>
            编辑器方法－执行结束前的预先处理
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.MergeOtherStory(MUEngine.Story.MUStory)">
            <summary>
            合并其它剧情
            </summary>
            <param name="otherStory">其它剧情</param>
        </member>
        <member name="M:MUEngine.Story.MUStory.AppendOtherStory(MUEngine.Story.MUStory)">
            <summary>
            将其它剧情拼接到当前剧情的末尾
            </summary>
            <param name="otherStory">想要拼接的剧情</param>
        </member>
        <member name="M:MUEngine.Story.MUStory.CheckHasComponent(System.Type)">
            <summary>
            检测剧情中是否有某一类型的组件
            </summary>
            <param name="componentType">剧情组件类型</param>
            <returns>剧情中是否有指定类型的组件</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.CheckHasEvent(System.Type,System.Type)">
            <summary>
            检测剧情中是否有某一类型的事件
            </summary>
            <param name="eventType">事件类型</param>
            <param name="componentType">事件的持有者组件类型</param>
            <returns>剧情中是否有指定类型的组件</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.OnPrePlay">
            <summary>
            执行播放前的预处理操作
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.OnPlay">
            <summary>
            开始播放的实现，可由子类覆写
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.OnSequenceFinished(MUEngine.Story.FSequence)">
            <summary>
            响应动画序列结束事件
            </summary>
            <param name="sender">刚结束的动画序列</param>
        </member>
        <member name="M:MUEngine.Story.MUStory.OnPostPlay">
            <summary>
            执行播放结束后的后续操作
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.TryGetDynamicParam(System.String,System.String@)">
            <summary>
            尝试获取动态参数
            </summary>
            <param name="paramKey">参数的键</param>
            <param name="paramValue">参数的值</param>
            <returns>获取是否成功</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.InitializePlaybackParam">
            <summary>
            初始化播放参数
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.Serialize">
            <summary>
            序列化为JSON字符串
            </summary>
            <returns>序列化后的JSON字符串</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.Unserialize(System.String,MUEngine.Story.EStoryMode)">
            <summary>
            反序列化生成MUStory对象
            </summary>
            <param name="jsonString">JSON字符串</param>
            <param name="mode">剧情模式</param>
            <returns>生成的MUStory对象</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.Unserialize(MUEngine.Story.JsonStory,MUEngine.Story.EStoryMode)">
            <summary>
            使用JsonStory反序列化生成MUStory对象
            </summary>
            <param name="jStory">JsonStory对象</param>
            <param name="mode">剧情模式</param>
            <returns>生成的MUStory对象</returns>
        </member>
        <member name="M:MUEngine.Story.MUStory.InitializeUsingJsonStory(MUEngine.Story.MUStory,MUEngine.Story.JsonStory)">
            <summary>
            使用JsonStory对象初始化剧情
            </summary>
            <param name="story">需要初始化的剧情</param>
            <param name="jStory">JsonStory对象</param>
        </member>
        <member name="M:MUEngine.Story.MUStory.LoadResource">
            <summary>
            加载资源
            </summary>
        </member>
        <member name="M:MUEngine.Story.MUStory.CheckResourceLoading">
            <summary>
            检测资源加载进程，如果加载完毕则发送相关事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryConfig">
            <summary>
            剧情配置兼播放上下文
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.ID">
            <summary>
            剧情ID
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.Name">
            <summary>
            剧情名称（文件名）
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.PlaybackParams">
            <summary>
            播放参数。格式为： ID1#参数值1|ID2#参数值2|ID3#参数值3 ……
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.ForceShowAllLOD">
            <summary>
            是否强制显示所有LOD
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.NeedLoadTerrain">
            <summary>
            是否需要加载地块
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.IsSkipped">
            <summary>
            剧情是否被跳过了
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.IsAborted">
            <summary>
            剧情是否被中止了
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.TransitionInEffect">
            <summary>
            过渡进入剧情效果类型（1：黑屏，2：白屏）
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.TransitionInTime">
            <summary>
            过渡进入剧情时长（秒）
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.TransitionOutEffect">
            <summary>
            过渡离开剧情效果类型（1：黑屏，2：白屏，3：淡入淡出）
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.TransitionOutTime">
            <summary>
            过渡离开剧情时长（秒）
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.TransitionOutDelayTime">
            <summary>
            过渡离开剧情前的延迟（秒）
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.SetHeroPos">
            <summary>
            是否设置结束时主角的位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.HeroPos">
            <summary>
            结束时主角的位置
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryConfig.HeroDir">
            <summary>
            结束时主角的朝向(-1为不设置)
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryConfig.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryConfig.GetCameraFinalState(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            获取摄像机最终的位置和朝向
            </summary>
            <param name="finalPosition">最终位置</param>
            <param name="finalRotation">最终朝向</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:MUEngine.Story.StoryConfig.SetCameraControlToFinalState">
            <summary>
            将摄像机控制器置为播放结束后的最终状态
            默认不作处理，即维持剧情开始前的控制器状态
            </summary>
        </member>
        <member name="T:MUEngine.Story.ActorEditorControl">
            <summary>
            剧情演员组件的编辑器控制器
            </summary>
        </member>
        <member name="M:MUEngine.Story.ActorEditorControl.SnapActorToGround">
            <summary>
            让演员保持贴合到地面
            </summary>
        </member>
        <member name="M:MUEngine.Story.ActorEditorControl.UpdateInitState">
            <summary>
            设置演员组件在剧情开始时的初始状态
            </summary>
        </member>
        <member name="T:MUEngine.Story.CameraEditorControl">
            <summary>
            剧情摄像机组件的编辑器控制器
            负责实时更新摄像机组件的初始状态属性
            </summary>
        </member>
        <member name="M:MUEngine.Story.CameraEditorControl.UpdateInitState">
            <summary>
            设置摄像机组件在剧情开始时的初始状态
            </summary>
        </member>
        <member name="T:MUEngine.Story.FPropertyChangedEventArgs">
            <summary>
            FEvent的属性变更事件参数
            </summary>
        </member>
        <member name="P:MUEngine.Story.FPropertyChangedEventArgs.PropertyName">
            <summary>
            产生变更的属性名称
            </summary>
        </member>
        <member name="M:MUEngine.Story.FPropertyChangedEventArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="propName">产生变更的属性名称</param>
        </member>
        <member name="T:MUEngine.Story.IStoryPropertyChanged">
            <summary>
            剧情模块中使用的属性变更接口
            </summary>
        </member>
        <member name="E:MUEngine.Story.IStoryPropertyChanged.PropertyChanged">
            <summary>
            属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.IStoryPropertyChanged.RaisePropertyChanged(System.String)">
            <summary>
            发起属性变更事件
            </summary>
            <param name="propertyName">产生变更的属性名称</param>
        </member>
        <member name="T:MUEngine.Story.NotifyChangeAttribute">
            <summary>
            通知变更特性
            使用该特性标记的属性会在产生变更时发出属性变更通知（具体时间为每次Update）
            </summary>
        </member>
        <member name="P:MUEngine.Story.NotifyChangeAttribute.UseCustomCompareor">
            <summary>
            是否使用自定义比较器
            </summary>
        </member>
        <member name="M:MUEngine.Story.NotifyChangeAttribute.CheckIsEqual(System.Object,System.Object)">
            <summary>
            检测两个属性值是否相等
            </summary>
            <param name="propA">属性A</param>
            <param name="propB">属性B</param>
            <returns></returns>
        </member>
        <member name="T:MUEngine.Story.NotifyChangeRotationAttribute">
            <summary>
            供Rotation属性使用的变更通知特性
            </summary>
        </member>
        <member name="T:MUEngine.Story.NotifyPropertyObserver">
            <summary>
            属性变更观察者脚本
            负责在属性（手动修改或撤销重做）产生变更时触发属性变更事件
            仅在编辑模式下使用
            </summary>
        </member>
        <member name="P:MUEngine.Story.NotifyPropertyObserver.IsValid">
            <summary>
            是否为有效的属性监视器
            </summary>
        </member>
        <member name="M:MUEngine.Story.NotifyPropertyObserver.Initialize(MUEngine.Story.IStoryPropertyChanged)">
            <summary>
            初始化
            </summary>
            <param name="target">观察对象</param>
        </member>
        <member name="M:MUEngine.Story.NotifyPropertyObserver.Clear">
            <summary>
            清空之前的观察目标
            </summary>
        </member>
        <member name="M:MUEngine.Story.NotifyPropertyObserver.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEngine.Story.NotifyPropertyObserver.TargetPropertyChangedHandler(System.Object,MUEngine.Story.FPropertyChangedEventArgs)">
            <summary>
            处理观察目标的属性变更事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.NotifyPropertyObserver.GetValue(System.ComponentModel.PropertyDescriptor)">
            <summary>
            获取属性值
            </summary>
            <param name="propDesc">属性描述</param>
            <returns>属性值</returns>
        </member>
        <member name="T:MUEngine.Story.StoryInputProxy">
            <summary>
            剧情模块的输入代理，仅供编辑器使用
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryInputProxy.registeredUpKeys">
            <summary>
            所有注册的关注“按键抬起事件”的按键
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryInputProxy.registeredDownKeys">
            <summary>
            所有注册的关注“按键按下事件”的按键
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryInputProxy.registeredPressedKeys">
            <summary>
            所有注册的关注“按键是否处于按下状态”的按键
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryInputProxy.keyPressState">
            <summary>
            所有注册的按键的当前状态。Key:按键，Value:按键是否被按下
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryInputProxy.KeyUp">
            <summary>
            按键抬起事件
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryInputProxy.KeyDown">
            <summary>
            按键按下事件
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryInputProxy.IsEnable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryInputProxy.RegisterPressedKey(UnityEngine.KeyCode)">
            <summary>
            注册想要关注是否按下的按键
            </summary>
            <param name="key">想要注册的按键</param>
        </member>
        <member name="M:MUEngine.Story.StoryInputProxy.RegisterKeyUp(UnityEngine.KeyCode)">
            <summary>
            注册按键抬起事件
            </summary>
            <param name="key">想要注册的按键</param>
        </member>
        <member name="M:MUEngine.Story.StoryInputProxy.RegisterKeyDown(UnityEngine.KeyCode)">
            <summary>
            注册按键按下事件
            </summary>
            <param name="key">想要注册的按键</param>
        </member>
        <member name="M:MUEngine.Story.StoryInputProxy.GetKey(UnityEngine.KeyCode)">
            <summary>
            查看某一按键是否按下
            </summary>
            <param name="key">需要查看的按键</param>
            <returns>查看的按键是否已经按下</returns>
        </member>
        <member name="T:MUEngine.Story.CachedJsonStory">
            <summary>
            JsonStory缓存对象
            主要用于记录缓存的生命周期
            </summary>
        </member>
        <member name="P:MUEngine.Story.CachedJsonStory.JStory">
            <summary>
            剧情对象
            </summary>
        </member>
        <member name="P:MUEngine.Story.CachedJsonStory.Lifespan">
            <summary>
            存在时间
            </summary>
        </member>
        <member name="M:MUEngine.Story.CachedJsonStory.#ctor(MUEngine.Story.JsonStory)">
            <summary>
            构造函数
            </summary>
            <param name="jStory">对应的JsonStory对象</param>
        </member>
        <member name="T:MUEngine.Story.JsonMoveTrace">
            <summary>
            对应MoveTrace的Json数据类，用于序列化
            </summary>
        </member>
        <member name="M:MUEngine.Story.JsonEvent.GetFEventType">
            <summary>
            获取对应的FEvent类型
            </summary>
            <returns>对应的FEvent类型</returns>
        </member>
        <member name="M:MUEngine.Story.JsonEvent.PreloadResource">
            <summary>
            预加载资源
            </summary>
        </member>
        <member name="M:MUEngine.Story.JsonEvent.GetI18nText">
            <summary>
            获取多语言文本
            </summary>
            <returns>多语言文本列表</returns>
        </member>
        <member name="M:MUEngine.Story.JsonEvent.ReplaceI18nText(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            替换多语言文本
            </summary>
            <param name="i18nTextDict">记录了多语言文本映射关系的字典</param>
            <returns>是否实际进行了修改</returns>
        </member>
        <member name="P:MUEngine.Story.JsonTimeline.OwnerID">
            <summary>
            持有FTimeline的StoryComponent对应的ID
            </summary>
        </member>
        <member name="M:MUEngine.Story.JsonTrack.OnGetTrackType">
            <summary>
            获取对应的FTrack的类型
            </summary>
        </member>
        <member name="T:MUEngine.Story.JsonObject">
            <summary>
            所有JSON序列化类的基类，便于统一处理
            </summary>
        </member>
        <member name="T:MUEngine.Story.JsonStory">
            <summary>
            与MUGame.Story类对应
            在序列化时使用的Story类
            </summary>
        </member>
        <member name="P:MUEngine.Story.JsonStory.AllStoryComponents">
            <summary>
            剧情中使用的所有剧情组件
            </summary>
        </member>
        <member name="P:MUEngine.Story.JsonStory.AllSequences">
            <summary>
            剧情中的所有剧情序列
            </summary>
        </member>
        <member name="M:MUEngine.Story.JsonStory.PreloadResource">
            <summary>
            预加载资源
            </summary>
        </member>
        <member name="M:MUEngine.Story.JsonStory.GetI18nText">
            <summary>
            获取剧情中的多语言文本
            </summary>
            <returns>多语言文本列表</returns>
        </member>
        <member name="M:MUEngine.Story.JsonStory.ReplaceI18nText(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            替换剧情中的多语言文本
            </summary>
            <param name="i18nTextDict">记录了多语言文本映射关系的字典</param>
            <returns>替换的过程中是否有实际修改</returns>
        </member>
        <member name="T:MUEngine.Story.SerializeService">
            <summary>
            序列化服务类
            </summary>
        </member>
        <member name="M:MUEngine.Story.SerializeService.Unserialize(System.String)">
            <summary>
            将文本反序列化生成JsonStory
            </summary>
            <param name="jsonString">Json字符串文本</param>
            <returns>生成的JsonStory</returns>
        </member>
        <member name="M:MUEngine.Story.SerializeService.GetVersion(System.String)">
            <summary>
            从Json字符串文本中获取剧情的版本号
            </summary>
            <param name="jsonString">Json字符串文本</param>
            <returns>剧情的版本号</returns>
        </member>
        <member name="M:MUEngine.Story.SerializeService.UpgradeJsonString(System.String,System.Version)">
            <summary>
            升级Json文本数据
            </summary>
            <param name="jsonString">需要升级的文本数据</param>
            <param name="jsonVer">文本数据的当前版本</param>
            <returns>升级之后的文本数据</returns>
        </member>
        <member name="M:MUEngine.Story.JsonStoryComponent.PreloadResource">
            <summary>
            预加载资源
            </summary>
        </member>
        <member name="T:MUEngine.Story.IStoryUpgrader">
            <summary>
            剧情升级器接口
            </summary>
        </member>
        <member name="P:MUEngine.Story.IStoryUpgrader.UpgraderVersion">
            <summary>
            升级器的版本
            执行完升级操作后会将剧情升级为该版本号的剧情文件
            </summary>
        </member>
        <member name="M:MUEngine.Story.IStoryUpgrader.Upgrade(System.String)">
            <summary>
            升级操作
            </summary>
            <param name="jsonString">需要升级的Json文本数据</param>
            <returns>升级完毕的文本数据</returns>
        </member>
        <member name="T:MUEngine.Story.SkillPreviewModule">
            <summary>
            技能预览模块
            功能上近似于轻量化的剧情模块
            </summary>
        </member>
        <member name="F:MUEngine.Story.SkillPreviewModule.DEFAULT_HORIZON_HEIGHT">
            <summary>
            默认水平面高度
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.Instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.SkillPreviewRoot">
            <summary>
            技能预览相关对象的根节点
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.IsPlaying">
            <summary>
            当前是否正在播放剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.PlayingStory">
            <summary>
            正在播放的剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.ActiveCamera">
            <summary>
            当前处于激活状态的摄像机组件
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.OriginPosition">
            <summary>
            技能预览的场景原点
            </summary>
        </member>
        <member name="F:MUEngine.Story.SkillPreviewModule.cameraQueue">
            <summary>
            摄像机队列，排在队首的会被激活
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.RenderCamera">
            <summary>
            渲染摄像机
            </summary>
        </member>
        <member name="F:MUEngine.Story.SkillPreviewModule.targetTexture">
            <summary>
            渲染目标贴图
            </summary>
        </member>
        <member name="F:MUEngine.Story.SkillPreviewModule.playpassSet">
            <summary>
            播放通行证，用于解决剧情加载到一半时执行跳过的问题。
            调用播放剧情的接口会往表内添加对应的资源名；调用停止播放的接口会清空哈希表。
            剧情在加载完毕准备播放前，会检测该哈希表。如果表内不包含自身的资源名称，则直接跳过。
            </summary>
        </member>
        <member name="F:MUEngine.Story.SkillPreviewModule.StartPlayCallBack">
            <summary>
            开始播放剧情时回调给lua层的接口
            </summary>
        </member>
        <member name="F:MUEngine.Story.SkillPreviewModule.backgroundBoxEntity">
            <summary>
            背景包围盒
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.BgReflectFloor">
            <summary>
            背景包围盒的反射面地板
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.BgEditorFloor">
            <summary>
            背景包围盒在编辑器模式下使用的阴影地板
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.BgMirrorScript">
            <summary>
            背景包围盒的镜面反射脚本
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillPreviewModule.BgScaleFloor">
            <summary>
            背景包围盒在编辑器模式下使用的刻度尺地板
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.Initialize(UnityEngine.UI.RawImage)">
            <summary>
            初始化（设置渲染贴图、创建背景包围盒）
            </summary>
            <param name="rawImg">目标RawImage</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.ShowBackgroundBox">
            <summary>
            显示背景包围盒
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.DisposeResource">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.AddStartPlayCallBack(System.Action)">
            <summary>
             添加开始播放剧情时回调lua的接口
            </summary>
            <param name="cb">lua层回调函数</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.StartPreview(System.String)">
            <summary>
            开始预览
            </summary>
            <param name="assetName">剧情文件的资源名称</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.StartPreviewWithParam(System.String,System.String)">
            <summary>
            以带有传入参数的方式开始预览
            </summary>
            <param name="assetName">剧情文件的资源名称</param>
            <param name="playbackParams">完整参数。参数的格式参照StoryConfig.PlaybackParams</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.StartPreview(MUEngine.Story.SkillStory,System.Boolean)">
            <summary>
            开始预览
            </summary>
            <param name="story">要执行预览的剧情</param>
            <param name="calledByEditor">是否由编辑器调用</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.StopPreview">
            <summary>
            停止预览
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.EnableSkillPrevieCamera(MUEngine.Story.IEnableCameraEvent,MUEngine.Story.EStoryMode)">
            <summary>
            启用技能预览摄像机
            </summary>
            <param name="cameraEvent">对应的摄像机启用事件</param>
            <param name="mode">剧情模式</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.DisableSkillPreviewCamera(MUEngine.Story.IEnableCameraEvent,MUEngine.Story.EStoryMode)">
            <summary>
            禁用技能预览摄像机
            </summary>
            <param name="cameraEvent">对应的摄像机启用事件</param>
            <param name="mode">剧情模式</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.ShowScaleFloor">
            <summary>
            显示刻度盘地板
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.HideScaleFloor">
            <summary>
            隐藏刻度盘地盘
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.PlayLoadedStory(MUEngine.Story.SkillStory)">
            <summary>
            实际播放技能预览
            </summary>
            <param name="story">技能预览剧情</param>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.AssetInStoryLoadFinishedHandler(System.Object,MUEngine.Story.StoryResourceLoadedEventArgs)">
            <summary>
            处理剧情内部资源加载完成事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillPreviewModule.ChangeCamera(MUEngine.Story.StoryCamera,MUEngine.Story.EStoryMode)">
            <summary>
            切换摄像机
            </summary>
            <param name="newCamera">新的摄像机</param>
            <param name="mode">剧情模式</param>
        </member>
        <member name="T:MUEngine.Story.SkillStory">
            <summary>
            专门用于技能预览的剧情类
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillStory.AssetName">
            <summary>
            对应的资源名称
            </summary>
        </member>
        <member name="P:MUEngine.Story.SkillStory.Mode">
            <summary>
            技能预览剧情仅支持实际游戏模式
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillStory.Stop">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="M:MUEngine.Story.SkillStory.Unserialize(System.String,System.String)">
            <summary>
            使用JsonStory反序列化生成SkillStory对象
            </summary>
            <param name="jsonString">JSON字符串</param>
            <param name="playbackParams">播放参数</param>
            <returns>生成的SkillStory对象</returns>
        </member>
        <member name="T:MUEngine.Story.StoryClassRegistor">
            <summary>
            剧情序列化类型注册器
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryClassRegistor.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryEditorConfig">
            <summary>
            剧情编辑器配置类
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEditorConfig.StoryFileDirectory">
            <summary>
            剧情文件的保存目录
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEditorConfig.ResourceDirectory">
            <summary>
            预览资源文件目录
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryEditorConfig.DatabaseDirectory">
            <summary>
            数据库文件目录
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryEditorConfig.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryModule">
            <summary>
            剧情核心模块
            提供管理以及播放剧情等相关功能
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.Version">
            <summary>
            剧情模块版本
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.ClientProxy">
            <summary>
            剧情模块在当前项目中的客户端代理
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.EditorProxy">
            <summary>
            编辑器代理，仅在编辑器模式下使用
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.PlayingStory">
            <summary>
            当前正在播放的剧情
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.loadingStory">
            <summary>
            正在加载的剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.PlayingStorySN">
            <summary>
            正在播放的剧情的SN。如果没有正在播放的剧情，则返回0
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.IsLoading">
            <summary>
            是否正在加载剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.IsPlaying">
            <summary>
            当前是否有剧情正在播放
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.IsEdittingStory">
            <summary>
            当前是否正在编辑剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryModule.HasPrePlayExecuted">
            <summary>
            剧情播放前的预处理操作是否已经执行
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryModule.PlayStarted">
            <summary>
            开始播放剧情事件
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryModule.PlayFinished">
            <summary>
            剧情播放结束事件
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.loadingTimeSpan">
            <summary>
            加载时长
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.isWaitingForSkip">
            <summary>
            在正在加载剧情时调用跳过剧情的话，会将该变量置为true
            之后剧情加载完毕之后会直接执行跳过操作
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.subManagerList">
            <summary>
            子模块管理器列表
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.cachedStory">
            <summary>
            缓存的JsonStory对象
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.cachPollingTimeCount">
            <summary>
            缓存轮询的时间计数
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryModule.currentTransition">
            <summary>
            当前剧情过渡器
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.Initialize(MUEngine.Story.IStoryClientProxy)">
            <summary>
            初始化剧情模块
            </summary>
            <param name="clientProxy">当前项目的客户端代理</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.PreloadStoryResource(System.String)">
            <summary>
            预先加载剧情中的资源
            </summary>
            <param name="storyName">剧情文件名称(不带扩展名)</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.PlayStory(MUEngine.Story.StoryConfig)">
            <summary>
            加载并播放剧情
            </summary>
            <param name="config">剧情配置</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.SkipCurrentStory">
            <summary>
            跳过当前剧情
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.AbortCurrentStory">
            <summary>
            中止当前剧情
            在较特殊的异常状态下使用。被中止的剧情将不会发送播放完成的相关事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.ResumeCurrentStory">
            <summary>
            让当前（已暂停的）剧情继续播放
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.RegisterSubManager(MUEngine.Story.IStorySubManager)">
            <summary>
            注册子模块管理器
            </summary>
            <param name="subManager">子模块管理器</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.UnregisterSubManager(MUEngine.Story.IStorySubManager)">
            <summary>
            取消子模块管理器的注册
            </summary>
            <param name="subManager">子模块管理器</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.EditorPlayStory(MUEngine.Story.MUStory)">
            <summary>
            供编辑器调用－播放（资源已加载的）剧情
            </summary>
            <param name="story">需要播放的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.EditorPrePlay(MUEngine.Story.MUStory)">
            <summary>
            供编辑器调用－播放剧情前的预处理操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.EditorAfterPlay(MUEngine.Story.MUStory)">
            <summary>
            供编辑器调用－剧情播放完毕后的处理
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.#cctor">
            <summary>
            静态构建
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.InitializeEditorProxy">
            <summary>
            初始化编辑器代理
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.PreloadJsonStoryCallback(System.String,UnityEngine.Object)">
            <summary>
            预加载剧情时使用的获取到JSON文件的回调方法
            </summary>
            <param name="assetName">资源名称</param>
            <param name="obj">JSON文本对象</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.PrePlayStory(MUEngine.Story.MUStory)">
            <summary>
            播放剧情前的预处理操作
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.PlayLoadedStory(MUEngine.Story.MUStory)">
            <summary>
            (以实际游戏模式)播放已加载资源的剧情
            </summary>
            <param name="story">需要播放的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.AfterPlayStory(MUEngine.Story.MUStory)">
            <summary>
            剧情播放完毕后的处理
            </summary>
            <param name="story">对应的剧情</param>
        </member>
        <member name="M:MUEngine.Story.StoryModule.StoryResourceLoadedHandler(System.Object,MUEngine.Story.StoryResourceLoadedEventArgs)">
            <summary>
            处理剧情的资源加载完毕事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryModule.StoryFinishedHandler(System.Object,System.EventArgs)">
            <summary>
            处理剧情播放完毕事件
            </summary>
        </member>
        <member name="T:MUEngine.Story.StoryUtility">
            <summary>
            剧情相关工具方法
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetAllContainers(MUEngine.Story.FSequence)">
            <summary>
            获取动画序列中的所有Container
            </summary>
            <param name="sequence">动画序列</param>
            <returns>所有Container</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetAllTimelines(MUEngine.Story.FSequence)">
            <summary>
            获取动画序列中的所有时间线
            </summary>
            <param name="sequence">动画序列</param>
            <returns>所有时间线</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetAllTracks(MUEngine.Story.FSequence)">
            <summary>
            获取动画序列中的所有轨道
            </summary>
            <param name="sequence">动画序列</param>
            <returns>所有轨道</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetAllEvents(MUEngine.Story.FSequence)">
            <summary>
            获取动画序列中的所有事件
            </summary>
            <param name="sequence">动画序列</param>
            <returns>所有事件</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetEventType(System.String)">
            <summary>
            获取事件的类型
            </summary>
            <param name="eventTypeName">事件类型的名称</param>
            <returns>事件的类型</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetFormatedAngleValue(System.Single,System.Single)">
            <summary>
            获取格式化之后的角度值
            格式化后的角度值与上一个节点的角度值之间的差值不超过180度
            </summary>
            <param name="preValue">上一个节点的角度值</param>
            <param name="originValue">原始角度值</param>
            <returns>格式化之后的角度值</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.ColorToString(UnityEngine.Color)">
            <summary>
            将颜色转换为文本
            </summary>
            <param name="color">颜色值</param>
            <returns>颜色值文本</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.StringToColor(System.String)">
            <summary>
            将文本转换为颜色
            </summary>
            <param name="colorString">颜色值文本</param>
            <returns>颜色</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetTargetPosition(MUEngine.Story.ITargetEvent,System.Boolean)">
            <summary>
            获取目标的实体位置
            </summary>
            <param name="targetEvent">目标事件</param>
            <param name="ignoreNode">忽略子节点(用于编辑器控制视图)</param>
            <returns>目标的实际位置</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetTargetNodePosition(MUEngine.Story.ITargetEvent,System.Boolean)">
            <summary>
            获取目标事件的目标子节点的位置
            </summary>
            <param name="targetEvent">目标事件</param>
            <param name="ignoreNode">忽略子节点(用于编辑器控制视图)</param>
            <returns>目标子节点的位置</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetTargetRotation(MUEngine.Story.ITargetEvent,System.Boolean)">
            <summary>
            获取目标旋转
            </summary>
            <param name="targetEvent">目标事件</param>
            <param name="forceVerStraight">是否强直水平铅直(用于保持角色身体直立)</param>
            <returns>目标旋转</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetTargetEventCurrentOffset(MUEngine.Story.ITargetEvent)">
            <summary>
            获取目标事件当前的偏移量
            </summary>
            <param name="targetEvent">目标事件</param>
            <returns>当前的偏移量</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetTargetEventText(MUEngine.Story.ITargetEvent)">
            <summary>
            获取目标事件的显示文本
            </summary>
            <param name="targetEvent">目标事件</param>
            <returns>显示文本</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetAllRelateTimeline(MUEngine.Story.StoryComponent)">
            <summary>
            获取与剧情组件相关联的所有时间线
            </summary>
            <param name="component">剧情组件</param>
            <returns>与组件相关联的所有时间线</returns>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.PreloadResource(System.String,System.String)">
            <summary>
            预加载资源
            </summary>
            <param name="assetName">资源名称</param>
            <param name="assetExtension">资源扩展名</param>
        </member>
        <member name="M:MUEngine.Story.StoryUtility.GetRotatedPosition(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            获取进行了旋转调整操作后的新位置
            </summary>
            <param name="originPos">原始位置</param>
            <param name="basePos">基准点位置</param>
            <param name="yAngle">绕Y轴旋转角度</param>
            <returns>旋转调整后的新位置</returns>
        </member>
        <member name="T:MUEngine.Story.StoryTransition">
            <summary>
            剧情过渡器，用于过渡剧情与非剧情
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryTransition.IsTransitionIn">
            <summary>
            是否为过渡进入（true为进入剧情，false为离开剧情）
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryTransition.Effect">
            <summary>
            过渡效果
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryTransition.TimeSpan">
            <summary>
            过渡时长
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryTransition.DelayTimeSpan">
            <summary>
            延迟时长
            </summary>
        </member>
        <member name="P:MUEngine.Story.StoryTransition.HasFinished">
            <summary>
            是否已经完成
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryTransition.currentTime">
            <summary>
            当前过渡时间
            </summary>
        </member>
        <member name="F:MUEngine.Story.StoryTransition.hasStarted">
            <summary>
            是否已经开始过渡
            </summary>
        </member>
        <member name="E:MUEngine.Story.StoryTransition.Finished">
            <summary>
            过渡完毕事件
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.Create(System.Boolean,MUEngine.Story.ECameraCutToEffect)">
            <summary>
            创建过渡器
            </summary>
            <param name="isTransitionIn">是否为过渡进入（true为进入剧情，false为离开剧情）</param>
            <param name="effect">过渡效果</param>
            <returns>过渡器</returns>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.StartTransit(System.Single,System.Single)">
            <summary>
            开始过渡
            </summary>
            <param name="timeSpan">过渡时长</param>
            <param name="delayTimeSpan">延迟时长</param>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.Skip">
            <summary>
            跳过过渡
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.CheckHasFinished">
            <summary>
            检测是否已经完成
            </summary>
            <returns>是否已经完成</returns>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.UpdateTransitionIn">
            <summary>
            更新过渡进入效果
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.UpdateTransitionOut">
            <summary>
            更新过渡离开效果
            </summary>
        </member>
        <member name="M:MUEngine.Story.StoryTransition.TransitionFinish">
            <summary>
            完成过渡
            </summary>
        </member>
        <member name="M:AudioClipLoader.LoadSound(System.Action)">
            <summary>
            加载音效
            </summary>
            <param name="LoadFinishCallback">加载完成后的回调</param>
        </member>
        <member name="M:CurveHolderNew.GetPositionByType(System.Single)">
            <summary>
            根据移动方式获取对应时间的坐标
            </summary>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="M:CurveHolderNew.GetRotationByType(System.Single)">
            <summary>
            根据旋转方式获取对应时间的旋转量
            </summary>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="F:DynamicBone.m_Gravity">
            <summary>
            重力
            </summary>
        </member>
        <member name="F:DynamicBone.m_LocalGravity">
            <summary>
            初始状态，本地空间下的重力方向
            </summary>
        </member>
        <member name="F:DynamicBone.Particle.m_Transform">
            <summary>
            绑定的骨骼
            </summary>
        </member>
        <member name="F:DynamicBone.Particle.m_ParentIndex">
            <summary>
            父节点
            </summary>
        </member>
        <member name="F:DynamicBone.Particle.m_Position">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="F:DynamicBone.Particle.m_PrevPosition">
            <summary>
            上一帧位置
            </summary>
        </member>
        <member name="F:DynamicBone.Particle.m_InitLocalPosition">
            <summary>
            质点初始位置
            </summary>
        </member>
        <member name="F:DynamicBone.Particle.m_InitLocalRotation">
            <summary>
            质点初始旋转
            </summary>
        </member>
        <member name="F:DynamicBone.m_Particles">
            <summary>
            所有质点
            </summary>
        </member>
        <member name="M:DynamicBone.SetupParticles">
            <summary>
            初始化质点
            </summary>
        </member>
        <member name="M:DynamicBone.ResetParticlesPosition">
            <summary>
            重置质点位置
            </summary>
        </member>
        <member name="T:DynamicBoneCollider">
            <summary>
            胶囊体
            </summary>
        </member>
        <member name="M:DynamicBoneCollider.OutsideSphere(UnityEngine.Vector3@,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>
            检查质点是否在球体之内，如果在，把质点推出到球体表面
            </summary>
            <param name="particlePosition"></param>
            <param name="particleRadius"></param>
            <param name="sphereCenter"></param>
            <param name="sphereRadius"></param>
        </member>
        <member name="M:DynamicBoneCollider.InsideSphere(UnityEngine.Vector3@,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>
            检查质点是否在球体之外，如果是，将质点推到球体表面
            </summary>
            <param name="particlePosition"></param>
            <param name="particleRadius"></param>
            <param name="sphereCenter"></param>
            <param name="sphereRadius"></param>
        </member>
        <member name="T:MUInstance">
            <summary>
            用于快速获取一些通用实例的辅助类
            </summary>
        </member>
        <member name="P:MUInstance.TerrainBhr">
            <summary>
            TerrainBehaviour的实例
            </summary>
        </member>
        <member name="P:MUInstance.LightEffect">
            <summary>
            LightFaceEffect实例
            </summary>
        </member>
        <member name="P:MUInstance.SunLight">
            <summary>
            场景主光实例
            </summary>
        </member>
        <member name="M:MUInstance.OnSceneChanged">
            <summary>
            处理进入场景变更
            </summary>
        </member>
        <member name="F:ActorMeshMaterialData.mMaterials">
            <summary>
            材质列表
            </summary>
        </member>
        <member name="F:ActorMeshMaterialData.mName">
            <summary>
            材质列表名
            </summary>
        </member>
        <member name="F:ActorMeshMaterialData.mRender">
            <summary>
            应用的渲染器
            </summary>
        </member>
        <member name="M:ActorMeshMaterialData.PickMaterial(System.Int32)">
            <summary>
            挑选一个材质
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:ActorMeshMaterialData.SetTargetRender(UnityEngine.Renderer)">
            <summary>
            设置目标render
            </summary>
            <param name="render"></param>
        </member>
    </members>
</doc>
